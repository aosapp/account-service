
/** ----------------------------------------------------------------------------------------------------
* 
*	This code was automatically generated by the LeanFT Application Model code generator.
*
*	Changes to this file may cause incorrect behavior and will be lost 
*	when the code is regenerated.
*
*   ----------------------------------------------------------------------------------------------------
*/
package NET;

import javax.annotation.Generated;

import com.hp.lft.sdk.*;
import com.hp.lft.sdk.internal.*;

@Generated(value = { "This class is automatically generated by the LeanFT Application Model code generator - version \"14.00\"" })
public class DotNetAppModel extends AppModelBase {		private AdvantageShopAdministrator AdvantageShopAdministrator;
	private ResetPasswordForDotNetUserWindow ResetPasswordForDotNetUserWindow;
	private DeleteUserConfirmationWindow DeleteUserConfirmationWindow;

	public DotNetAppModel() throws GeneralLeanFtException 
	{
		setName("DotNetAppModel");
			AdvantageShopAdministrator = new AdvantageShopAdministrator(this);
	ResetPasswordForDotNetUserWindow = new ResetPasswordForDotNetUserWindow(this);
	DeleteUserConfirmationWindow = new DeleteUserConfirmationWindow(this);
		rebuildDescriptions();
	}
	
	public DotNetAppModel(TestObject contextTestObject) throws GeneralLeanFtException
	{
		setName("DotNetAppModel");
				AdvantageShopAdministrator = new AdvantageShopAdministrator(contextTestObject, this);
		ResetPasswordForDotNetUserWindow = new ResetPasswordForDotNetUserWindow(contextTestObject, this);
		DeleteUserConfirmationWindow = new DeleteUserConfirmationWindow(contextTestObject, this);
		rebuildDescriptions();
	}	

			public AdvantageShopAdministrator AdvantageShopAdministrator() { return AdvantageShopAdministrator; }
		public ResetPasswordForDotNetUserWindow ResetPasswordForDotNetUserWindow() { return ResetPasswordForDotNetUserWindow; }
		public DeleteUserConfirmationWindow DeleteUserConfirmationWindow() { return DeleteUserConfirmationWindow; }

		public class AdvantageShopAdministrator extends WindowNodeBase
	{

		
			private TopBarList TopBarList;
	private UserNameEditField UserNameEditField;
	private PasswordEditField PasswordEditField;
	private ServerEditField ServerEditField;
	private RememberMeCheckBox RememberMeCheckBox;
	private SIGNINButton SIGNINButton;
	private AdminUiObject AdminUiObject;
	private LogoutButton LogoutButton;
	private PRODUCTSUiObject PRODUCTSUiObject;
	private SideList SideList;
	private ProductsDataGridTable ProductsDataGridTable;
	private ProductsWpfTabStrip ProductsWpfTabStrip;
	private ADDCOLORSButton ADDCOLORSButton;
	private YelloeCheckBox YelloeCheckBox;
	private SAVEButton SAVEButton;
	private ProductsColorsGridTable ProductsColorsGridTable;
	private ADDUSERButton ADDUSERButton;
	private UserNameUserManageEditField UserNameUserManageEditField;
	private EmailUserManageEditField EmailUserManageEditField;
	private ConfirmPasswordUserManageEditField ConfirmPasswordUserManageEditField;
	private FirstNameUserManageEditField FirstNameUserManageEditField;
	private LastNameUserManageEditField LastNameUserManageEditField;
	private OKUserManageButton OKUserManageButton;
	private PasswordUserManageEditField PasswordUserManageEditField;
	private UsersControlUiObject UsersControlUiObject;
	private UsersTypesGridTable UsersTypesGridTable;
	private SearchEditField SearchEditField;
	private WEIGHTEditField WEIGHTEditField;
						public AdvantageShopAdministrator(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					TopBarList = new TopBarList(this, applicationModel);
		UserNameEditField = new UserNameEditField(this, applicationModel);
		PasswordEditField = new PasswordEditField(this, applicationModel);
		ServerEditField = new ServerEditField(this, applicationModel);
		RememberMeCheckBox = new RememberMeCheckBox(this, applicationModel);
		SIGNINButton = new SIGNINButton(this, applicationModel);
		AdminUiObject = new AdminUiObject(this, applicationModel);
		LogoutButton = new LogoutButton(this, applicationModel);
		PRODUCTSUiObject = new PRODUCTSUiObject(this, applicationModel);
		SideList = new SideList(this, applicationModel);
		ProductsDataGridTable = new ProductsDataGridTable(this, applicationModel);
		ProductsWpfTabStrip = new ProductsWpfTabStrip(this, applicationModel);
		ADDCOLORSButton = new ADDCOLORSButton(this, applicationModel);
		YelloeCheckBox = new YelloeCheckBox(this, applicationModel);
		SAVEButton = new SAVEButton(this, applicationModel);
		ProductsColorsGridTable = new ProductsColorsGridTable(this, applicationModel);
		ADDUSERButton = new ADDUSERButton(this, applicationModel);
		UserNameUserManageEditField = new UserNameUserManageEditField(this, applicationModel);
		EmailUserManageEditField = new EmailUserManageEditField(this, applicationModel);
		ConfirmPasswordUserManageEditField = new ConfirmPasswordUserManageEditField(this, applicationModel);
		FirstNameUserManageEditField = new FirstNameUserManageEditField(this, applicationModel);
		LastNameUserManageEditField = new LastNameUserManageEditField(this, applicationModel);
		OKUserManageButton = new OKUserManageButton(this, applicationModel);
		PasswordUserManageEditField = new PasswordUserManageEditField(this, applicationModel);
		UsersControlUiObject = new UsersControlUiObject(this, applicationModel);
		UsersTypesGridTable = new UsersTypesGridTable(this, applicationModel);
		SearchEditField = new SearchEditField(this, applicationModel);
		WEIGHTEditField = new WEIGHTEditField(this, applicationModel);
			
			setDisplayName("Advantage Shop Administrator");
		}
				public AdvantageShopAdministrator(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					TopBarList = new TopBarList(this, applicationModel);
		UserNameEditField = new UserNameEditField(this, applicationModel);
		PasswordEditField = new PasswordEditField(this, applicationModel);
		ServerEditField = new ServerEditField(this, applicationModel);
		RememberMeCheckBox = new RememberMeCheckBox(this, applicationModel);
		SIGNINButton = new SIGNINButton(this, applicationModel);
		AdminUiObject = new AdminUiObject(this, applicationModel);
		LogoutButton = new LogoutButton(this, applicationModel);
		PRODUCTSUiObject = new PRODUCTSUiObject(this, applicationModel);
		SideList = new SideList(this, applicationModel);
		ProductsDataGridTable = new ProductsDataGridTable(this, applicationModel);
		ProductsWpfTabStrip = new ProductsWpfTabStrip(this, applicationModel);
		ADDCOLORSButton = new ADDCOLORSButton(this, applicationModel);
		YelloeCheckBox = new YelloeCheckBox(this, applicationModel);
		SAVEButton = new SAVEButton(this, applicationModel);
		ProductsColorsGridTable = new ProductsColorsGridTable(this, applicationModel);
		ADDUSERButton = new ADDUSERButton(this, applicationModel);
		UserNameUserManageEditField = new UserNameUserManageEditField(this, applicationModel);
		EmailUserManageEditField = new EmailUserManageEditField(this, applicationModel);
		ConfirmPasswordUserManageEditField = new ConfirmPasswordUserManageEditField(this, applicationModel);
		FirstNameUserManageEditField = new FirstNameUserManageEditField(this, applicationModel);
		LastNameUserManageEditField = new LastNameUserManageEditField(this, applicationModel);
		OKUserManageButton = new OKUserManageButton(this, applicationModel);
		PasswordUserManageEditField = new PasswordUserManageEditField(this, applicationModel);
		UsersControlUiObject = new UsersControlUiObject(this, applicationModel);
		UsersTypesGridTable = new UsersTypesGridTable(this, applicationModel);
		SearchEditField = new SearchEditField(this, applicationModel);
		WEIGHTEditField = new WEIGHTEditField(this, applicationModel);

			setDisplayName("Advantage Shop Administrator");
		}

		@Override
		protected com.hp.lft.sdk.wpf.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.WindowDescription.Builder().objectName("Advantage Shop Administrator").fullType("window").windowTitleRegExp("Advantage Shop Administrator").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public TopBarList TopBarList() { return TopBarList; }
		public UserNameEditField UserNameEditField() { return UserNameEditField; }
		public PasswordEditField PasswordEditField() { return PasswordEditField; }
		public ServerEditField ServerEditField() { return ServerEditField; }
		public RememberMeCheckBox RememberMeCheckBox() { return RememberMeCheckBox; }
		public SIGNINButton SIGNINButton() { return SIGNINButton; }
		public AdminUiObject AdminUiObject() { return AdminUiObject; }
		public LogoutButton LogoutButton() { return LogoutButton; }
		public PRODUCTSUiObject PRODUCTSUiObject() { return PRODUCTSUiObject; }
		public SideList SideList() { return SideList; }
		public ProductsDataGridTable ProductsDataGridTable() { return ProductsDataGridTable; }
		public ProductsWpfTabStrip ProductsWpfTabStrip() { return ProductsWpfTabStrip; }
		public ADDCOLORSButton ADDCOLORSButton() { return ADDCOLORSButton; }
		public YelloeCheckBox YelloeCheckBox() { return YelloeCheckBox; }
		public SAVEButton SAVEButton() { return SAVEButton; }
		public ProductsColorsGridTable ProductsColorsGridTable() { return ProductsColorsGridTable; }
		public ADDUSERButton ADDUSERButton() { return ADDUSERButton; }
		public UserNameUserManageEditField UserNameUserManageEditField() { return UserNameUserManageEditField; }
		public EmailUserManageEditField EmailUserManageEditField() { return EmailUserManageEditField; }
		public ConfirmPasswordUserManageEditField ConfirmPasswordUserManageEditField() { return ConfirmPasswordUserManageEditField; }
		public FirstNameUserManageEditField FirstNameUserManageEditField() { return FirstNameUserManageEditField; }
		public LastNameUserManageEditField LastNameUserManageEditField() { return LastNameUserManageEditField; }
		public OKUserManageButton OKUserManageButton() { return OKUserManageButton; }
		public PasswordUserManageEditField PasswordUserManageEditField() { return PasswordUserManageEditField; }
		public UsersControlUiObject UsersControlUiObject() { return UsersControlUiObject; }
		public UsersTypesGridTable UsersTypesGridTable() { return UsersTypesGridTable; }
		public SearchEditField SearchEditField() { return SearchEditField; }
		public WEIGHTEditField WEIGHTEditField() { return WEIGHTEditField; }
		
			public class TopBarList extends ListNodeBase
	{

		
								public TopBarList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TopBar");
		}

		@Override
		protected com.hp.lft.sdk.wpf.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.ListDescription.Builder().objectName("").fullNamePath(";;;;").fullType("list view").windowTitleRegExp("Advantage Shop Administrator").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UserNameEditField extends EditFieldNodeBase
	{

		
								public UserNameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("User Name");
		}

		@Override
		protected com.hp.lft.sdk.wpf.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.EditFieldDescription.Builder().objectName("").fullNamePath(";;;").fullType("edit").windowTitleRegExp("Advantage Shop Administrator").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PasswordEditField extends EditFieldNodeBase
	{

		
								public PasswordEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Password");
		}

		@Override
		protected com.hp.lft.sdk.wpf.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.EditFieldDescription.Builder().objectName("Password_Box").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ServerEditField extends EditFieldNodeBase
	{

		
								public ServerEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Server");
		}

		@Override
		protected com.hp.lft.sdk.wpf.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.EditFieldDescription.Builder().objectName("").fullNamePath(";;;").fullType("edit").windowTitleRegExp("Advantage Shop Administrator").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RememberMeCheckBox extends CheckBoxNodeBase
	{

		
								public RememberMeCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Remember me");
		}

		@Override
		protected com.hp.lft.sdk.wpf.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.CheckBoxDescription.Builder().text("Remember me").objectName("Remember me").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SIGNINButton extends ButtonNodeBase
	{

		
								public SIGNINButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SIGN IN");
		}

		@Override
		protected com.hp.lft.sdk.wpf.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.ButtonDescription.Builder().text("SIGN IN").objectName("SIGN IN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AdminUiObject extends UiObjectNodeBase
	{

		
								public AdminUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("admin");
		}

		@Override
		protected com.hp.lft.sdk.wpf.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.UiObjectDescription.Builder().objectName("").fullNamePath(";;").fullType("object").windowTitleRegExp("Advantage Shop Administrator").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LogoutButton extends ButtonNodeBase
	{

		
								public LogoutButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Logout");
		}

		@Override
		protected com.hp.lft.sdk.wpf.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.ButtonDescription.Builder().text("Logout").objectName("Logout").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PRODUCTSUiObject extends UiObjectNodeBase
	{

		
								public PRODUCTSUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PRODUCTS ");
		}

		@Override
		protected com.hp.lft.sdk.wpf.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.UiObjectDescription.Builder().objectName("").fullNamePath(";;;").fullType("object").windowTitleRegExp("Advantage Shop Administrator").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SideList extends ListNodeBase
	{

		
								public SideList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SideList");
		}

		@Override
		protected com.hp.lft.sdk.wpf.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.ListDescription.Builder().objectName("").fullNamePath(";;;").fullType("list view").windowTitleRegExp("Advantage Shop Administrator").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProductsDataGridTable extends TableNodeBase
	{

		
								public ProductsDataGridTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProductsDataGrid");
		}

		@Override
		protected com.hp.lft.sdk.wpf.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.TableDescription.Builder().objectName("ProductsDataGrid").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProductsWpfTabStrip extends TabStripNodeBase
	{

		
								public ProductsWpfTabStrip(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProductsWpfTabStrip");
		}

		@Override
		protected com.hp.lft.sdk.wpf.TabStripDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.TabStripDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.TabStripDescription.Builder().objectName("").fullNamePath(";;;;").fullType("tab").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ADDCOLORSButton extends ButtonNodeBase
	{

		
								public ADDCOLORSButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ADD COLORS");
		}

		@Override
		protected com.hp.lft.sdk.wpf.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.ButtonDescription.Builder().text("ADD COLORS").objectName("addColorButton").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class YelloeCheckBox extends CheckBoxNodeBase
	{

		
								public YelloeCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("YelloeCheckBox");
		}

		@Override
		protected com.hp.lft.sdk.wpf.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.CheckBoxDescription.Builder().parentText("").text("").objectName("").fullNamePath(";;;;;;").fullType("check box").windowTitleRegExp("Advantage Shop Administrator").index(5).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SAVEButton extends ButtonNodeBase
	{

		
								public SAVEButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SAVE");
		}

		@Override
		protected com.hp.lft.sdk.wpf.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.ButtonDescription.Builder().text("SAVE").objectName("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProductsColorsGridTable extends TableNodeBase
	{

		
								public ProductsColorsGridTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProductsColorsGrid");
		}

		@Override
		protected com.hp.lft.sdk.wpf.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.TableDescription.Builder().objectName("ProductsColorsGrid").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ADDUSERButton extends ButtonNodeBase
	{

		
								public ADDUSERButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ADD USER");
		}

		@Override
		protected com.hp.lft.sdk.wpf.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.ButtonDescription.Builder().text("ADD USER").objectName("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UserNameUserManageEditField extends EditFieldNodeBase
	{

		
								public UserNameUserManageEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("User Name_UserManage");
		}

		@Override
		protected com.hp.lft.sdk.wpf.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.EditFieldDescription.Builder().objectName("").fullNamePath(";;;;;").fullType("edit").windowTitleRegExp("Advantage Shop Administrator").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EmailUserManageEditField extends EditFieldNodeBase
	{

		
								public EmailUserManageEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Email_UserManage");
		}

		@Override
		protected com.hp.lft.sdk.wpf.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.EditFieldDescription.Builder().objectName("").fullNamePath(";;;;;").fullType("edit").windowTitleRegExp("Advantage Shop Administrator").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConfirmPasswordUserManageEditField extends EditFieldNodeBase
	{

		
								public ConfirmPasswordUserManageEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Confirm password_UserManage");
		}

		@Override
		protected com.hp.lft.sdk.wpf.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.EditFieldDescription.Builder().objectName("PasswordConfirm_Box").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FirstNameUserManageEditField extends EditFieldNodeBase
	{

		
								public FirstNameUserManageEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("First Name_UserManage");
		}

		@Override
		protected com.hp.lft.sdk.wpf.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.EditFieldDescription.Builder().objectName("").fullNamePath(";;;;;").fullType("edit").windowTitleRegExp("Advantage Shop Administrator").index(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LastNameUserManageEditField extends EditFieldNodeBase
	{

		
								public LastNameUserManageEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Last Name_UserManage");
		}

		@Override
		protected com.hp.lft.sdk.wpf.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.EditFieldDescription.Builder().objectName("").fullNamePath(";;;;;").fullType("edit").windowTitleRegExp("Advantage Shop Administrator").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKUserManageButton extends ButtonNodeBase
	{

		
								public OKUserManageButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK_UserManage");
		}

		@Override
		protected com.hp.lft.sdk.wpf.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.ButtonDescription.Builder().text("OK").objectName("btnCreateNewUserOk").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PasswordUserManageEditField extends EditFieldNodeBase
	{

		
								public PasswordUserManageEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Password_UserManage");
		}

		@Override
		protected com.hp.lft.sdk.wpf.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.EditFieldDescription.Builder().objectName("Password_Box").fullType("edit").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UsersControlUiObject extends UiObjectNodeBase
	{

		
								public UsersControlUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ContentControl");
		}

		@Override
		protected com.hp.lft.sdk.wpf.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.UiObjectDescription.Builder().objectName("ContentControl").fullNamePath("ContentControl;;;;").fullType("object").windowTitleRegExp("Advantage Shop Administrator").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UsersTypesGridTable extends TableNodeBase
	{

		
								public UsersTypesGridTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UsersTypesGrid");
		}

		@Override
		protected com.hp.lft.sdk.wpf.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.TableDescription.Builder().objectName("UsersTypesGrid").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SearchEditField extends EditFieldNodeBase
	{

		
								public SearchEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Search");
		}

		@Override
		protected com.hp.lft.sdk.wpf.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.EditFieldDescription.Builder().objectName("").fullType("edit").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class WEIGHTEditField extends EditFieldNodeBase
	{

		
								public WEIGHTEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("WEIGHT");
		}

		@Override
		protected com.hp.lft.sdk.wpf.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.EditFieldDescription.Builder().objectName("").fullNamePath(";;;;;;").fullType("edit").windowTitleRegExp("Advantage Shop Administrator").index(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ResetPasswordForDotNetUserWindow extends WindowNodeBase
	{

		
			private NewPassEditField NewPassEditField;
	private RePassEditField RePassEditField;
	private OKPasswordButton OKPasswordButton;
						public ResetPasswordForDotNetUserWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NewPassEditField = new NewPassEditField(this, applicationModel);
		RePassEditField = new RePassEditField(this, applicationModel);
		OKPasswordButton = new OKPasswordButton(this, applicationModel);
			
			setDisplayName("Reset password for \"Dot.NetUser\"");
		}
				public ResetPasswordForDotNetUserWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewPassEditField = new NewPassEditField(this, applicationModel);
		RePassEditField = new RePassEditField(this, applicationModel);
		OKPasswordButton = new OKPasswordButton(this, applicationModel);

			setDisplayName("Reset password for \"Dot.NetUser\"");
		}

		@Override
		protected com.hp.lft.sdk.wpf.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.WindowDescription.Builder().objectName("resPassWin").fullType("window").windowTitleRegExp("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewPassEditField NewPassEditField() { return NewPassEditField; }
		public RePassEditField RePassEditField() { return RePassEditField; }
		public OKPasswordButton OKPasswordButton() { return OKPasswordButton; }
		
			public class NewPassEditField extends EditFieldNodeBase
	{

		
								public NewPassEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("newPass");
		}

		@Override
		protected com.hp.lft.sdk.wpf.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.EditFieldDescription.Builder().objectName("pasBox").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RePassEditField extends EditFieldNodeBase
	{

		
								public RePassEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("rePass");
		}

		@Override
		protected com.hp.lft.sdk.wpf.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.EditFieldDescription.Builder().objectName("pasRetBox").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKPasswordButton extends ButtonNodeBase
	{

		
								public OKPasswordButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK_Password");
		}

		@Override
		protected com.hp.lft.sdk.wpf.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.ButtonDescription.Builder().text("OK").objectName("btnResetPasswordOk").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class DeleteUserConfirmationWindow extends WindowNodeBase
	{

		
			private OKDeleteButton OKDeleteButton;
						public DeleteUserConfirmationWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OKDeleteButton = new OKDeleteButton(this, applicationModel);
			
			setDisplayName("Delete User Confirmation");
		}
				public DeleteUserConfirmationWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OKDeleteButton = new OKDeleteButton(this, applicationModel);

			setDisplayName("Delete User Confirmation");
		}

		@Override
		protected com.hp.lft.sdk.wpf.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.WindowDescription.Builder().objectName("deleteUserWindow").fullType("window").windowTitleRegExp("Delete User Confirmation").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OKDeleteButton OKDeleteButton() { return OKDeleteButton; }
		
			public class OKDeleteButton extends ButtonNodeBase
	{

		
								public OKDeleteButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK_delete");
		}

		@Override
		protected com.hp.lft.sdk.wpf.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.ButtonDescription.Builder().text("OK").objectName("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}


			
	public abstract class WindowNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.wpf.Window, com.hp.lft.sdk.wpf.WindowDescription> implements com.hp.lft.sdk.wpf.Window
	{
		public WindowNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public WindowNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void activate(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate(arg0);
		}

		@Override 
		public boolean canFocus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().canFocus();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close();
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getParentText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getParentText();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public com.hp.lft.sdk.WindowState getWindowState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowState();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isModal() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isModal();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void makeVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().makeVisible();
		}

		@Override 
		public void maximize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().maximize();
		}

		@Override 
		public void minimize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().minimize();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void move(java.awt.Point arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0);
		}

		@Override 
		public void move(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0, arg1);
		}

		@Override 
		public void resize(java.awt.Dimension arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0);
		}

		@Override 
		public void resize(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override 
		public void restore() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().restore();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void showContextMenu() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().showContextMenu();
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class ListNodeBase extends AppModelNodeBase<com.hp.lft.sdk.wpf.List, com.hp.lft.sdk.wpf.ListDescription> implements com.hp.lft.sdk.wpf.List
	{		
		public ListNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public boolean canFocus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().canFocus();
		}

		@Override 
		public boolean canSelectMultiple() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().canSelectMultiple();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.lang.String getHelpText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHelpText();
		}

		@Override 
		public java.util.List<java.lang.String> getItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItems();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getParentText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getParentText();
		}

		@Override 
		public java.util.List<java.lang.String> getSelectedItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedItems();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void makeVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().makeVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void select(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void selectRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void showContextMenu() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().showContextMenu();
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class EditFieldNodeBase extends AppModelNodeBase<com.hp.lft.sdk.wpf.EditField, com.hp.lft.sdk.wpf.EditFieldDescription> implements com.hp.lft.sdk.wpf.EditField
	{		
		public EditFieldNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public boolean canFocus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().canFocus();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getParentText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getParentText();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isReadOnly() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isReadOnly();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void makeVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().makeVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void select(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1);
		}

		@Override 
		public void select(int arg0, int arg1, int arg2, int arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1, arg2, arg3);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setSecure(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setSecure(arg0);
		}

		@Override 
		public void setText(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setText(arg0);
		}

		@Override 
		public void showContextMenu() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().showContextMenu();
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class CheckBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.wpf.CheckBox, com.hp.lft.sdk.wpf.CheckBoxDescription> implements com.hp.lft.sdk.wpf.CheckBox
	{		
		public CheckBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public boolean canFocus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().canFocus();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.lang.String getHelpText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHelpText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getParentText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getParentText();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.CheckedState getState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getState();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isThreeState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isThreeState();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void makeVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().makeVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void set(com.hp.lft.sdk.CheckedState arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().set(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void showContextMenu() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().showContextMenu();
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class ButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.wpf.Button, com.hp.lft.sdk.wpf.ButtonDescription> implements com.hp.lft.sdk.wpf.Button
	{		
		public ButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public boolean canFocus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().canFocus();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.lang.String getHelpText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHelpText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getParentText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getParentText();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public com.hp.lft.sdk.wpf.ToggleButton getToggleButton()  
		{
			return getConcrete().getToggleButton();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void makeVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().makeVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void showContextMenu() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().showContextMenu();
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class UiObjectNodeBase extends AppModelNodeBase<com.hp.lft.sdk.wpf.UiObject, com.hp.lft.sdk.wpf.UiObjectDescription> implements com.hp.lft.sdk.wpf.UiObject
	{		
		public UiObjectNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public boolean canFocus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().canFocus();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getParentText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getParentText();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void makeVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().makeVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void showContextMenu() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().showContextMenu();
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class TableNodeBase extends AppModelNodeBase<com.hp.lft.sdk.wpf.Table, com.hp.lft.sdk.wpf.TableDescription> implements com.hp.lft.sdk.wpf.Table
	{		
		public TableNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateCell(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateCell(arg0, arg1);
		}

		@Override 
		public void activateCell(int arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateCell(arg0, arg1);
		}

		@Override 
		public boolean canFocus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().canFocus();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public void extendSelect(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0, arg1);
		}

		@Override 
		public void extendSelect(int arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0, arg1);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.wpf.TableRow> getRows() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRows();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void makeVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().makeVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void selectCell(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCell(arg0, arg1);
		}

		@Override 
		public void selectCell(int arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCell(arg0, arg1);
		}

		@Override 
		public void selectColumn(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumn(arg0);
		}

		@Override 
		public void selectColumn(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumn(arg0);
		}

		@Override 
		public void selectRow(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRow(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void showContextMenu() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().showContextMenu();
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class TabStripNodeBase extends AppModelNodeBase<com.hp.lft.sdk.wpf.TabStrip, com.hp.lft.sdk.wpf.TabStripDescription> implements com.hp.lft.sdk.wpf.TabStrip
	{		
		public TabStripNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public boolean canFocus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().canFocus();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getSelectedTab() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedTab();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.util.List<java.lang.String> getTabs() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTabs();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void makeVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().makeVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void select(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void showContextMenu() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().showContextMenu();
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
}
