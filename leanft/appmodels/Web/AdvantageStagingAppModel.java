
/** ----------------------------------------------------------------------------------------------------
* 
*	This code was automatically generated by the UFT Developer Application Model code generator.
*
*	Changes to this file may cause incorrect behavior and will be lost 
*	when the code is regenerated.
*
*   ----------------------------------------------------------------------------------------------------
*/
package Web;

import com.hp.lft.sdk.*;
import com.hp.lft.sdk.web.*;

// This class is automatically generated by the UFT Developer Application Model code generator
public class AdvantageStagingAppModel extends AppModelBase {		private AdvantageShoppingPage AdvantageShoppingPage;
	private AdvantageOnlineShoppingDemoSupportChatPage AdvantageOnlineShoppingDemoSupportChatPage;
	private DownloadPage DownloadPage;
	private myAccountMyOrdersSignOutLink myAccountMyOrdersSignOutLink;
	private sIGNINWITHFACEBOOKORUsernamePasswordEmailREMEMBERMESIGNINForgotYourPasswordCREATENEWACCOUNTWebElement sIGNINWITHFACEBOOKORUsernamePasswordEmailREMEMBERMESIGNINForgotYourPasswordCREATENEWACCOUNTWebElement;
	private ttMyAccountMyOrdersSignOutLink ttMyAccountMyOrdersSignOutLink;
	private deleteAccountButton deleteAccountButton;
	private yesWebElement yesWebElement;
	
	public AdvantageStagingAppModel(TestObject contextTestObject) throws GeneralLeanFtException
	{
		setName("AdvantageStagingAppModel");
				AdvantageShoppingPage = new AdvantageShoppingPage(contextTestObject, this);
		AdvantageOnlineShoppingDemoSupportChatPage = new AdvantageOnlineShoppingDemoSupportChatPage(contextTestObject, this);
		DownloadPage = new DownloadPage(contextTestObject, this);
		myAccountMyOrdersSignOutLink = new myAccountMyOrdersSignOutLink(contextTestObject, this);
		sIGNINWITHFACEBOOKORUsernamePasswordEmailREMEMBERMESIGNINForgotYourPasswordCREATENEWACCOUNTWebElement = new sIGNINWITHFACEBOOKORUsernamePasswordEmailREMEMBERMESIGNINForgotYourPasswordCREATENEWACCOUNTWebElement(contextTestObject, this);
		ttMyAccountMyOrdersSignOutLink = new ttMyAccountMyOrdersSignOutLink(contextTestObject, this);
		deleteAccountButton = new deleteAccountButton(contextTestObject, this);
		yesWebElement = new yesWebElement(contextTestObject, this);
		rebuildDescriptions();
	}	

			public AdvantageShoppingPage AdvantageShoppingPage() { return AdvantageShoppingPage; }
		public AdvantageOnlineShoppingDemoSupportChatPage AdvantageOnlineShoppingDemoSupportChatPage() { return AdvantageOnlineShoppingDemoSupportChatPage; }
		public DownloadPage DownloadPage() { return DownloadPage; }
		public myAccountMyOrdersSignOutLink myAccountMyOrdersSignOutLink() { return myAccountMyOrdersSignOutLink; }
		public sIGNINWITHFACEBOOKORUsernamePasswordEmailREMEMBERMESIGNINForgotYourPasswordCREATENEWACCOUNTWebElement sIGNINWITHFACEBOOKORUsernamePasswordEmailREMEMBERMESIGNINForgotYourPasswordCREATENEWACCOUNTWebElement() { return sIGNINWITHFACEBOOKORUsernamePasswordEmailREMEMBERMESIGNINForgotYourPasswordCREATENEWACCOUNTWebElement; }
		public ttMyAccountMyOrdersSignOutLink ttMyAccountMyOrdersSignOutLink() { return ttMyAccountMyOrdersSignOutLink; }
		public deleteAccountButton deleteAccountButton() { return deleteAccountButton; }
		public yesWebElement yesWebElement() { return yesWebElement; }

		public class AdvantageShoppingPage extends PageNodeBase
	{

		
			private SearchIconWebElement SearchIconWebElement;
	private SpeakersImg SpeakersImg;
	private TabletsImgWebElement TabletsImgWebElement;
	private LaptopsImg LaptopsImg;
	private MiceImg MiceImg;
	private HeadphonesImg HeadphonesImg;
	private OrderNumber OrderNumber;
	private OURPRODUCTSMainWebElement OURPRODUCTSMainWebElement;
	private SPECIALOFFERMainWebElement SPECIALOFFERMainWebElement;
	private CONTACTUSMainWebElement CONTACTUSMainWebElement;
	private accountDeletedSuccessfullyWebElement accountDeletedSuccessfullyWebElement;
	private SignOutMainIconWebElement SignOutMainIconWebElement;
	private SEEOFFERButton SEEOFFERButton;
	private EXPLORENOWButton EXPLORENOWButton;
	private GOUPImage GOUPImage;
	private ADDTOCARTButton ADDTOCARTButton;
	private CHECKOUTHoverButton CHECKOUTHoverButton;
	private NEXTButton NEXTButton;
	private SafepayImage SafepayImage;
	private SafePayPasswordEditField SafePayPasswordEditField;
	private SignOutWebElement SignOutWebElement;
	private AdvantageDEMOHomeLink AdvantageDEMOHomeLink;
	private SpecialOfferImageItem1 SpecialOfferImageItem1;
	private PopularItemViewDetails PopularItemViewDetails;
	private CreateAccountUsernameWebEdit CreateAccountUsernameWebEdit;
	private CreateAccountPasswordEditField CreateAccountPasswordEditField;
	private CreateAccountEmailEditField CreateAccountEmailEditField;
	private CreateAccountPasswordConfirmEditField CreateAccountPasswordConfirmEditField;
	private CreateAccountFirstNameEditField CreateAccountFirstNameEditField;
	private CreateAccountLastNameEditField CreateAccountLastNameEditField;
	private CreateAccountPhoneNumberEditField CreateAccountPhoneNumberEditField;
	private CreateAccountCountrySelectListBox CreateAccountCountrySelectListBox;
	private CreateAccountAddressEditField CreateAccountAddressEditField;
	private CreateAccountPostalCodeEditField CreateAccountPostalCodeEditField;
	private CreateAccountCityEditField CreateAccountCityEditField;
	private CreateAccountReceiveOffersCheckBox CreateAccountReceiveOffersCheckBox;
	private UserNameAlreadyExistsWebElement UserNameAlreadyExistsWebElement;
	private ChatLogoImage ChatLogoImage;
	private FacebookImage FacebookImage;
	private TwitterImage TwitterImage;
	private LinkedInImage LinkedInImage;
	private AdvantageIncCopyrightVersionWebElement AdvantageIncCopyrightVersionWebElement;
	private MyAccountWebElement MyAccountWebElement;
	private MyOrdersWebElement MyOrdersWebElement;
	private MyAccountHeaderLabelWebElement MyAccountHeaderLabelWebElement;
	private MyOrdersHeaderLabelWebElement MyOrdersHeaderLabelWebElement;
	private SearchPreviewTOPRESULTSFORWebElement SearchPreviewTOPRESULTSFORWebElement;
	private SearchEditField SearchEditField;
	private ThankYouForBuyingWithAdvantageWebElement ThankYouForBuyingWithAdvantageWebElement;
	private ThankYouForContactingAdvantageSupportWebElement ThankYouForContactingAdvantageSupportWebElement;
	private TabletHPElite1011G1 TabletHPElite1011G1;
	private HPChromebookEnergyStarImage HPChromebookEnergyStarImage;
	private MiceHPUsbOptical MiceHPUsbOptical;
	private HPBeatsStudioHeadphonesImage HPBeatsStudioHeadphonesImage;
	private InvalidUserMessageWebElement InvalidUserMessageWebElement;
	private CreateAccountREGISTERNotValidWebElement CreateAccountREGISTERNotValidWebElement;
	private LAPTOPSWebElement LAPTOPSWebElement;
	private SPEAKERSWebElement SPEAKERSWebElement;
	private FirstItemInSearchFilterResultTableImage FirstItemInSearchFilterResultTableImage;
	private SearchResultTitleWebElement SearchResultTitleWebElement;
	private QuantityContainerLanelWebElement QuantityContainerLanelWebElement;
	private CartTable CartTable;
	private FirstRemoveItemFromCartLinkWebElement FirstRemoveItemFromCartLinkWebElement;
	private SHIPPINGCostWebElement SHIPPINGCostWebElement;
	private CREATENEWACCOUNTLink CREATENEWACCOUNTLink;
	private REGISTERButton REGISTERButton;
	private SENDContactUsButton SENDContactUsButton;
	private PAYNOWButton PAYNOWButton;
	private SIGNINButton SIGNINButton;
	private DISPLAYLink DISPLAYLink;
	private LaptopName LaptopName;
	private OrderSearchWebElement OrderSearchWebElement;
	private SearchOrderEditField SearchOrderEditField;
	private RemoveFromOrderValidate RemoveFromOrderValidate;
	private YesNoButtonsRemoveOrderSearch YesNoButtonsRemoveOrderSearch;
	private ColorSelectorFirstWebElement ColorSelectorFirstWebElement;
	private SoldOutHeadphonesWebElement SoldOutHeadphonesWebElement;
	private QuantityOfProductWebEdit QuantityOfProductWebEdit;
	private EmailContactUsWebElement EmailContactUsWebElement;
	private ContactUsSubject ContactUsSubject;
	private RememberMeCheckBox RememberMeCheckBox;
	private CloseSignInPopUpBtnWebElement CloseSignInPopUpBtnWebElement;
	private LinkCartIcon LinkCartIcon;
	private CartIcon CartIcon;
	private SafePayUsernameEditField SafePayUsernameEditField;
	private SaveChangesInProfileForFutureUse SaveChangesInProfileForFutureUse;
	private HPENVY17tTouchLaptop HPENVY17tTouchLaptop;
	private LogitechG502ProteusCore7 LogitechG502ProteusCore7;
	private HPH2310InEarHeadset HPH2310InEarHeadset;
	private LaptopFilterSearchCheckbox LaptopFilterSearchCheckbox;
	private SpeakersFilterSearchCheckbox SpeakersFilterSearchCheckbox;
	private UsernameLoginEditField UsernameLoginEditField;
	private PasswordLoginEditField PasswordLoginEditField;
	private CreateAccountAgreeToTermsCheckBox CreateAccountAgreeToTermsCheckBox;
	private SpeakerBoseSoundlinkWS SpeakerBoseSoundlinkWS;
	private laptopFororderService laptopFororderService;
	private MobileBtnWeb MobileBtnWeb;
	private MasterCreditImage MasterCreditImage;
	private CardNumberEditField CardNumberEditField;
	private CvvNumberEditField CvvNumberEditField;
	private CardholderNameEditField CardholderNameEditField;
	private SaveMasterCreditCheckBox SaveMasterCreditCheckBox;
	private SelectProductLineContactUsListBox SelectProductLineContactUsListBox;
	private SelectProductListBox2 SelectProductListBox2;
	private POPULARITEMSMainWebElement POPULARITEMSMainWebElement;
	private YesCANCELButton YesCANCELButton;
	private PAYNOWButtonManualPayment PAYNOWButtonManualPayment;
	private MiceLogitechG502Img MiceLogitechG502Img;
	private TabletHPPro608G1 TabletHPPro608G1;
	private ShippingCost ShippingCost;
	private CheckOutButton CheckOutButton;
	private SelectedColorForEnv17 SelectedColorForEnv17;
	private checkOutBtnButton1 checkOutBtnButton1;
						public AdvantageShoppingPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SearchIconWebElement = new SearchIconWebElement(this, applicationModel);
		SpeakersImg = new SpeakersImg(this, applicationModel);
		TabletsImgWebElement = new TabletsImgWebElement(this, applicationModel);
		LaptopsImg = new LaptopsImg(this, applicationModel);
		MiceImg = new MiceImg(this, applicationModel);
		HeadphonesImg = new HeadphonesImg(this, applicationModel);
		OrderNumber = new OrderNumber(this, applicationModel);
		OURPRODUCTSMainWebElement = new OURPRODUCTSMainWebElement(this, applicationModel);
		SPECIALOFFERMainWebElement = new SPECIALOFFERMainWebElement(this, applicationModel);
		CONTACTUSMainWebElement = new CONTACTUSMainWebElement(this, applicationModel);
		accountDeletedSuccessfullyWebElement = new accountDeletedSuccessfullyWebElement(this, applicationModel);
		SignOutMainIconWebElement = new SignOutMainIconWebElement(this, applicationModel);
		SEEOFFERButton = new SEEOFFERButton(this, applicationModel);
		EXPLORENOWButton = new EXPLORENOWButton(this, applicationModel);
		GOUPImage = new GOUPImage(this, applicationModel);
		ADDTOCARTButton = new ADDTOCARTButton(this, applicationModel);
		CHECKOUTHoverButton = new CHECKOUTHoverButton(this, applicationModel);
		NEXTButton = new NEXTButton(this, applicationModel);
		SafepayImage = new SafepayImage(this, applicationModel);
		SafePayPasswordEditField = new SafePayPasswordEditField(this, applicationModel);
		SignOutWebElement = new SignOutWebElement(this, applicationModel);
		AdvantageDEMOHomeLink = new AdvantageDEMOHomeLink(this, applicationModel);
		SpecialOfferImageItem1 = new SpecialOfferImageItem1(this, applicationModel);
		PopularItemViewDetails = new PopularItemViewDetails(this, applicationModel);
		CreateAccountUsernameWebEdit = new CreateAccountUsernameWebEdit(this, applicationModel);
		CreateAccountPasswordEditField = new CreateAccountPasswordEditField(this, applicationModel);
		CreateAccountEmailEditField = new CreateAccountEmailEditField(this, applicationModel);
		CreateAccountPasswordConfirmEditField = new CreateAccountPasswordConfirmEditField(this, applicationModel);
		CreateAccountFirstNameEditField = new CreateAccountFirstNameEditField(this, applicationModel);
		CreateAccountLastNameEditField = new CreateAccountLastNameEditField(this, applicationModel);
		CreateAccountPhoneNumberEditField = new CreateAccountPhoneNumberEditField(this, applicationModel);
		CreateAccountCountrySelectListBox = new CreateAccountCountrySelectListBox(this, applicationModel);
		CreateAccountAddressEditField = new CreateAccountAddressEditField(this, applicationModel);
		CreateAccountPostalCodeEditField = new CreateAccountPostalCodeEditField(this, applicationModel);
		CreateAccountCityEditField = new CreateAccountCityEditField(this, applicationModel);
		CreateAccountReceiveOffersCheckBox = new CreateAccountReceiveOffersCheckBox(this, applicationModel);
		UserNameAlreadyExistsWebElement = new UserNameAlreadyExistsWebElement(this, applicationModel);
		ChatLogoImage = new ChatLogoImage(this, applicationModel);
		FacebookImage = new FacebookImage(this, applicationModel);
		TwitterImage = new TwitterImage(this, applicationModel);
		LinkedInImage = new LinkedInImage(this, applicationModel);
		AdvantageIncCopyrightVersionWebElement = new AdvantageIncCopyrightVersionWebElement(this, applicationModel);
		MyAccountWebElement = new MyAccountWebElement(this, applicationModel);
		MyOrdersWebElement = new MyOrdersWebElement(this, applicationModel);
		MyAccountHeaderLabelWebElement = new MyAccountHeaderLabelWebElement(this, applicationModel);
		MyOrdersHeaderLabelWebElement = new MyOrdersHeaderLabelWebElement(this, applicationModel);
		SearchPreviewTOPRESULTSFORWebElement = new SearchPreviewTOPRESULTSFORWebElement(this, applicationModel);
		SearchEditField = new SearchEditField(this, applicationModel);
		ThankYouForBuyingWithAdvantageWebElement = new ThankYouForBuyingWithAdvantageWebElement(this, applicationModel);
		ThankYouForContactingAdvantageSupportWebElement = new ThankYouForContactingAdvantageSupportWebElement(this, applicationModel);
		TabletHPElite1011G1 = new TabletHPElite1011G1(this, applicationModel);
		HPChromebookEnergyStarImage = new HPChromebookEnergyStarImage(this, applicationModel);
		MiceHPUsbOptical = new MiceHPUsbOptical(this, applicationModel);
		HPBeatsStudioHeadphonesImage = new HPBeatsStudioHeadphonesImage(this, applicationModel);
		InvalidUserMessageWebElement = new InvalidUserMessageWebElement(this, applicationModel);
		CreateAccountREGISTERNotValidWebElement = new CreateAccountREGISTERNotValidWebElement(this, applicationModel);
		LAPTOPSWebElement = new LAPTOPSWebElement(this, applicationModel);
		SPEAKERSWebElement = new SPEAKERSWebElement(this, applicationModel);
		FirstItemInSearchFilterResultTableImage = new FirstItemInSearchFilterResultTableImage(this, applicationModel);
		SearchResultTitleWebElement = new SearchResultTitleWebElement(this, applicationModel);
		QuantityContainerLanelWebElement = new QuantityContainerLanelWebElement(this, applicationModel);
		CartTable = new CartTable(this, applicationModel);
		FirstRemoveItemFromCartLinkWebElement = new FirstRemoveItemFromCartLinkWebElement(this, applicationModel);
		SHIPPINGCostWebElement = new SHIPPINGCostWebElement(this, applicationModel);
		CREATENEWACCOUNTLink = new CREATENEWACCOUNTLink(this, applicationModel);
		REGISTERButton = new REGISTERButton(this, applicationModel);
		SENDContactUsButton = new SENDContactUsButton(this, applicationModel);
		PAYNOWButton = new PAYNOWButton(this, applicationModel);
		SIGNINButton = new SIGNINButton(this, applicationModel);
		DISPLAYLink = new DISPLAYLink(this, applicationModel);
		LaptopName = new LaptopName(this, applicationModel);
		OrderSearchWebElement = new OrderSearchWebElement(this, applicationModel);
		SearchOrderEditField = new SearchOrderEditField(this, applicationModel);
		RemoveFromOrderValidate = new RemoveFromOrderValidate(this, applicationModel);
		YesNoButtonsRemoveOrderSearch = new YesNoButtonsRemoveOrderSearch(this, applicationModel);
		ColorSelectorFirstWebElement = new ColorSelectorFirstWebElement(this, applicationModel);
		SoldOutHeadphonesWebElement = new SoldOutHeadphonesWebElement(this, applicationModel);
		QuantityOfProductWebEdit = new QuantityOfProductWebEdit(this, applicationModel);
		EmailContactUsWebElement = new EmailContactUsWebElement(this, applicationModel);
		ContactUsSubject = new ContactUsSubject(this, applicationModel);
		RememberMeCheckBox = new RememberMeCheckBox(this, applicationModel);
		CloseSignInPopUpBtnWebElement = new CloseSignInPopUpBtnWebElement(this, applicationModel);
		LinkCartIcon = new LinkCartIcon(this, applicationModel);
		CartIcon = new CartIcon(this, applicationModel);
		SafePayUsernameEditField = new SafePayUsernameEditField(this, applicationModel);
		SaveChangesInProfileForFutureUse = new SaveChangesInProfileForFutureUse(this, applicationModel);
		HPENVY17tTouchLaptop = new HPENVY17tTouchLaptop(this, applicationModel);
		LogitechG502ProteusCore7 = new LogitechG502ProteusCore7(this, applicationModel);
		HPH2310InEarHeadset = new HPH2310InEarHeadset(this, applicationModel);
		LaptopFilterSearchCheckbox = new LaptopFilterSearchCheckbox(this, applicationModel);
		SpeakersFilterSearchCheckbox = new SpeakersFilterSearchCheckbox(this, applicationModel);
		UsernameLoginEditField = new UsernameLoginEditField(this, applicationModel);
		PasswordLoginEditField = new PasswordLoginEditField(this, applicationModel);
		CreateAccountAgreeToTermsCheckBox = new CreateAccountAgreeToTermsCheckBox(this, applicationModel);
		SpeakerBoseSoundlinkWS = new SpeakerBoseSoundlinkWS(this, applicationModel);
		laptopFororderService = new laptopFororderService(this, applicationModel);
		MobileBtnWeb = new MobileBtnWeb(this, applicationModel);
		MasterCreditImage = new MasterCreditImage(this, applicationModel);
		CardNumberEditField = new CardNumberEditField(this, applicationModel);
		CvvNumberEditField = new CvvNumberEditField(this, applicationModel);
		CardholderNameEditField = new CardholderNameEditField(this, applicationModel);
		SaveMasterCreditCheckBox = new SaveMasterCreditCheckBox(this, applicationModel);
		SelectProductLineContactUsListBox = new SelectProductLineContactUsListBox(this, applicationModel);
		SelectProductListBox2 = new SelectProductListBox2(this, applicationModel);
		POPULARITEMSMainWebElement = new POPULARITEMSMainWebElement(this, applicationModel);
		YesCANCELButton = new YesCANCELButton(this, applicationModel);
		PAYNOWButtonManualPayment = new PAYNOWButtonManualPayment(this, applicationModel);
		MiceLogitechG502Img = new MiceLogitechG502Img(this, applicationModel);
		TabletHPPro608G1 = new TabletHPPro608G1(this, applicationModel);
		ShippingCost = new ShippingCost(this, applicationModel);
		CheckOutButton = new CheckOutButton(this, applicationModel);
		SelectedColorForEnv17 = new SelectedColorForEnv17(this, applicationModel);
		checkOutBtnButton1 = new checkOutBtnButton1(this, applicationModel);

			setDisplayName(" Advantage Shopping");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SearchIconWebElement SearchIconWebElement() { return SearchIconWebElement; }
		public SpeakersImg SpeakersImg() { return SpeakersImg; }
		public TabletsImgWebElement TabletsImgWebElement() { return TabletsImgWebElement; }
		public LaptopsImg LaptopsImg() { return LaptopsImg; }
		public MiceImg MiceImg() { return MiceImg; }
		public HeadphonesImg HeadphonesImg() { return HeadphonesImg; }
		public OrderNumber OrderNumber() { return OrderNumber; }
		public OURPRODUCTSMainWebElement OURPRODUCTSMainWebElement() { return OURPRODUCTSMainWebElement; }
		public SPECIALOFFERMainWebElement SPECIALOFFERMainWebElement() { return SPECIALOFFERMainWebElement; }
		public CONTACTUSMainWebElement CONTACTUSMainWebElement() { return CONTACTUSMainWebElement; }
		public accountDeletedSuccessfullyWebElement accountDeletedSuccessfullyWebElement() { return accountDeletedSuccessfullyWebElement; }
		public SignOutMainIconWebElement SignOutMainIconWebElement() { return SignOutMainIconWebElement; }
		public SEEOFFERButton SEEOFFERButton() { return SEEOFFERButton; }
		public EXPLORENOWButton EXPLORENOWButton() { return EXPLORENOWButton; }
		public GOUPImage GOUPImage() { return GOUPImage; }
		public ADDTOCARTButton ADDTOCARTButton() { return ADDTOCARTButton; }
		public CHECKOUTHoverButton CHECKOUTHoverButton() { return CHECKOUTHoverButton; }
		public NEXTButton NEXTButton() { return NEXTButton; }
		public SafepayImage SafepayImage() { return SafepayImage; }
		public SafePayPasswordEditField SafePayPasswordEditField() { return SafePayPasswordEditField; }
		public SignOutWebElement SignOutWebElement() { return SignOutWebElement; }
		public AdvantageDEMOHomeLink AdvantageDEMOHomeLink() { return AdvantageDEMOHomeLink; }
		public SpecialOfferImageItem1 SpecialOfferImageItem1() { return SpecialOfferImageItem1; }
		public PopularItemViewDetails PopularItemViewDetails() { return PopularItemViewDetails; }
		public CreateAccountUsernameWebEdit CreateAccountUsernameWebEdit() { return CreateAccountUsernameWebEdit; }
		public CreateAccountPasswordEditField CreateAccountPasswordEditField() { return CreateAccountPasswordEditField; }
		public CreateAccountEmailEditField CreateAccountEmailEditField() { return CreateAccountEmailEditField; }
		public CreateAccountPasswordConfirmEditField CreateAccountPasswordConfirmEditField() { return CreateAccountPasswordConfirmEditField; }
		public CreateAccountFirstNameEditField CreateAccountFirstNameEditField() { return CreateAccountFirstNameEditField; }
		public CreateAccountLastNameEditField CreateAccountLastNameEditField() { return CreateAccountLastNameEditField; }
		public CreateAccountPhoneNumberEditField CreateAccountPhoneNumberEditField() { return CreateAccountPhoneNumberEditField; }
		public CreateAccountCountrySelectListBox CreateAccountCountrySelectListBox() { return CreateAccountCountrySelectListBox; }
		public CreateAccountAddressEditField CreateAccountAddressEditField() { return CreateAccountAddressEditField; }
		public CreateAccountPostalCodeEditField CreateAccountPostalCodeEditField() { return CreateAccountPostalCodeEditField; }
		public CreateAccountCityEditField CreateAccountCityEditField() { return CreateAccountCityEditField; }
		public CreateAccountReceiveOffersCheckBox CreateAccountReceiveOffersCheckBox() { return CreateAccountReceiveOffersCheckBox; }
		public UserNameAlreadyExistsWebElement UserNameAlreadyExistsWebElement() { return UserNameAlreadyExistsWebElement; }
		public ChatLogoImage ChatLogoImage() { return ChatLogoImage; }
		public FacebookImage FacebookImage() { return FacebookImage; }
		public TwitterImage TwitterImage() { return TwitterImage; }
		public LinkedInImage LinkedInImage() { return LinkedInImage; }
		public AdvantageIncCopyrightVersionWebElement AdvantageIncCopyrightVersionWebElement() { return AdvantageIncCopyrightVersionWebElement; }
		public MyAccountWebElement MyAccountWebElement() { return MyAccountWebElement; }
		public MyOrdersWebElement MyOrdersWebElement() { return MyOrdersWebElement; }
		public MyAccountHeaderLabelWebElement MyAccountHeaderLabelWebElement() { return MyAccountHeaderLabelWebElement; }
		public MyOrdersHeaderLabelWebElement MyOrdersHeaderLabelWebElement() { return MyOrdersHeaderLabelWebElement; }
		public SearchPreviewTOPRESULTSFORWebElement SearchPreviewTOPRESULTSFORWebElement() { return SearchPreviewTOPRESULTSFORWebElement; }
		public SearchEditField SearchEditField() { return SearchEditField; }
		public ThankYouForBuyingWithAdvantageWebElement ThankYouForBuyingWithAdvantageWebElement() { return ThankYouForBuyingWithAdvantageWebElement; }
		public ThankYouForContactingAdvantageSupportWebElement ThankYouForContactingAdvantageSupportWebElement() { return ThankYouForContactingAdvantageSupportWebElement; }
		public TabletHPElite1011G1 TabletHPElite1011G1() { return TabletHPElite1011G1; }
		public HPChromebookEnergyStarImage HPChromebookEnergyStarImage() { return HPChromebookEnergyStarImage; }
		public MiceHPUsbOptical MiceHPUsbOptical() { return MiceHPUsbOptical; }
		public HPBeatsStudioHeadphonesImage HPBeatsStudioHeadphonesImage() { return HPBeatsStudioHeadphonesImage; }
		public InvalidUserMessageWebElement InvalidUserMessageWebElement() { return InvalidUserMessageWebElement; }
		public CreateAccountREGISTERNotValidWebElement CreateAccountREGISTERNotValidWebElement() { return CreateAccountREGISTERNotValidWebElement; }
		public LAPTOPSWebElement LAPTOPSWebElement() { return LAPTOPSWebElement; }
		public SPEAKERSWebElement SPEAKERSWebElement() { return SPEAKERSWebElement; }
		public FirstItemInSearchFilterResultTableImage FirstItemInSearchFilterResultTableImage() { return FirstItemInSearchFilterResultTableImage; }
		public SearchResultTitleWebElement SearchResultTitleWebElement() { return SearchResultTitleWebElement; }
		public QuantityContainerLanelWebElement QuantityContainerLanelWebElement() { return QuantityContainerLanelWebElement; }
		public CartTable CartTable() { return CartTable; }
		public FirstRemoveItemFromCartLinkWebElement FirstRemoveItemFromCartLinkWebElement() { return FirstRemoveItemFromCartLinkWebElement; }
		public SHIPPINGCostWebElement SHIPPINGCostWebElement() { return SHIPPINGCostWebElement; }
		public CREATENEWACCOUNTLink CREATENEWACCOUNTLink() { return CREATENEWACCOUNTLink; }
		public REGISTERButton REGISTERButton() { return REGISTERButton; }
		public SENDContactUsButton SENDContactUsButton() { return SENDContactUsButton; }
		public PAYNOWButton PAYNOWButton() { return PAYNOWButton; }
		public SIGNINButton SIGNINButton() { return SIGNINButton; }
		public DISPLAYLink DISPLAYLink() { return DISPLAYLink; }
		public LaptopName LaptopName() { return LaptopName; }
		public OrderSearchWebElement OrderSearchWebElement() { return OrderSearchWebElement; }
		public SearchOrderEditField SearchOrderEditField() { return SearchOrderEditField; }
		public RemoveFromOrderValidate RemoveFromOrderValidate() { return RemoveFromOrderValidate; }
		public YesNoButtonsRemoveOrderSearch YesNoButtonsRemoveOrderSearch() { return YesNoButtonsRemoveOrderSearch; }
		public ColorSelectorFirstWebElement ColorSelectorFirstWebElement() { return ColorSelectorFirstWebElement; }
		public SoldOutHeadphonesWebElement SoldOutHeadphonesWebElement() { return SoldOutHeadphonesWebElement; }
		public QuantityOfProductWebEdit QuantityOfProductWebEdit() { return QuantityOfProductWebEdit; }
		public EmailContactUsWebElement EmailContactUsWebElement() { return EmailContactUsWebElement; }
		public ContactUsSubject ContactUsSubject() { return ContactUsSubject; }
		public RememberMeCheckBox RememberMeCheckBox() { return RememberMeCheckBox; }
		public CloseSignInPopUpBtnWebElement CloseSignInPopUpBtnWebElement() { return CloseSignInPopUpBtnWebElement; }
		public LinkCartIcon LinkCartIcon() { return LinkCartIcon; }
		public CartIcon CartIcon() { return CartIcon; }
		public SafePayUsernameEditField SafePayUsernameEditField() { return SafePayUsernameEditField; }
		public SaveChangesInProfileForFutureUse SaveChangesInProfileForFutureUse() { return SaveChangesInProfileForFutureUse; }
		public HPENVY17tTouchLaptop HPENVY17tTouchLaptop() { return HPENVY17tTouchLaptop; }
		public LogitechG502ProteusCore7 LogitechG502ProteusCore7() { return LogitechG502ProteusCore7; }
		public HPH2310InEarHeadset HPH2310InEarHeadset() { return HPH2310InEarHeadset; }
		public LaptopFilterSearchCheckbox LaptopFilterSearchCheckbox() { return LaptopFilterSearchCheckbox; }
		public SpeakersFilterSearchCheckbox SpeakersFilterSearchCheckbox() { return SpeakersFilterSearchCheckbox; }
		public UsernameLoginEditField UsernameLoginEditField() { return UsernameLoginEditField; }
		public PasswordLoginEditField PasswordLoginEditField() { return PasswordLoginEditField; }
		public CreateAccountAgreeToTermsCheckBox CreateAccountAgreeToTermsCheckBox() { return CreateAccountAgreeToTermsCheckBox; }
		public SpeakerBoseSoundlinkWS SpeakerBoseSoundlinkWS() { return SpeakerBoseSoundlinkWS; }
		public laptopFororderService laptopFororderService() { return laptopFororderService; }
		public MobileBtnWeb MobileBtnWeb() { return MobileBtnWeb; }
		public MasterCreditImage MasterCreditImage() { return MasterCreditImage; }
		public CardNumberEditField CardNumberEditField() { return CardNumberEditField; }
		public CvvNumberEditField CvvNumberEditField() { return CvvNumberEditField; }
		public CardholderNameEditField CardholderNameEditField() { return CardholderNameEditField; }
		public SaveMasterCreditCheckBox SaveMasterCreditCheckBox() { return SaveMasterCreditCheckBox; }
		public SelectProductLineContactUsListBox SelectProductLineContactUsListBox() { return SelectProductLineContactUsListBox; }
		public SelectProductListBox2 SelectProductListBox2() { return SelectProductListBox2; }
		public POPULARITEMSMainWebElement POPULARITEMSMainWebElement() { return POPULARITEMSMainWebElement; }
		public YesCANCELButton YesCANCELButton() { return YesCANCELButton; }
		public PAYNOWButtonManualPayment PAYNOWButtonManualPayment() { return PAYNOWButtonManualPayment; }
		public MiceLogitechG502Img MiceLogitechG502Img() { return MiceLogitechG502Img; }
		public TabletHPPro608G1 TabletHPPro608G1() { return TabletHPPro608G1; }
		public ShippingCost ShippingCost() { return ShippingCost; }
		public CheckOutButton CheckOutButton() { return CheckOutButton; }
		public SelectedColorForEnv17 SelectedColorForEnv17() { return SelectedColorForEnv17; }
		public checkOutBtnButton1 checkOutBtnButton1() { return checkOutBtnButton1; }
		
			public class SearchIconWebElement extends WebElementNodeBase
	{

		
								public SearchIconWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Search Icon");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("div").id("search").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SpeakersImg extends WebElementNodeBase
	{

		
								public SpeakersImg(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SpeakersImg");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").id("SpeakersImg").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TabletsImgWebElement extends WebElementNodeBase
	{

		
								public TabletsImgWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TabletsImg");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").id("TabletsImg").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LaptopsImg extends WebElementNodeBase
	{

		
								public LaptopsImg(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LAPTOPS Shop Now ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").id("laptopsImg").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MiceImg extends WebElementNodeBase
	{

		
								public MiceImg(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MICE Shop Now ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").id("miceImg").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HeadphonesImg extends WebElementNodeBase
	{

		
								public HeadphonesImg(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HeadphonesImg");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("twoRows categoryCell").tagName("DIV").innerText("HEADPHONES Shop Now ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OrderNumber extends WebElementNodeBase
	{

		
								public OrderNumber(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("orderNumberLabel");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().id("orderNumberLabel").tagName("LABEL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OURPRODUCTSMainWebElement extends WebElementNodeBase
	{

		
								public OURPRODUCTSMainWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OUR PRODUCTS");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").innerText("OUR PRODUCTS").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SPECIALOFFERMainWebElement extends WebElementNodeBase
	{

		
								public SPECIALOFFERMainWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SPECIAL OFFER");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").innerText("SPECIAL OFFER").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CONTACTUSMainWebElement extends WebElementNodeBase
	{

		
								public CONTACTUSMainWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CONTACT US");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").innerText("CONTACT US").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class accountDeletedSuccessfullyWebElement extends WebElementNodeBase
	{

		
								public accountDeletedSuccessfullyWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Account deleted successfully ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("successfulDeleteMessage closeDelete").innerText("Account deleted successfully ").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SignOutMainIconWebElement extends WebElementNodeBase
	{

		
								public SignOutMainIconWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SingInOutIcon");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").innerText(new RegExpProperty("(.*)My account My Orders Sign out ")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SEEOFFERButton extends ButtonNodeBase
	{

		
								public SEEOFFERButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SEE OFFER");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").tagName("BUTTON").name("SEE OFFER").id("see_offer_btn").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EXPLORENOWButton extends ButtonNodeBase
	{

		
								public EXPLORENOWButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EXPLORE NOW");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").role("").accessibilityName("").tagName("BUTTON").name("EXPLORE NOW").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class GOUPImage extends ImageNodeBase
	{

		
								public GOUPImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("GO UP");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("GO UP").type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ADDTOCARTButton extends ButtonNodeBase
	{

		
								public ADDTOCARTButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("                            ADD TO CART                        ");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").tagName("BUTTON").name("                            ADD TO CART                        ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CHECKOUTHoverButton extends ButtonNodeBase
	{

		
								public CHECKOUTHoverButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CHECKOUTHover");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").role("button").tagName("BUTTON").id("checkOutPopUp").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NEXTButton extends ButtonNodeBase
	{

		
								public NEXTButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NEXT");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").tagName("BUTTON").id("next_btn").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SafepayImage extends ImageNodeBase
	{

		
								public SafepayImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Safepay");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("Safepay").type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SafePayPasswordEditField extends EditFieldNodeBase
	{

		
								public SafePayPasswordEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SafePayPassword");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("password").placeholder("").accessibilityName("").tagName("INPUT").name("safepay_password").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SignOutWebElement extends WebElementNodeBase
	{

		
								public SignOutWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Sign out");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("option roboto-medium ng-scope").tagName("LABEL").innerText("Sign out").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AdvantageDEMOHomeLink extends LinkNodeBase
	{

		
								public AdvantageDEMOHomeLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Advantage DEMO");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().tagName("A").innerText("dvantage DEMO ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SpecialOfferImageItem1 extends ImageNodeBase
	{

		
								public SpecialOfferImageItem1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Special-offerImageItem1");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("Special-offer").type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PopularItemViewDetails extends WebElementNodeBase
	{

		
								public PopularItemViewDetails(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PopularItemViewDetails");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("LABEL").id("details_16").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountUsernameWebEdit extends EditFieldNodeBase
	{

		
								public CreateAccountUsernameWebEdit(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Username");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").tagName("INPUT").name("usernameRegisterPage").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountPasswordEditField extends EditFieldNodeBase
	{

		
								public CreateAccountPasswordEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Password");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("password").placeholder("").accessibilityName("").tagName("INPUT").name("passwordRegisterPage").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountEmailEditField extends EditFieldNodeBase
	{

		
								public CreateAccountEmailEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Email");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("").accessibilityName("").tagName("INPUT").name("emailRegisterPage").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountPasswordConfirmEditField extends EditFieldNodeBase
	{

		
								public CreateAccountPasswordConfirmEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Password Confirm");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("password").placeholder("").accessibilityName("").tagName("INPUT").name("confirm_passwordRegisterPage").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountFirstNameEditField extends EditFieldNodeBase
	{

		
								public CreateAccountFirstNameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account First Name");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").tagName("INPUT").name("first_nameRegisterPage").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountLastNameEditField extends EditFieldNodeBase
	{

		
								public CreateAccountLastNameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Last Name");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").tagName("INPUT").name("last_nameRegisterPage").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountPhoneNumberEditField extends EditFieldNodeBase
	{

		
								public CreateAccountPhoneNumberEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Phone Number");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").tagName("INPUT").name("phone_numberRegisterPage").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountCountrySelectListBox extends ListBoxNodeBase
	{

		
								public CreateAccountCountrySelectListBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Country Select");
		}

		@Override
		protected com.hp.lft.sdk.web.ListBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ListBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ListBoxDescription.Builder().tagName("SELECT").name("userCountryRegisterPage").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountAddressEditField extends EditFieldNodeBase
	{

		
								public CreateAccountAddressEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Address");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").tagName("INPUT").name("addressRegisterPage").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountPostalCodeEditField extends EditFieldNodeBase
	{

		
								public CreateAccountPostalCodeEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Postal Code");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").tagName("INPUT").name("postal_codeRegisterPage").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountCityEditField extends EditFieldNodeBase
	{

		
								public CreateAccountCityEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account City");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").tagName("INPUT").name("cityRegisterPage").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountReceiveOffersCheckBox extends CheckBoxNodeBase
	{

		
								public CreateAccountReceiveOffersCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Receive Offers");
		}

		@Override
		protected com.hp.lft.sdk.web.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.CheckBoxDescription.Builder().type("checkbox").tagName("INPUT").name("allowOffersPromotion").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UserNameAlreadyExistsWebElement extends WebElementNodeBase
	{

		
								public UserNameAlreadyExistsWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("User name already exists ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("LABEL").innerText("User name already exists ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ChatLogoImage extends ImageNodeBase
	{

		
								public ChatLogoImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("chat logo");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().tagName("IMG").id("chatLogo").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FacebookImage extends ImageNodeBase
	{

		
								public FacebookImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Facebook Icon");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("icon").type(com.hp.lft.sdk.web.ImageType.LINK).tagName("IMG").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TwitterImage extends ImageNodeBase
	{

		
								public TwitterImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Twitter Icon");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("icon").type(com.hp.lft.sdk.web.ImageType.LINK).tagName("IMG").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LinkedInImage extends ImageNodeBase
	{

		
								public LinkedInImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LinkedIn Icon");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("icon").type(com.hp.lft.sdk.web.ImageType.LINK).tagName("IMG").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AdvantageIncCopyrightVersionWebElement extends WebElementNodeBase
	{

		
								public AdvantageIncCopyrightVersionWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Advantage Copyright");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("LABEL").innerText(new RegExpProperty("© Advantage Inc.+Release (.+)")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MyAccountWebElement extends WebElementNodeBase
	{

		
								public MyAccountWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("My account");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("option roboto-medium ng-scope").tagName("LABEL").innerText("My account").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MyOrdersWebElement extends WebElementNodeBase
	{

		
								public MyOrdersWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("My Orders");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").className("option ng-scope").tagName("LABEL").innerText("My Orders").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MyAccountHeaderLabelWebElement extends WebElementNodeBase
	{

		
								public MyAccountHeaderLabelWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MY ACCOUNT Header Label");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("H3").innerText("MY ACCOUNT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MyOrdersHeaderLabelWebElement extends WebElementNodeBase
	{

		
								public MyOrdersHeaderLabelWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MY ORDERS Header Label");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("H3").innerText("MY ORDERS").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SearchPreviewTOPRESULTSFORWebElement extends WebElementNodeBase
	{

		
								public SearchPreviewTOPRESULTSFORWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TOP RESULTS FOR preview search");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").innerText(new RegExpProperty("TOP RESULTS FOR:.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SearchEditField extends EditFieldNodeBase
	{

		
								public SearchEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Search Edit Box");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("Search AdvantageOnlineShopping.com").tagName("INPUT").name("WebEdit").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ThankYouForBuyingWithAdvantageWebElement extends WebElementNodeBase
	{

		
								public ThankYouForBuyingWithAdvantageWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Thank you for buying with Advantage ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("H2").innerText("Thank you for buying with Advantage ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ThankYouForContactingAdvantageSupportWebElement extends WebElementNodeBase
	{

		
								public ThankYouForContactingAdvantageSupportWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Thank you for contacting Advantage support.");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("P").innerText("Thank you for contacting Advantage support.").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TabletHPElite1011G1 extends ImageNodeBase
	{

		
								public TabletHPElite1011G1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TabletHPElite1011G1");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").id("17").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HPChromebookEnergyStarImage extends ImageNodeBase
	{

		
								public HPChromebookEnergyStarImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HP Chromebook Energy Star");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("").type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MiceHPUsbOptical extends ImageNodeBase
	{

		
								public MiceHPUsbOptical(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MiceHPUsbOptical");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").id("29").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HPBeatsStudioHeadphonesImage extends ImageNodeBase
	{

		
								public HPBeatsStudioHeadphonesImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BEATS STUDIO 2 HEADPHONES");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("").type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class InvalidUserMessageWebElement extends WebElementNodeBase
	{

		
								public InvalidUserMessageWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Invalid User Message");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("LABEL").id("signInResultMessage").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountREGISTERNotValidWebElement extends WebElementNodeBase
	{

		
								public CreateAccountREGISTERNotValidWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("REGISTER Not Valid");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("BUTTON").name("REGISTER").id("register_btnundefined").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LAPTOPSWebElement extends WebElementNodeBase
	{

		
								public LAPTOPSWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LAPTOPS");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").innerText("LAPTOPS").id("laptopsTxt").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SPEAKERSWebElement extends WebElementNodeBase
	{

		
								public SPEAKERSWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SPEAKERS");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").innerText("SPEAKERS").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FirstItemInSearchFilterResultTableImage extends ImageNodeBase
	{

		
								public FirstItemInSearchFilterResultTableImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("First Item In Search Filter Result Table");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("").type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SearchResultTitleWebElement extends WebElementNodeBase
	{

		
								public SearchResultTitleWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Search Result Title");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("H3").innerText(new RegExpProperty("Search result:\\s*(.*)")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class QuantityContainerLanelWebElement extends WebElementNodeBase
	{

		
								public QuantityContainerLanelWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Quantity Container Label");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").innerText("Quantity: ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CartTable extends TableNodeBase
	{

		
								public CartTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cart Table");
		}

		@Override
		protected com.hp.lft.sdk.web.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.TableDescription.Builder().role("").accessibilityName("").tagName("TABLE").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FirstRemoveItemFromCartLinkWebElement extends WebElementNodeBase
	{

		
								public FirstRemoveItemFromCartLinkWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("First Remove Item From Cart Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("remove red ng-scope").tagName("A").innerText("REMOVE").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SHIPPINGCostWebElement extends WebElementNodeBase
	{

		
								public SHIPPINGCostWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SHIPPING Cost");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("shippingText roboto-regular ng-binding").tagName("LABEL").innerText(new RegExpProperty("SHIPPING \\$([0-9\\.]+)\\s*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CREATENEWACCOUNTLink extends LinkNodeBase
	{

		
								public CREATENEWACCOUNTLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CREATE NEW ACCOUNT");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().tagName("A").innerText("CREATE NEW ACCOUNT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class REGISTERButton extends ButtonNodeBase
	{

		
								public REGISTERButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("REGISTER");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("button").tagName("BUTTON").name("REGISTER").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SENDContactUsButton extends ButtonNodeBase
	{

		
								public SENDContactUsButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SEND Contact Us Button");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("button").tagName("BUTTON").name("SEND").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PAYNOWButton extends ButtonNodeBase
	{

		
								public PAYNOWButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PAY NOW");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("button").role("button").tagName("BUTTON").name("PAY NOW").id("pay_now_btn_SAFEPAY").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SIGNINButton extends ButtonNodeBase
	{

		
								public SIGNINButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("sign_in_btn");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("button").tagName("BUTTON").name("SIGN IN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DISPLAYLink extends LinkNodeBase
	{

		
								public DISPLAYLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DISPLAY ");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().tagName("H4").innerText("DISPLAY ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LaptopName extends WebElementNodeBase
	{

		
								public LaptopName(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HP STREAM - 11-D020NR LAPTOP ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("roboto-regular screen768 ng-binding").tagName("H1").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OrderSearchWebElement extends WebElementNodeBase
	{

		
								public OrderSearchWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("orderSearch");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").className("").tagName("DIV").innerText("").index(9).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SearchOrderEditField extends EditFieldNodeBase
	{

		
								public SearchOrderEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Search by order number or product name");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("Search by order number or product name").tagName("INPUT").name("WebEdit").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RemoveFromOrderValidate extends WebElementNodeBase
	{

		
								public RemoveFromOrderValidate(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("remove from orders validate");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("modal-content").tagName("DIV").innerText("Are you sure you want to cancel your order? YES, CANCEL NO, KEEP MY ORDER ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class YesNoButtonsRemoveOrderSearch extends WebElementNodeBase
	{

		
								public YesNoButtonsRemoveOrderSearch(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("YES, CANCEL NO, KEEP MY ORDER ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").innerText("YES, CANCEL NO, KEEP MY ORDER ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ColorSelectorFirstWebElement extends WebElementNodeBase
	{

		
								public ColorSelectorFirstWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("WebElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className(new RegExpProperty("productColor ng-scope colorSelected.*")).tagName("SPAN").innerText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SoldOutHeadphonesWebElement extends WebElementNodeBase
	{

		
								public SoldOutHeadphonesWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Sold Out Headphones");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("LI").innerText("SOLD OUT SHOP NOW Bose SoundLink Around-ear Wireless Headphones II $279.95 ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class QuantityOfProductWebEdit extends EditFieldNodeBase
	{

		
								public QuantityOfProductWebEdit(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("quantityofProductwebEdit");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").tagName("INPUT").name("quantity").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EmailContactUsWebElement extends EditFieldNodeBase
	{

		
								public EmailContactUsWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Email ContactUs");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("").accessibilityName("").tagName("INPUT").name("emailContactUs").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ContactUsSubject extends EditFieldNodeBase
	{

		
								public ContactUsSubject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("subject_textarea");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("textarea").tagName("TEXTAREA").name("subjectTextareaContactUs").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RememberMeCheckBox extends CheckBoxNodeBase
	{

		
								public RememberMeCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("remember_me");
		}

		@Override
		protected com.hp.lft.sdk.web.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.CheckBoxDescription.Builder().type("checkbox").tagName("INPUT").name("remember_me").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CloseSignInPopUpBtnWebElement extends WebElementNodeBase
	{

		
								public CloseSignInPopUpBtnWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("close sign in");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("closeBtn loginPopUpCloseBtn").tagName("DIV").innerText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LinkCartIcon extends WebElementNodeBase
	{

		
								public LinkCartIcon(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LinkCartIcon");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("LI").xpath("//HEADER[1]/NAV[1]/UL[1]/LI[2]").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CartIcon extends LinkNodeBase
	{

		
								public CartIcon(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("cart icon");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().role("link").tagName("A").id("shoppingCartLink").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SafePayUsernameEditField extends EditFieldNodeBase
	{

		
								public SafePayUsernameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SafePayUsernameEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("").accessibilityName("").tagName("INPUT").name("safepay_username").index(8).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SaveChangesInProfileForFutureUse extends CheckBoxNodeBase
	{

		
								public SaveChangesInProfileForFutureUse(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SaveChangesInProfileForFutureUse");
		}

		@Override
		protected com.hp.lft.sdk.web.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.CheckBoxDescription.Builder().type("checkbox").tagName("INPUT").name("save_safepay").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HPENVY17tTouchLaptop extends WebElementNodeBase
	{

		
								public HPENVY17tTouchLaptop(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HP ENVY - 17t Touch Laptop");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("LI").innerText("SOLD OUT SHOP NOW HP ENVY - 17t Touch Laptop $849.99 ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LogitechG502ProteusCore7 extends WebElementNodeBase
	{

		
								public LogitechG502ProteusCore7(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Logitech G502 Proteus Core");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("LI").innerText("SOLD OUT SHOP NOW Logitech G502 Proteus Core $79.99 ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HPH2310InEarHeadset extends WebElementNodeBase
	{

		
								public HPH2310InEarHeadset(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName(" HP H2310 In-ear Headset ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("LI").innerText("SOLD OUT SHOP NOW HP H2310 In-ear Headset $13.99 ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LaptopFilterSearchCheckbox extends CheckBoxNodeBase
	{

		
								public LaptopFilterSearchCheckbox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LaptopFilterSearchCheckbox");
		}

		@Override
		protected com.hp.lft.sdk.web.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.CheckBoxDescription.Builder().type("checkbox").role("").accessibilityName("").tagName("INPUT").name("category").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SpeakersFilterSearchCheckbox extends CheckBoxNodeBase
	{

		
								public SpeakersFilterSearchCheckbox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SpeakersFilterSearchCheckbox");
		}

		@Override
		protected com.hp.lft.sdk.web.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.CheckBoxDescription.Builder().type("checkbox").role("").accessibilityName("").tagName("INPUT").name("category").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UsernameLoginEditField extends EditFieldNodeBase
	{

		
								public UsernameLoginEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("username login");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").tagName("INPUT").name("username").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PasswordLoginEditField extends EditFieldNodeBase
	{

		
								public PasswordLoginEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("password");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("password").tagName("INPUT").name("password").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountAgreeToTermsCheckBox extends CheckBoxNodeBase
	{

		
								public CreateAccountAgreeToTermsCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("i_agree check box");
		}

		@Override
		protected com.hp.lft.sdk.web.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.CheckBoxDescription.Builder().type("checkbox").tagName("INPUT").name("i_agree").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SpeakerBoseSoundlinkWS extends WebElementNodeBase
	{

		
								public SpeakerBoseSoundlinkWS(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SpeakerBoseSoundlinkWS");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("IMG").id("25").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class laptopFororderService extends WebElementNodeBase
	{

		
								public laptopFororderService(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("laptopFororderService ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("LI").innerText("SOLD OUT SHOP NOW HP Pavilion x360 - 11t Touch Laptop $319.99 ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MobileBtnWeb extends WebElementNodeBase
	{

		
								public MobileBtnWeb(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("mobile-btn");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("mobile-btn-handler").tagName("DIV").innerText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MasterCreditImage extends ImageNodeBase
	{

		
								public MasterCreditImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Master credit");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("Master credit").type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CardNumberEditField extends EditFieldNodeBase
	{

		
								public CardNumberEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("card_number");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").tagName("INPUT").name("card_number").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CvvNumberEditField extends EditFieldNodeBase
	{

		
								public CvvNumberEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("cvv_number");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").tagName("INPUT").name("cvv_number").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CardholderNameEditField extends EditFieldNodeBase
	{

		
								public CardholderNameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("cardholder_name");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").tagName("INPUT").name("cardholder_name").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SaveMasterCreditCheckBox extends CheckBoxNodeBase
	{

		
								public SaveMasterCreditCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("save_master_credit");
		}

		@Override
		protected com.hp.lft.sdk.web.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.CheckBoxDescription.Builder().type("checkbox").tagName("INPUT").name("save_master_credit").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectProductLineContactUsListBox extends ListBoxNodeBase
	{

		
								public SelectProductLineContactUsListBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SelectProductLineContactUs");
		}

		@Override
		protected com.hp.lft.sdk.web.ListBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ListBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ListBoxDescription.Builder().tagName("SELECT").name("categoryListboxContactUs").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectProductListBox2 extends ListBoxNodeBase
	{

		
								public SelectProductListBox2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SelectProduct");
		}

		@Override
		protected com.hp.lft.sdk.web.ListBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ListBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ListBoxDescription.Builder().tagName("SELECT").name("productListbox").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class POPULARITEMSMainWebElement extends LinkNodeBase
	{

		
								public POPULARITEMSMainWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("POPULAR ITEMS");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().tagName("A").innerText("POPULAR ITEMS").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class YesCANCELButton extends ButtonNodeBase
	{

		
								public YesCANCELButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("YesCANCEL");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("button").tagName("BUTTON").name("YES, CANCEL ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PAYNOWButtonManualPayment extends ButtonNodeBase
	{

		
								public PAYNOWButtonManualPayment(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PAYNOWButtonManualPayment");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("button").role("button").tagName("BUTTON").name("PAY NOW").id("pay_now_btn_MANUALPAYMENT").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MiceLogitechG502Img extends ImageNodeBase
	{

		
								public MiceLogitechG502Img(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MiceLogitechG502Img");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").id("31").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TabletHPPro608G1 extends ImageNodeBase
	{

		
								public TabletHPPro608G1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TabletHPPro608G1");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").id("18").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ShippingCost extends WebElementNodeBase
	{

		
								public ShippingCost(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("shippingCost");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").id("shippingCost").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CheckOutButton extends ButtonNodeBase
	{

		
								public CheckOutButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CheckOutButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").tagName("BUTTON").id("checkOutButton").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectedColorForEnv17 extends WebElementNodeBase
	{

		
								public SelectedColorForEnv17(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("WebElementSelectedColor");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className(new RegExpProperty("productColor ng-scope.*")).tagName("SPAN").innerText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class checkOutBtnButton1 extends ButtonNodeBase
	{

		
								public checkOutBtnButton1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("check_out_btn1");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().attribute("Role", "button").attribute("Class", "roboto-medium ng-binding").attribute("Data-ng-click", "checkout()").attribute("Name", "check_out_btn").buttonType("submit").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class AdvantageOnlineShoppingDemoSupportChatPage extends PageNodeBase
	{

		
			private ServerConnectWebElement ServerConnectWebElement;
	private RespondChatWebElement RespondChatWebElement;
	private ServerConnectmsg ServerConnectmsg;
	private TypeAMessageEditField TypeAMessageEditField;
	private ChatSendImage ChatSendImage;
						public AdvantageOnlineShoppingDemoSupportChatPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ServerConnectWebElement = new ServerConnectWebElement(this, applicationModel);
		RespondChatWebElement = new RespondChatWebElement(this, applicationModel);
		ServerConnectmsg = new ServerConnectmsg(this, applicationModel);
		TypeAMessageEditField = new TypeAMessageEditField(this, applicationModel);
		ChatSendImage = new ChatSendImage(this, applicationModel);

			setDisplayName("Advantage Online Shopping Demo Support Chat");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ServerConnectWebElement ServerConnectWebElement() { return ServerConnectWebElement; }
		public RespondChatWebElement RespondChatWebElement() { return RespondChatWebElement; }
		public ServerConnectmsg ServerConnectmsg() { return ServerConnectmsg; }
		public TypeAMessageEditField TypeAMessageEditField() { return TypeAMessageEditField; }
		public ChatSendImage ChatSendImage() { return ChatSendImage; }
		
			public class ServerConnectWebElement extends WebElementNodeBase
	{

		
								public ServerConnectWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Server connect. ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").innerText("Server connect. ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RespondChatWebElement extends WebElementNodeBase
	{

		
								public RespondChatWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("respond chat");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").xpath("//DIV[4]/DIV[2]").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ServerConnectmsg extends WebElementNodeBase
	{

		
								public ServerConnectmsg(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Server connect msg");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("P").innerText("Server connect. ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TypeAMessageEditField extends EditFieldNodeBase
	{

		
								public TypeAMessageEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Type a message...");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").tagName("INPUT").name("WebEdit").xpath("//INPUT[@id=textMessage]").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ChatSendImage extends ImageNodeBase
	{

		
								public ChatSendImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("chat_send");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class DownloadPage extends PageNodeBase
	{

		
			private DownloadAndroidAppWebElement DownloadAndroidAppWebElement;
	private DownloadIosAppWebElement DownloadIosAppWebElement;
						public DownloadPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					DownloadAndroidAppWebElement = new DownloadAndroidAppWebElement(this, applicationModel);
		DownloadIosAppWebElement = new DownloadIosAppWebElement(this, applicationModel);

			setDisplayName("Page");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public DownloadAndroidAppWebElement DownloadAndroidAppWebElement() { return DownloadAndroidAppWebElement; }
		public DownloadIosAppWebElement DownloadIosAppWebElement() { return DownloadIosAppWebElement; }
		
			public class DownloadAndroidAppWebElement extends WebElementNodeBase
	{

		
								public DownloadAndroidAppWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("downloadAndroidApp");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").innerText("Android").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DownloadIosAppWebElement extends WebElementNodeBase
	{

		
								public DownloadIosAppWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("downloadIosApp");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").innerText("iOS").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class myAccountMyOrdersSignOutLink extends LinkNodeBase
	{

		
								public myAccountMyOrdersSignOutLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("My account My Orders Sign out ");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("My account My Orders Sign out ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class sIGNINWITHFACEBOOKORUsernamePasswordEmailREMEMBERMESIGNINForgotYourPasswordCREATENEWACCOUNTWebElement extends WebElementNodeBase
	{

		
								public sIGNINWITHFACEBOOKORUsernamePasswordEmailREMEMBERMESIGNINForgotYourPasswordCREATENEWACCOUNTWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SIGN IN WITH FACEBOOK OR Username Password Email REMEMBER ME SIGN IN Forgot your password? CREATE NEW ACCOUNT ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("").innerText("SIGN IN WITH FACEBOOK OR Username Password Email REMEMBER ME SIGN IN Forgot your password? CREATE NEW ACCOUNT ").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ttMyAccountMyOrdersSignOutLink extends LinkNodeBase
	{

		
								public ttMyAccountMyOrdersSignOutLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("My account My Orders Sign out");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("My account My Orders Sign out ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class deleteAccountButton extends ButtonNodeBase
	{

		
								public deleteAccountButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("                                                                                                                 Delete Account                                            ");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("                                                                                                                 Delete Account                                            ").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class yesWebElement extends WebElementNodeBase
	{

		
								public yesWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("yes");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("yes").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}


			
	public abstract class PageNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Page, com.hp.lft.sdk.web.PageDescription> implements com.hp.lft.sdk.web.Page
	{		
		public PageNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getURL() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getURL();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public java.lang.String runJavaScript(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().runJavaScript(arg0);
		}

		@Override 
		public <TResult> TResult runJavaScript(java.lang.String arg0, java.lang.Class<TResult> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().runJavaScript(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void sync() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sync();
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
	
	public abstract class WebElementNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.WebElement, com.hp.lft.sdk.web.WebElementDescription> implements com.hp.lft.sdk.web.WebElement
	{		
		public WebElementNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class ButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Button, com.hp.lft.sdk.web.ButtonDescription> implements com.hp.lft.sdk.web.Button
	{		
		public ButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getButtonType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getButtonType();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class ImageNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Image, com.hp.lft.sdk.web.ImageDescription> implements com.hp.lft.sdk.web.Image
	{		
		public ImageNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAlt() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAlt();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getHref() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHref();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getSrc() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSrc();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getTarget() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTarget();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public com.hp.lft.sdk.web.ImageType getType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getType();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class EditFieldNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.EditField, com.hp.lft.sdk.web.EditFieldDescription> implements com.hp.lft.sdk.web.EditField
	{		
		public EditFieldNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDefaultValue() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getDefaultValue();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMaxCharsInLine() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMaxCharsInLine();
		}

		@Override 
		public int getMaxLength() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMaxLength();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getPattern() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPattern();
		}

		@Override 
		public java.lang.String getPlaceholder() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPlaceholder();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public int getRowsCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRowsCount();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getType();
		}

		@Override 
		public java.lang.String getValue() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getValue();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isReadOnly() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isReadOnly();
		}

		@Override 
		public boolean isRequired() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRequired();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setSecure(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setSecure(arg0);
		}

		@Override 
		public void setValue(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setValue(arg0);
		}

		@Override 
		public void submit() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().submit();
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class LinkNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Link, com.hp.lft.sdk.web.LinkDescription> implements com.hp.lft.sdk.web.Link
	{		
		public LinkNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColor();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getFontName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFontName();
		}

		@Override 
		public java.lang.String getHref() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHref();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getTarget() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTarget();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class ListBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.ListBox, com.hp.lft.sdk.web.ListBoxDescription> implements com.hp.lft.sdk.web.ListBox
	{		
		public ListBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(com.hp.lft.sdk.web.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public void extendSelect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(com.hp.lft.sdk.web.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDefaultValue() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getDefaultValue();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public com.hp.lft.sdk.web.ListItem getItem(java.lang.String arg0)  
		{
			return getConcrete().getItem(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.web.ListItem> getItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItems();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.web.ListItem> getSelectedItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedItems();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getType();
		}

		@Override 
		public java.lang.String getValue() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getValue();
		}

		@Override 
		public int getVisibleItemsCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleItemsCount();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isMultiple() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMultiple();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void select(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(com.hp.lft.sdk.web.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class CheckBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.CheckBox, com.hp.lft.sdk.web.CheckBoxDescription> implements com.hp.lft.sdk.web.CheckBox
	{		
		public CheckBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getType();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void set(boolean arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().set(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class TableNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Table, com.hp.lft.sdk.web.TableDescription> implements com.hp.lft.sdk.web.Table
	{		
		public TableNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public com.hp.lft.sdk.web.TableRow findRowWithCellText(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().findRowWithCellText(arg0);
		}

		@Override 
		public com.hp.lft.sdk.web.TableRow findRowWithCellText(java.lang.String arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().findRowWithCellText(arg0, arg1);
		}

		@Override 
		public com.hp.lft.sdk.web.TableRow findRowWithCellTextInColumn(java.lang.String arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().findRowWithCellTextInColumn(arg0, arg1);
		}

		@Override 
		public com.hp.lft.sdk.web.TableRow findRowWithCellTextInColumn(java.lang.String arg0, int arg1, int arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().findRowWithCellTextInColumn(arg0, arg1, arg2);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public int getBorder() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBorder();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.util.List<java.lang.String> getColumnHeaders() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColumnHeaders();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.web.TableRow> getRows() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRows();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
}
