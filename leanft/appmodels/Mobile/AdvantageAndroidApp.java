
/** ----------------------------------------------------------------------------------------------------
* 
*	This code was automatically generated by the UFT Developer Application Model code generator.
*
*	Changes to this file may cause incorrect behavior and will be lost 
*	when the code is regenerated.
*
*   ----------------------------------------------------------------------------------------------------
*/
package Mobile;

import com.hp.lft.sdk.*;

// This class is automatically generated by the UFT Developer Application Model code generator
public class AdvantageAndroidApp extends AppModelBase {		private AdvantageShoppingApplication AdvantageShoppingApplication;
	private SettingsApplication SettingsApplication;
	
	public AdvantageAndroidApp(TestObject contextTestObject) throws GeneralLeanFtException
	{
		setName("AdvantageAndroidApp");
				AdvantageShoppingApplication = new AdvantageShoppingApplication(contextTestObject, this);
		SettingsApplication = new SettingsApplication(contextTestObject, this);
		rebuildDescriptions();
	}	

			public AdvantageShoppingApplication AdvantageShoppingApplication() { return AdvantageShoppingApplication; }
		public SettingsApplication SettingsApplication() { return SettingsApplication; }

		public class AdvantageShoppingApplication extends ApplicationNodeBase
	{

		
			private LAPTOPSLabel LAPTOPSLabel;
	private SPEAKERSLabel SPEAKERSLabel;
	private TABLETSLabel TABLETSLabel;
	private MICELabel MICELabel;
	private HEADPHONESLabel HEADPHONESLabel;
	private MainMenu MainMenu;
	private UserNameEdit UserNameEdit;
	private PassEdit PassEdit;
	private LOGINButton LOGINButton;
	private DonTHaveAnAccountLabel DonTHaveAnAccountLabel;
	private SIGNOUTLabel SIGNOUTLabel;
	private YESButton YESButton;
	private Login Login;
	private CartAccess CartAccess;
	private LaptopItem LaptopItem;
	private ADDTOCARTButton ADDTOCARTButton;
	private ProductQuantity ProductQuantity;
	private ProductColor ProductColor;
	private ProductDetail ProductDetail;
	private LaptopItem2 LaptopItem2;
	private colorObject colorObject;
	private APPLYChangeLabel APPLYChangeLabel;
	private CHECKOUT CHECKOUT;
	private ScrollViewCartProducts ScrollViewCartProducts;
	private PAYNOWButton PAYNOWButton;
	private SaveSafePayCredentialsCheckBox SaveSafePayCredentialsCheckBox;
	private UserNameSignUp UserNameSignUp;
	private REGISTERButton REGISTERButton;
	private ImageViewSafePay ImageViewSafePay;
	private ImageViewMasterCredit ImageViewMasterCredit;
	private SafePayUserfieldEditField SafePayUserfieldEditField;
	private SafePayPassFieldEditField SafePayPassFieldEditField;
	private PaymentDetails PaymentDetails;
	private HOMELabel HOMELabel;
	private QuantityLabel QuantityLabel;
	private UPDATEPRODUCTButton UPDATEPRODUCTButton;
	private VerifyReceiptWindowUiObject VerifyReceiptWindowUiObject;
	private CartQuantityLabel CartQuantityLabel;
	private FirstCartItem FirstCartItem;
	private CartRemove CartRemove;
	private AccountDetails AccountDetails;
	private tabletItem tabletItem;
	private ProductQuantityEditField ProductQuantityEditField;
	private LoginObj LoginObj;
	private ChangePasswordLabel ChangePasswordLabel;
	private OldPassEditField OldPassEditField;
	private NewPassEditField NewPassEditField;
	private ConfirmNewPassEditField ConfirmNewPassEditField;
	private UPDATEAccountButton UPDATEAccountButton;
	private ImageViewFilter ImageViewFilter;
	private BYMANUFACTURERLabel BYMANUFACTURERLabel;
	private HPLabel HPLabel;
	private SOLDout SOLDout;
	private LaptopFilter2UiObject LaptopFilter2UiObject;
	private EditShippingUiObject EditShippingUiObject;
	private CVVMasterCreditEditField CVVMasterCreditEditField;
	private MonthMasterCreditLabel MonthMasterCreditLabel;
	private YEARMasterCreditLabel YEARMasterCreditLabel;
	private ConfirmPassSignUp ConfirmPassSignUp;
	private EmailSignUp EmailSignUp;
	private PasswordSignUp PasswordSignUp;
	private SignUp SignUp;
	private HOME HOME;
	private SETTINGSLabel SETTINGSLabel;
	private EditTextServer EditTextServer;
	private ConnectButton ConnectButton;
	private ContentPanelConnection ContentPanelConnection;
	private SignUPtUiObject SignUPtUiObject;
	private ButtonPanelSettingUiObject ButtonPanelSettingUiObject;
	private SignUpObject SignUpObject;
	private ChangePasswordObject ChangePasswordObject;
	private LaptopitemWin10 LaptopitemWin10;
	private CardHolderMasterCreditEditField CardHolderMasterCreditEditField;
	private AdvantageObjectUiObject AdvantageObjectUiObject;
	private ZIPmyAccauntEditField ZIPmyAccauntEditField;
	private CardNumderMasterCreditEditField CardNumderMasterCreditEditField;
	private SaveMasterCreditCredenCheckBox SaveMasterCreditCredenCheckBox;
	private ShippingCheckBox ShippingCheckBox;
	private ZIPshippingDetaildEditField ZIPshippingDetaildEditField;
	private StateSignUpEditField StateSignUpEditField;
	private AddressSignUpEditField AddressSignUpEditField;
	private CitySignUpEditField CitySignUpEditField;
	private ZIPSignUpEditField ZIPSignUpEditField;
	private BYOPERATINGSYSTEMLabel BYOPERATINGSYSTEMLabel;
	private Windows10Label Windows10Label;
	private CARTLabel CARTLabel;
	private CloseDialog CloseDialog;
	private LinearLayoutLogin LinearLayoutLogin;
	private ServerNotReachableLabel ServerNotReachableLabel;
	private DonTHaveAnAccount DonTHaveAnAccount;
	private YouAreNotConnectedToLabel YouAreNotConnectedToLabel;
	private NoteOfflineModLabel NoteOfflineModLabel;
	private WarningMessageUiObject WarningMessageUiObject;
	private LoggedUserName LoggedUserName;
	private SignedInUserName SignedInUserName;
	private ShippingDetailsFirstNameEditField ShippingDetailsFirstNameEditField;
	private ShippingDetailsAddressTextFieldLabel ShippingDetailsAddressTextFieldLabel;
	private ShippingDetailsAddressTextField ShippingDetailsAddressTextField;
	private IncorrectUserNameOrPLabel1 IncorrectUserNameOrPLabel1;
	private mobileEditEditField mobileEditEditField;
	private youAreNotConnectedToInternetLabel youAreNotConnectedToInternetLabel;
	private oKButton oKButton;
	private enableFingerprintAuthenticationToggle enableFingerprintAuthenticationToggle;
	private ApplyButton ApplyButton;
	private oKButtonServer oKButtonServer;
	private connectedSuccessfullyLabel connectedSuccessfullyLabel;
	private oKButton1 oKButton1;
	private imageViewCategoryUiObject imageViewCategoryUiObject;
						public AdvantageShoppingApplication(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					LAPTOPSLabel = new LAPTOPSLabel(this, applicationModel);
		SPEAKERSLabel = new SPEAKERSLabel(this, applicationModel);
		TABLETSLabel = new TABLETSLabel(this, applicationModel);
		MICELabel = new MICELabel(this, applicationModel);
		HEADPHONESLabel = new HEADPHONESLabel(this, applicationModel);
		MainMenu = new MainMenu(this, applicationModel);
		UserNameEdit = new UserNameEdit(this, applicationModel);
		PassEdit = new PassEdit(this, applicationModel);
		LOGINButton = new LOGINButton(this, applicationModel);
		DonTHaveAnAccountLabel = new DonTHaveAnAccountLabel(this, applicationModel);
		SIGNOUTLabel = new SIGNOUTLabel(this, applicationModel);
		YESButton = new YESButton(this, applicationModel);
		Login = new Login(this, applicationModel);
		CartAccess = new CartAccess(this, applicationModel);
		LaptopItem = new LaptopItem(this, applicationModel);
		ADDTOCARTButton = new ADDTOCARTButton(this, applicationModel);
		ProductQuantity = new ProductQuantity(this, applicationModel);
		ProductColor = new ProductColor(this, applicationModel);
		ProductDetail = new ProductDetail(this, applicationModel);
		LaptopItem2 = new LaptopItem2(this, applicationModel);
		colorObject = new colorObject(this, applicationModel);
		APPLYChangeLabel = new APPLYChangeLabel(this, applicationModel);
		CHECKOUT = new CHECKOUT(this, applicationModel);
		ScrollViewCartProducts = new ScrollViewCartProducts(this, applicationModel);
		PAYNOWButton = new PAYNOWButton(this, applicationModel);
		SaveSafePayCredentialsCheckBox = new SaveSafePayCredentialsCheckBox(this, applicationModel);
		UserNameSignUp = new UserNameSignUp(this, applicationModel);
		REGISTERButton = new REGISTERButton(this, applicationModel);
		ImageViewSafePay = new ImageViewSafePay(this, applicationModel);
		ImageViewMasterCredit = new ImageViewMasterCredit(this, applicationModel);
		SafePayUserfieldEditField = new SafePayUserfieldEditField(this, applicationModel);
		SafePayPassFieldEditField = new SafePayPassFieldEditField(this, applicationModel);
		PaymentDetails = new PaymentDetails(this, applicationModel);
		HOMELabel = new HOMELabel(this, applicationModel);
		QuantityLabel = new QuantityLabel(this, applicationModel);
		UPDATEPRODUCTButton = new UPDATEPRODUCTButton(this, applicationModel);
		VerifyReceiptWindowUiObject = new VerifyReceiptWindowUiObject(this, applicationModel);
		CartQuantityLabel = new CartQuantityLabel(this, applicationModel);
		FirstCartItem = new FirstCartItem(this, applicationModel);
		CartRemove = new CartRemove(this, applicationModel);
		AccountDetails = new AccountDetails(this, applicationModel);
		tabletItem = new tabletItem(this, applicationModel);
		ProductQuantityEditField = new ProductQuantityEditField(this, applicationModel);
		LoginObj = new LoginObj(this, applicationModel);
		ChangePasswordLabel = new ChangePasswordLabel(this, applicationModel);
		OldPassEditField = new OldPassEditField(this, applicationModel);
		NewPassEditField = new NewPassEditField(this, applicationModel);
		ConfirmNewPassEditField = new ConfirmNewPassEditField(this, applicationModel);
		UPDATEAccountButton = new UPDATEAccountButton(this, applicationModel);
		ImageViewFilter = new ImageViewFilter(this, applicationModel);
		BYMANUFACTURERLabel = new BYMANUFACTURERLabel(this, applicationModel);
		HPLabel = new HPLabel(this, applicationModel);
		SOLDout = new SOLDout(this, applicationModel);
		LaptopFilter2UiObject = new LaptopFilter2UiObject(this, applicationModel);
		EditShippingUiObject = new EditShippingUiObject(this, applicationModel);
		CVVMasterCreditEditField = new CVVMasterCreditEditField(this, applicationModel);
		MonthMasterCreditLabel = new MonthMasterCreditLabel(this, applicationModel);
		YEARMasterCreditLabel = new YEARMasterCreditLabel(this, applicationModel);
		ConfirmPassSignUp = new ConfirmPassSignUp(this, applicationModel);
		EmailSignUp = new EmailSignUp(this, applicationModel);
		PasswordSignUp = new PasswordSignUp(this, applicationModel);
		SignUp = new SignUp(this, applicationModel);
		HOME = new HOME(this, applicationModel);
		SETTINGSLabel = new SETTINGSLabel(this, applicationModel);
		EditTextServer = new EditTextServer(this, applicationModel);
		ConnectButton = new ConnectButton(this, applicationModel);
		ContentPanelConnection = new ContentPanelConnection(this, applicationModel);
		SignUPtUiObject = new SignUPtUiObject(this, applicationModel);
		ButtonPanelSettingUiObject = new ButtonPanelSettingUiObject(this, applicationModel);
		SignUpObject = new SignUpObject(this, applicationModel);
		ChangePasswordObject = new ChangePasswordObject(this, applicationModel);
		LaptopitemWin10 = new LaptopitemWin10(this, applicationModel);
		CardHolderMasterCreditEditField = new CardHolderMasterCreditEditField(this, applicationModel);
		AdvantageObjectUiObject = new AdvantageObjectUiObject(this, applicationModel);
		ZIPmyAccauntEditField = new ZIPmyAccauntEditField(this, applicationModel);
		CardNumderMasterCreditEditField = new CardNumderMasterCreditEditField(this, applicationModel);
		SaveMasterCreditCredenCheckBox = new SaveMasterCreditCredenCheckBox(this, applicationModel);
		ShippingCheckBox = new ShippingCheckBox(this, applicationModel);
		ZIPshippingDetaildEditField = new ZIPshippingDetaildEditField(this, applicationModel);
		StateSignUpEditField = new StateSignUpEditField(this, applicationModel);
		AddressSignUpEditField = new AddressSignUpEditField(this, applicationModel);
		CitySignUpEditField = new CitySignUpEditField(this, applicationModel);
		ZIPSignUpEditField = new ZIPSignUpEditField(this, applicationModel);
		BYOPERATINGSYSTEMLabel = new BYOPERATINGSYSTEMLabel(this, applicationModel);
		Windows10Label = new Windows10Label(this, applicationModel);
		CARTLabel = new CARTLabel(this, applicationModel);
		CloseDialog = new CloseDialog(this, applicationModel);
		LinearLayoutLogin = new LinearLayoutLogin(this, applicationModel);
		ServerNotReachableLabel = new ServerNotReachableLabel(this, applicationModel);
		DonTHaveAnAccount = new DonTHaveAnAccount(this, applicationModel);
		YouAreNotConnectedToLabel = new YouAreNotConnectedToLabel(this, applicationModel);
		NoteOfflineModLabel = new NoteOfflineModLabel(this, applicationModel);
		WarningMessageUiObject = new WarningMessageUiObject(this, applicationModel);
		LoggedUserName = new LoggedUserName(this, applicationModel);
		SignedInUserName = new SignedInUserName(this, applicationModel);
		ShippingDetailsFirstNameEditField = new ShippingDetailsFirstNameEditField(this, applicationModel);
		ShippingDetailsAddressTextFieldLabel = new ShippingDetailsAddressTextFieldLabel(this, applicationModel);
		ShippingDetailsAddressTextField = new ShippingDetailsAddressTextField(this, applicationModel);
		IncorrectUserNameOrPLabel1 = new IncorrectUserNameOrPLabel1(this, applicationModel);
		mobileEditEditField = new mobileEditEditField(this, applicationModel);
		youAreNotConnectedToInternetLabel = new youAreNotConnectedToInternetLabel(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);
		enableFingerprintAuthenticationToggle = new enableFingerprintAuthenticationToggle(this, applicationModel);
		ApplyButton = new ApplyButton(this, applicationModel);
		oKButtonServer = new oKButtonServer(this, applicationModel);
		connectedSuccessfullyLabel = new connectedSuccessfullyLabel(this, applicationModel);
		oKButton1 = new oKButton1(this, applicationModel);
		imageViewCategoryUiObject = new imageViewCategoryUiObject(this, applicationModel);

			setDisplayName("Advantage Shopping");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ApplicationDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ApplicationDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ApplicationDescription.Builder().identifier("com.Advantage.aShopping").packaged(true).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public LAPTOPSLabel LAPTOPSLabel() { return LAPTOPSLabel; }
		public SPEAKERSLabel SPEAKERSLabel() { return SPEAKERSLabel; }
		public TABLETSLabel TABLETSLabel() { return TABLETSLabel; }
		public MICELabel MICELabel() { return MICELabel; }
		public HEADPHONESLabel HEADPHONESLabel() { return HEADPHONESLabel; }
		public MainMenu MainMenu() { return MainMenu; }
		public UserNameEdit UserNameEdit() { return UserNameEdit; }
		public PassEdit PassEdit() { return PassEdit; }
		public LOGINButton LOGINButton() { return LOGINButton; }
		public DonTHaveAnAccountLabel DonTHaveAnAccountLabel() { return DonTHaveAnAccountLabel; }
		public SIGNOUTLabel SIGNOUTLabel() { return SIGNOUTLabel; }
		public YESButton YESButton() { return YESButton; }
		public Login Login() { return Login; }
		public CartAccess CartAccess() { return CartAccess; }
		public LaptopItem LaptopItem() { return LaptopItem; }
		public ADDTOCARTButton ADDTOCARTButton() { return ADDTOCARTButton; }
		public ProductQuantity ProductQuantity() { return ProductQuantity; }
		public ProductColor ProductColor() { return ProductColor; }
		public ProductDetail ProductDetail() { return ProductDetail; }
		public LaptopItem2 LaptopItem2() { return LaptopItem2; }
		public colorObject colorObject() { return colorObject; }
		public APPLYChangeLabel APPLYChangeLabel() { return APPLYChangeLabel; }
		public CHECKOUT CHECKOUT() { return CHECKOUT; }
		public ScrollViewCartProducts ScrollViewCartProducts() { return ScrollViewCartProducts; }
		public PAYNOWButton PAYNOWButton() { return PAYNOWButton; }
		public SaveSafePayCredentialsCheckBox SaveSafePayCredentialsCheckBox() { return SaveSafePayCredentialsCheckBox; }
		public UserNameSignUp UserNameSignUp() { return UserNameSignUp; }
		public REGISTERButton REGISTERButton() { return REGISTERButton; }
		public ImageViewSafePay ImageViewSafePay() { return ImageViewSafePay; }
		public ImageViewMasterCredit ImageViewMasterCredit() { return ImageViewMasterCredit; }
		public SafePayUserfieldEditField SafePayUserfieldEditField() { return SafePayUserfieldEditField; }
		public SafePayPassFieldEditField SafePayPassFieldEditField() { return SafePayPassFieldEditField; }
		public PaymentDetails PaymentDetails() { return PaymentDetails; }
		public HOMELabel HOMELabel() { return HOMELabel; }
		public QuantityLabel QuantityLabel() { return QuantityLabel; }
		public UPDATEPRODUCTButton UPDATEPRODUCTButton() { return UPDATEPRODUCTButton; }
		public VerifyReceiptWindowUiObject VerifyReceiptWindowUiObject() { return VerifyReceiptWindowUiObject; }
		public CartQuantityLabel CartQuantityLabel() { return CartQuantityLabel; }
		public FirstCartItem FirstCartItem() { return FirstCartItem; }
		public CartRemove CartRemove() { return CartRemove; }
		public AccountDetails AccountDetails() { return AccountDetails; }
		public tabletItem tabletItem() { return tabletItem; }
		public ProductQuantityEditField ProductQuantityEditField() { return ProductQuantityEditField; }
		public LoginObj LoginObj() { return LoginObj; }
		public ChangePasswordLabel ChangePasswordLabel() { return ChangePasswordLabel; }
		public OldPassEditField OldPassEditField() { return OldPassEditField; }
		public NewPassEditField NewPassEditField() { return NewPassEditField; }
		public ConfirmNewPassEditField ConfirmNewPassEditField() { return ConfirmNewPassEditField; }
		public UPDATEAccountButton UPDATEAccountButton() { return UPDATEAccountButton; }
		public ImageViewFilter ImageViewFilter() { return ImageViewFilter; }
		public BYMANUFACTURERLabel BYMANUFACTURERLabel() { return BYMANUFACTURERLabel; }
		public HPLabel HPLabel() { return HPLabel; }
		public SOLDout SOLDout() { return SOLDout; }
		public LaptopFilter2UiObject LaptopFilter2UiObject() { return LaptopFilter2UiObject; }
		public EditShippingUiObject EditShippingUiObject() { return EditShippingUiObject; }
		public CVVMasterCreditEditField CVVMasterCreditEditField() { return CVVMasterCreditEditField; }
		public MonthMasterCreditLabel MonthMasterCreditLabel() { return MonthMasterCreditLabel; }
		public YEARMasterCreditLabel YEARMasterCreditLabel() { return YEARMasterCreditLabel; }
		public ConfirmPassSignUp ConfirmPassSignUp() { return ConfirmPassSignUp; }
		public EmailSignUp EmailSignUp() { return EmailSignUp; }
		public PasswordSignUp PasswordSignUp() { return PasswordSignUp; }
		public SignUp SignUp() { return SignUp; }
		public HOME HOME() { return HOME; }
		public SETTINGSLabel SETTINGSLabel() { return SETTINGSLabel; }
		public EditTextServer EditTextServer() { return EditTextServer; }
		public ConnectButton ConnectButton() { return ConnectButton; }
		public ContentPanelConnection ContentPanelConnection() { return ContentPanelConnection; }
		public SignUPtUiObject SignUPtUiObject() { return SignUPtUiObject; }
		public ButtonPanelSettingUiObject ButtonPanelSettingUiObject() { return ButtonPanelSettingUiObject; }
		public SignUpObject SignUpObject() { return SignUpObject; }
		public ChangePasswordObject ChangePasswordObject() { return ChangePasswordObject; }
		public LaptopitemWin10 LaptopitemWin10() { return LaptopitemWin10; }
		public CardHolderMasterCreditEditField CardHolderMasterCreditEditField() { return CardHolderMasterCreditEditField; }
		public AdvantageObjectUiObject AdvantageObjectUiObject() { return AdvantageObjectUiObject; }
		public ZIPmyAccauntEditField ZIPmyAccauntEditField() { return ZIPmyAccauntEditField; }
		public CardNumderMasterCreditEditField CardNumderMasterCreditEditField() { return CardNumderMasterCreditEditField; }
		public SaveMasterCreditCredenCheckBox SaveMasterCreditCredenCheckBox() { return SaveMasterCreditCredenCheckBox; }
		public ShippingCheckBox ShippingCheckBox() { return ShippingCheckBox; }
		public ZIPshippingDetaildEditField ZIPshippingDetaildEditField() { return ZIPshippingDetaildEditField; }
		public StateSignUpEditField StateSignUpEditField() { return StateSignUpEditField; }
		public AddressSignUpEditField AddressSignUpEditField() { return AddressSignUpEditField; }
		public CitySignUpEditField CitySignUpEditField() { return CitySignUpEditField; }
		public ZIPSignUpEditField ZIPSignUpEditField() { return ZIPSignUpEditField; }
		public BYOPERATINGSYSTEMLabel BYOPERATINGSYSTEMLabel() { return BYOPERATINGSYSTEMLabel; }
		public Windows10Label Windows10Label() { return Windows10Label; }
		public CARTLabel CARTLabel() { return CARTLabel; }
		public CloseDialog CloseDialog() { return CloseDialog; }
		public LinearLayoutLogin LinearLayoutLogin() { return LinearLayoutLogin; }
		public ServerNotReachableLabel ServerNotReachableLabel() { return ServerNotReachableLabel; }
		public DonTHaveAnAccount DonTHaveAnAccount() { return DonTHaveAnAccount; }
		public YouAreNotConnectedToLabel YouAreNotConnectedToLabel() { return YouAreNotConnectedToLabel; }
		public NoteOfflineModLabel NoteOfflineModLabel() { return NoteOfflineModLabel; }
		public WarningMessageUiObject WarningMessageUiObject() { return WarningMessageUiObject; }
		public LoggedUserName LoggedUserName() { return LoggedUserName; }
		public SignedInUserName SignedInUserName() { return SignedInUserName; }
		public ShippingDetailsFirstNameEditField ShippingDetailsFirstNameEditField() { return ShippingDetailsFirstNameEditField; }
		public ShippingDetailsAddressTextFieldLabel ShippingDetailsAddressTextFieldLabel() { return ShippingDetailsAddressTextFieldLabel; }
		public ShippingDetailsAddressTextField ShippingDetailsAddressTextField() { return ShippingDetailsAddressTextField; }
		public IncorrectUserNameOrPLabel1 IncorrectUserNameOrPLabel1() { return IncorrectUserNameOrPLabel1; }
		public mobileEditEditField mobileEditEditField() { return mobileEditEditField; }
		public youAreNotConnectedToInternetLabel youAreNotConnectedToInternetLabel() { return youAreNotConnectedToInternetLabel; }
		public oKButton oKButton() { return oKButton; }
		public enableFingerprintAuthenticationToggle enableFingerprintAuthenticationToggle() { return enableFingerprintAuthenticationToggle; }
		public ApplyButton ApplyButton() { return ApplyButton; }
		public oKButtonServer oKButtonServer() { return oKButtonServer; }
		public connectedSuccessfullyLabel connectedSuccessfullyLabel() { return connectedSuccessfullyLabel; }
		public oKButton1 oKButton1() { return oKButton1; }
		public imageViewCategoryUiObject imageViewCategoryUiObject() { return imageViewCategoryUiObject; }
		
			public class LAPTOPSLabel extends LabelNodeBase
	{

		
								public LAPTOPSLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LAPTOPS");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("LAPTOPS").className("Label").resourceId("textViewMenuLaptops").mobileCenterIndex(12).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SPEAKERSLabel extends LabelNodeBase
	{

		
								public SPEAKERSLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SPEAKERS");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("SPEAKERS").className("Label").resourceId("textViewMenuSpeakers").mobileCenterIndex(13).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TABLETSLabel extends LabelNodeBase
	{

		
								public TABLETSLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TABLETS");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("TABLETS").className("Label").resourceId("textViewMenuTablets").mobileCenterIndex(14).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MICELabel extends LabelNodeBase
	{

		
								public MICELabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MICE");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("MICE").className("Label").resourceId("textViewMenuMice").mobileCenterIndex(15).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HEADPHONESLabel extends LabelNodeBase
	{

		
								public HEADPHONESLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HEADPHONES");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("HEADPHONES").className("Label").resourceId("textViewMenuHeadphones").mobileCenterIndex(16).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MainMenu extends UiObjectNodeBase
	{

		
								public MainMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Menu");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").resourceId("imageViewMenu").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UserNameEdit extends EditFieldNodeBase
	{

		
								public UserNameEdit(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UserName Edit");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PassEdit extends EditFieldNodeBase
	{

		
								public PassEdit(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Pass Edit");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LOGINButton extends ButtonNodeBase
	{

		
								public LOGINButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LOGIN button");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("LOGIN").className("Button").resourceId("buttonLogin").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DonTHaveAnAccountLabel extends LabelNodeBase
	{

		
								public DonTHaveAnAccountLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Don't have an account?");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("Don't have an account?").className("Label").resourceId("textViewDontHaveAnAccount").mobileCenterIndex(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SIGNOUTLabel extends LabelNodeBase
	{

		
								public SIGNOUTLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SIGN OUT");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("SIGN OUT").className("Label").resourceId("textViewMenuSignOut").mobileCenterIndex(10).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class YESButton extends ButtonNodeBase
	{

		
								public YESButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("YES");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("YES").className("Button").resourceId("button2").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Login extends LabelNodeBase
	{

		
								public Login(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LOGIN");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("LOGIN").className("Label").resourceId("textViewMenuUser").mobileCenterIndex(9).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CartAccess extends UiObjectNodeBase
	{

		
								public CartAccess(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cart access");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().accessibilityId("Cart access").className("ImageView").resourceId("imageViewCart").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LaptopItem extends UiObjectNodeBase
	{

		
								public LaptopItem(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("laptop item");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").container("Table[0][2][0]").resourceId("imageViewProduct").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ADDTOCARTButton extends ButtonNodeBase
	{

		
								public ADDTOCARTButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ADD TO CART");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("ADD TO CART").className("Button").resourceId("buttonProductAddToCart").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProductQuantity extends UiObjectNodeBase
	{

		
								public ProductQuantity(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("linearLayoutProductQuant");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").resourceId("linearLayoutProductQuantity").mobileCenterIndex(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProductColor extends UiObjectNodeBase
	{

		
								public ProductColor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("linearLayoutProductColor");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").resourceId("linearLayoutProductColors").mobileCenterIndex(25).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProductDetail extends UiObjectNodeBase
	{

		
								public ProductDetail(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("linearLayoutProductDetai");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").resourceId("linearLayoutProductDetails").mobileCenterIndex(26).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LaptopItem2 extends UiObjectNodeBase
	{

		
								public LaptopItem2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("laptop item2");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").container("Table[0][7][0]").resourceId("imageViewProduct").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class colorObject extends UiObjectNodeBase
	{

		
								public colorObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("color object");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").mobileCenterIndex(33).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class APPLYChangeLabel extends LabelNodeBase
	{

		
								public APPLYChangeLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("APPLY change");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("APPLY").className("Label").resourceId("textViewApply").mobileCenterIndex(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CHECKOUT extends ButtonNodeBase
	{

		
								public CHECKOUT(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CHECKOUT");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().className("Button").resourceId("buttonCheckOut").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ScrollViewCartProducts extends ViewNodeBase
	{

		
								public ScrollViewCartProducts(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("scrollViewCartProducts");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ViewDescription.Builder().className("Scroller").resourceId("scrollViewCartProducts").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PAYNOWButton extends ButtonNodeBase
	{

		
								public PAYNOWButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PAY NOW");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("PAY NOW").className("Button").resourceId("buttonPayNow").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SaveSafePayCredentialsCheckBox extends CheckBoxNodeBase
	{

		
								public SaveSafePayCredentialsCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Save SafePay credentials");
		}

		@Override
		protected com.hp.lft.sdk.mobile.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.CheckBoxDescription.Builder().className("CheckBox").resourceId("checkBoxPrefferedShipping").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UserNameSignUp extends EditFieldNodeBase
	{

		
								public UserNameSignUp(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("userNameSignUp");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class REGISTERButton extends ButtonNodeBase
	{

		
								public REGISTERButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("REGISTER");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("REGISTER").className("Button").resourceId("buttonRegister").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ImageViewSafePay extends UiObjectNodeBase
	{

		
								public ImageViewSafePay(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("imageView Safe Pay");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").resourceId("imageViewSafePage").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ImageViewMasterCredit extends UiObjectNodeBase
	{

		
								public ImageViewMasterCredit(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("imageViewMasterCredit");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").resourceId("imageViewMasterCredit").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SafePayUserfieldEditField extends EditFieldNodeBase
	{

		
								public SafePayUserfieldEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("safePay Userfield");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SafePayPassFieldEditField extends EditFieldNodeBase
	{

		
								public SafePayPassFieldEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("safePay pass field");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PaymentDetails extends UiObjectNodeBase
	{

		
								public PaymentDetails(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("payment details");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").mobileCenterIndex(9).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HOMELabel extends LabelNodeBase
	{

		
								public HOMELabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HOME");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("Advantage").className("Label").resourceId("textViewAdvantage").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class QuantityLabel extends LabelNodeBase
	{

		
								public QuantityLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Quantity");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("1").className("Label").resourceId("textViewProductQuantity").mobileCenterIndex(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UPDATEPRODUCTButton extends ButtonNodeBase
	{

		
								public UPDATEPRODUCTButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UPDATE PRODUCT");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("UPDATE PRODUCT").className("Button").resourceId("buttonProductAddToCart").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class VerifyReceiptWindowUiObject extends UiObjectNodeBase
	{

		
								public VerifyReceiptWindowUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Verify receipt window");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").mobileCenterIndex(13).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CartQuantityLabel extends LabelNodeBase
	{

		
								public CartQuantityLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CartQuantity");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().className("Label").resourceId("textViewCartLength").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FirstCartItem extends UiObjectNodeBase
	{

		
								public FirstCartItem(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("firstCartItem");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").resourceId("linearLayoutFront").mobileCenterIndex(38).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CartRemove extends UiObjectNodeBase
	{

		
								public CartRemove(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CartRemove");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").resourceId("relativeLayoutCartRemove").mobileCenterIndex(45).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AccountDetails extends UiObjectNodeBase
	{

		
								public AccountDetails(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AccountDetails");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").resourceId("imageViewAccountDetails").mobileCenterIndex(9).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class tabletItem extends UiObjectNodeBase
	{

		
								public tabletItem(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tablet Item");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").container("Table[0][0][0]").resourceId("imageViewProduct").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProductQuantityEditField extends EditFieldNodeBase
	{

		
								public ProductQuantityEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("textViewProductQuantity");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").resourceId("textViewProductQuantity").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LoginObj extends UiObjectNodeBase
	{

		
								public LoginObj(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Login O");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").mobileCenterIndex(36).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ChangePasswordLabel extends LabelNodeBase
	{

		
								public ChangePasswordLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Change password");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("Change password").className("Label").resourceId("textViewChange_password").mobileCenterIndex(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OldPassEditField extends EditFieldNodeBase
	{

		
								public OldPassEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("oldPass");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(8).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NewPassEditField extends EditFieldNodeBase
	{

		
								public NewPassEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NewPass");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(9).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConfirmNewPassEditField extends EditFieldNodeBase
	{

		
								public ConfirmNewPassEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConfirmNewPass");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(10).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UPDATEAccountButton extends ButtonNodeBase
	{

		
								public UPDATEAccountButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UPDATEAccount");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("UPDATE").className("Button").resourceId("buttonUpdate").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ImageViewFilter extends UiObjectNodeBase
	{

		
								public ImageViewFilter(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("imageViewFilter");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").resourceId("imageViewFilter").mobileCenterIndex(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BYMANUFACTURERLabel extends LabelNodeBase
	{

		
								public BYMANUFACTURERLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BY MANUFACTURER");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("BY MANUFACTURER").className("Label").container("Table[0][2][0]").resourceId("textViewFilterCategoryTitle").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HPLabel extends LabelNodeBase
	{

		
								public HPLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HP");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("HP").className("Label").container("Table[0][4][0]").resourceId("textViewFilterCategoryTitle").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SOLDout extends LabelNodeBase
	{

		
								public SOLDout(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SOLD");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("SOLD").className("Label").container("Table[0][1][0]").mobileCenterIndex(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LaptopFilter2UiObject extends UiObjectNodeBase
	{

		
								public LaptopFilter2UiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("laptopFilter2");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").container("Table[0][5][0]").resourceId("imageViewProduct").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditShippingUiObject extends UiObjectNodeBase
	{

		
								public EditShippingUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditShipping");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").mobileCenterIndex(8).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CVVMasterCreditEditField extends EditFieldNodeBase
	{

		
								public CVVMasterCreditEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CVVMasterCredit");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MonthMasterCreditLabel extends LabelNodeBase
	{

		
								public MonthMasterCreditLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("monthMasterCredit");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().className("Label").resourceId("textViewMonths").mobileCenterIndex(11).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class YEARMasterCreditLabel extends LabelNodeBase
	{

		
								public YEARMasterCreditLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("YEARMasterCredit");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().className("Label").resourceId("textViewYears").mobileCenterIndex(13).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConfirmPassSignUp extends EditFieldNodeBase
	{

		
								public ConfirmPassSignUp(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("confirmPassSignUp");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EmailSignUp extends EditFieldNodeBase
	{

		
								public EmailSignUp(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EmailSignUp");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PasswordSignUp extends EditFieldNodeBase
	{

		
								public PasswordSignUp(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PasswordSignUp");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(5).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SignUp extends UiObjectNodeBase
	{

		
								public SignUp(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SignUp");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").mobileCenterIndex(11).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HOME extends LabelNodeBase
	{

		
								public HOME(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HOME1");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("HOME").className("Label").resourceId("textViewMenuHome").mobileCenterIndex(7).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SETTINGSLabel extends LabelNodeBase
	{

		
								public SETTINGSLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SETTINGS");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("SETTINGS").className("Label").resourceId("textViewMenuSettings").mobileCenterIndex(8).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditTextServer extends EditFieldNodeBase
	{

		
								public EditTextServer(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("editTextServer");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").resourceId("editTextServer").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConnectButton extends ButtonNodeBase
	{

		
								public ConnectButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Connect");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("Connect").className("Button").resourceId("buttonConnect").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ContentPanelConnection extends UiObjectNodeBase
	{

		
								public ContentPanelConnection(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("contentPanel");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").resourceId("contentPanel").mobileCenterIndex(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SignUPtUiObject extends UiObjectNodeBase
	{

		
								public SignUPtUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SignUPtUiObject");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").mobileCenterIndex(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ButtonPanelSettingUiObject extends UiObjectNodeBase
	{

		
								public ButtonPanelSettingUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("buttonPanelSetting");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").resourceId("buttonPanel").mobileCenterIndex(8).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SignUpObject extends UiObjectNodeBase
	{

		
								public SignUpObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SignUpObject");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").mobileCenterIndex(12).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ChangePasswordObject extends UiObjectNodeBase
	{

		
								public ChangePasswordObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ChangePasswordObject");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").container("").mobileCenterIndex(26).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LaptopitemWin10 extends UiObjectNodeBase
	{

		
								public LaptopitemWin10(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("laptopitemWin10");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").container("Table[0][3][0]").resourceId("imageViewProduct").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CardHolderMasterCreditEditField extends EditFieldNodeBase
	{

		
								public CardHolderMasterCreditEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CardHolderMasterCredit");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AdvantageObjectUiObject extends UiObjectNodeBase
	{

		
								public AdvantageObjectUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AdvantageObject");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").resourceId("RelativeLayoutMenu").mobileCenterIndex(14).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ZIPmyAccauntEditField extends EditFieldNodeBase
	{

		
								public ZIPmyAccauntEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ZIPmyAccaunt");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(7).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CardNumderMasterCreditEditField extends EditFieldNodeBase
	{

		
								public CardNumderMasterCreditEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CardNumderMasterCreditEditField");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").container("").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SaveMasterCreditCredenCheckBox extends CheckBoxNodeBase
	{

		
								public SaveMasterCreditCredenCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Save MasterCredit creden");
		}

		@Override
		protected com.hp.lft.sdk.mobile.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.CheckBoxDescription.Builder().className("CheckBox").container("").checkable(true).resourceId("checkBoxPrefferedShipping").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ShippingCheckBox extends CheckBoxNodeBase
	{

		
								public ShippingCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Use this address as pref");
		}

		@Override
		protected com.hp.lft.sdk.mobile.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.CheckBoxDescription.Builder().className("CheckBox").container("").checkable(true).resourceId("checkBoxPrefferedShipping").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ZIPshippingDetaildEditField extends EditFieldNodeBase
	{

		
								public ZIPshippingDetaildEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ZIPshippingDetaild");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").container("").mobileCenterIndex(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class StateSignUpEditField extends EditFieldNodeBase
	{

		
								public StateSignUpEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("StateSignUp");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(11).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddressSignUpEditField extends EditFieldNodeBase
	{

		
								public AddressSignUpEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddressSignUp");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").container("").mobileCenterIndex(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CitySignUpEditField extends EditFieldNodeBase
	{

		
								public CitySignUpEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CitySignUp");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").container("").mobileCenterIndex(9).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ZIPSignUpEditField extends EditFieldNodeBase
	{

		
								public ZIPSignUpEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ZIPSignUp");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").container("").mobileCenterIndex(10).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BYOPERATINGSYSTEMLabel extends LabelNodeBase
	{

		
								public BYOPERATINGSYSTEMLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BY OPERATING SYSTEM");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("BY OPERATING SYSTEM").className("Label").resourceId("textViewFilterCategoryTitle").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Windows10Label extends LabelNodeBase
	{

		
								public Windows10Label(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Windows 10");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("Windows 10").className("Label").resourceId("textViewFilterCategoryTitle").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CARTLabel extends LabelNodeBase
	{

		
								public CARTLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CART");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("CART").className("Label").resourceId("textViewMenuCart").mobileCenterIndex(17).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CloseDialog extends UiObjectNodeBase
	{

		
								public CloseDialog(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("imageViewCloseDialog");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").resourceId("imageViewCloseDialog").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LinearLayoutLogin extends UiObjectNodeBase
	{

		
								public LinearLayoutLogin(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("linearLayoutLogin");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").resourceId("linearLayoutLogin").mobileCenterIndex(28).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ServerNotReachableLabel extends LabelNodeBase
	{

		
								public ServerNotReachableLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Server not reachable");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("Server not reachable").className("Label").resourceId("alertTitle").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DonTHaveAnAccount extends LabelNodeBase
	{

		
								public DonTHaveAnAccount(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Don't have an account?1");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("Don't have an account?").className("Label").resourceId("textViewDontHaveAnAccount").mobileCenterIndex(7).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class YouAreNotConnectedToLabel extends LabelNodeBase
	{

		
								public YouAreNotConnectedToLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("You are not connected to");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("You are not connected to the internet").className("Label").resourceId("alertTitle").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NoteOfflineModLabel extends LabelNodeBase
	{

		
								public NoteOfflineModLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Note offline mod");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("You are working in offline mode. Data is not retained for future use").className("Label").resourceId("message").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class WarningMessageUiObject extends UiObjectNodeBase
	{

		
								public WarningMessageUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("warningMessage");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").resourceId("warningMessage").mobileCenterIndex(10).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LoggedUserName extends LabelNodeBase
	{

		
								public LoggedUserName(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LoggedUserName");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().className("Label").resourceId("textViewMenuUser").mobileCenterIndex(9).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SignedInUserName extends LabelNodeBase
	{

		
								public SignedInUserName(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SignedInUserName");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().className("Label").resourceId("textViewMenuUser").mobileCenterIndex(8).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ShippingDetailsFirstNameEditField extends EditFieldNodeBase
	{

		
								public ShippingDetailsFirstNameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MobileEdit");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ShippingDetailsAddressTextFieldLabel extends LabelNodeBase
	{

		
								public ShippingDetailsAddressTextFieldLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ShippingDetailsAddressTextField");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("ADDRESS").className("Label").mobileCenterIndex(9).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ShippingDetailsAddressTextField extends EditFieldNodeBase
	{

		
								public ShippingDetailsAddressTextField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ShippingDetailsAddressTextField");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class IncorrectUserNameOrPLabel1 extends LabelNodeBase
	{

		
								public IncorrectUserNameOrPLabel1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Incorrect user name or p1");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("Incorrect user name or password.").className("Label").resourceId("textViewFailed").mobileCenterIndex(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class mobileEditEditField extends EditFieldNodeBase
	{

		
								public mobileEditEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MobileEdit1");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().accessibilityId("Keyboard").className("Input").mobileCenterIndex(11).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class youAreNotConnectedToInternetLabel extends LabelNodeBase
	{

		
								public youAreNotConnectedToInternetLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("You are not connected to internet");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().accessibilityId("You are not connected to internet").className("Label").mobileCenterIndex(0).text("You are not connected to internet").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class oKButton extends ButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().className("Button").mobileCenterIndex(0).resourceId("android:id/button1").text("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class enableFingerprintAuthenticationToggle extends ToggleNodeBase
	{

		
								public enableFingerprintAuthenticationToggle(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Enable fingerprint authentication");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ToggleDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ToggleDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ToggleDescription.Builder().className("Switch").mobileCenterIndex(0).resourceId("fingerprintSwitch").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ApplyButton extends ButtonNodeBase
	{

		
								public ApplyButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("APPLY");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("APPLY").className("Button").resourceId("buttonConnect").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class oKButtonServer extends ButtonNodeBase
	{

		
								public oKButtonServer(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK1");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().className("Button").mobileCenterIndex(0).resourceId("android:id/button1").text("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class connectedSuccessfullyLabel extends LabelNodeBase
	{

		
								public connectedSuccessfullyLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Connected successfully");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().className("Label").mobileCenterIndex(1).resourceId("message").text("Connected successfully").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class oKButton1 extends ButtonNodeBase
	{

		
								public oKButton1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK2");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().className("Button").mobileCenterIndex(2).resourceId("button1").text("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class imageViewCategoryUiObject extends UiObjectNodeBase
	{

		
								public imageViewCategoryUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("imageViewCategory");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").mobileCenterIndex(3).resourceId("imageViewCategory").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class SettingsApplication extends ApplicationNodeBase
	{

		
			private AirplaneMode AirplaneMode;
	private AirplaneToggleONSwitch AirplaneToggleONSwitch;
	private SettingsConnections SettingsConnections;
	private ConnectionsAirplaneModeToggle ConnectionsAirplaneModeToggle;
	private SettingsSearchButton SettingsSearchButton;
	private SettingsSearchTextEditField SettingsSearchTextEditField;
	private AirplaneModeSettingsButtonLabel AirplaneModeSettingsButtonLabel;
	private AirplaneToggleOffSwitchToggle AirplaneToggleOffSwitchToggle;
	private wiFiLabel wiFiLabel;
	private sFTInternetLabel sFTInternetLabel;
	private connectedLabel connectedLabel;
	private fORGETButton fORGETButton;
	private oNToggle oNToggle;
	private imageViewProductUiObject imageViewProductUiObject;
						public SettingsApplication(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					AirplaneMode = new AirplaneMode(this, applicationModel);
		AirplaneToggleONSwitch = new AirplaneToggleONSwitch(this, applicationModel);
		SettingsConnections = new SettingsConnections(this, applicationModel);
		ConnectionsAirplaneModeToggle = new ConnectionsAirplaneModeToggle(this, applicationModel);
		SettingsSearchButton = new SettingsSearchButton(this, applicationModel);
		SettingsSearchTextEditField = new SettingsSearchTextEditField(this, applicationModel);
		AirplaneModeSettingsButtonLabel = new AirplaneModeSettingsButtonLabel(this, applicationModel);
		AirplaneToggleOffSwitchToggle = new AirplaneToggleOffSwitchToggle(this, applicationModel);
		wiFiLabel = new wiFiLabel(this, applicationModel);
		sFTInternetLabel = new sFTInternetLabel(this, applicationModel);
		connectedLabel = new connectedLabel(this, applicationModel);
		fORGETButton = new fORGETButton(this, applicationModel);
		oNToggle = new oNToggle(this, applicationModel);
		imageViewProductUiObject = new imageViewProductUiObject(this, applicationModel);

			setDisplayName("Settings");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ApplicationDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ApplicationDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ApplicationDescription.Builder().identifier("MC.Settings").packaged(false).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public AirplaneMode AirplaneMode() { return AirplaneMode; }
		public AirplaneToggleONSwitch AirplaneToggleONSwitch() { return AirplaneToggleONSwitch; }
		public SettingsConnections SettingsConnections() { return SettingsConnections; }
		public ConnectionsAirplaneModeToggle ConnectionsAirplaneModeToggle() { return ConnectionsAirplaneModeToggle; }
		public SettingsSearchButton SettingsSearchButton() { return SettingsSearchButton; }
		public SettingsSearchTextEditField SettingsSearchTextEditField() { return SettingsSearchTextEditField; }
		public AirplaneModeSettingsButtonLabel AirplaneModeSettingsButtonLabel() { return AirplaneModeSettingsButtonLabel; }
		public AirplaneToggleOffSwitchToggle AirplaneToggleOffSwitchToggle() { return AirplaneToggleOffSwitchToggle; }
		public wiFiLabel wiFiLabel() { return wiFiLabel; }
		public sFTInternetLabel sFTInternetLabel() { return sFTInternetLabel; }
		public connectedLabel connectedLabel() { return connectedLabel; }
		public fORGETButton fORGETButton() { return fORGETButton; }
		public oNToggle oNToggle() { return oNToggle; }
		public imageViewProductUiObject imageViewProductUiObject() { return imageViewProductUiObject; }
		
			public class AirplaneMode extends UiObjectNodeBase
	{

		
								public AirplaneMode(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("com.android.settings:id/");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").resourceId("com.android.settings:id/icon").mobileCenterIndex(9).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AirplaneToggleONSwitch extends ToggleNodeBase
	{

		
								public AirplaneToggleONSwitch(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("airplaine");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ToggleDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ToggleDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ToggleDescription.Builder().className("Switch").resourceId("com.android.settings:id/switch_widget").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SettingsConnections extends LabelNodeBase
	{

		
								public SettingsConnections(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SettingsConnections");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("Connections").className("Label").resourceId("android:id/title").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConnectionsAirplaneModeToggle extends ToggleNodeBase
	{

		
								public ConnectionsAirplaneModeToggle(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConnectionsAirplaneModeToggle");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ToggleDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ToggleDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ToggleDescription.Builder().className("Switch").resourceId("android:id/switch_widget").mobileCenterIndex(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SettingsSearchButton extends ButtonNodeBase
	{

		
								public SettingsSearchButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SettingsSearchButton");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().accessibilityId("Search").className("Button").resourceId("com.android.settings:id/search").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SettingsSearchTextEditField extends EditFieldNodeBase
	{

		
								public SettingsSearchTextEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SettingsSearchTextEditField");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").resourceId("android:id/search_src_text").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AirplaneModeSettingsButtonLabel extends LabelNodeBase
	{

		
								public AirplaneModeSettingsButtonLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AirplaneModeSettingsButton");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("Airplane mode").accessibilityId("Airplane mode").className("Label").resourceId("com.android.settings:id/title").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AirplaneToggleOffSwitchToggle extends ToggleNodeBase
	{

		
								public AirplaneToggleOffSwitchToggle(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AirplaneToggleOffSwitch");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ToggleDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ToggleDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ToggleDescription.Builder().className("Switch").resourceId("com.android.settings:id/switch_widget").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class wiFiLabel extends LabelNodeBase
	{

		
								public wiFiLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wi-Fi");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().accessibilityId("Wi-Fi").className("Label").mobileCenterIndex(1).resourceId("com.android.settings:id/title").text("Wi-Fi").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class sFTInternetLabel extends LabelNodeBase
	{

		
								public sFTInternetLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SFT-Internet");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().className("Label").mobileCenterIndex(4).resourceId("android:id/title").text("SFT-Internet").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class connectedLabel extends LabelNodeBase
	{

		
								public connectedLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Connected");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().className("Label").mobileCenterIndex(5).resourceId("android:id/summary").text("Connected").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class fORGETButton extends ButtonNodeBase
	{

		
								public fORGETButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FORGET");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().className("Button").mobileCenterIndex(1).resourceId("android:id/button1").text("FORGET").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class oNToggle extends ToggleNodeBase
	{

		
								public oNToggle(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ON");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ToggleDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ToggleDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ToggleDescription.Builder().className("Switch").mobileCenterIndex(0).resourceId("android:id/switch_widget").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class imageViewProductUiObject extends UiObjectNodeBase
	{

		
								public imageViewProductUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("imageViewProduct");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").mobileCenterIndex(4).resourceId("com.Advantage.aShopping:id/imageViewProduct").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}


			
	public abstract class ApplicationNodeBase extends AppModelNodeBase<com.hp.lft.sdk.mobile.Application, com.hp.lft.sdk.mobile.ApplicationDescription> implements com.hp.lft.sdk.mobile.Application
	{		
		public ApplicationNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getIdentifier() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getIdentifier();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public int getUpload() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getUpload();
		}

		@Override 
		public java.lang.String getVersion() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVersion();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void install() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().install();
		}

		@Override 
		public boolean isPackaged() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isPackaged();
		}

		@Override 
		public void kill() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().kill();
		}

		@Override 
		public void launch() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().launch();
		}

		@Override 
		public void restart() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().restart();
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public com.hp.lft.sdk.mobile.SimulateAuthResult simulateAuthentication()  
		{
			return getConcrete().simulateAuthentication();
		}

		@Override 
		public void simulateBarcodeScan(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().simulateBarcodeScan(arg0);
		}

		@Override 
		public void startCameraSimulationMode(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().startCameraSimulationMode(arg0);
		}

		@Override 
		public void stopCameraSimulationMode() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().stopCameraSimulationMode();
		}

		@Override 
		public void uninstall() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().uninstall();
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
	
	public abstract class LabelNodeBase extends AppModelNodeBase<com.hp.lft.sdk.mobile.Label, com.hp.lft.sdk.mobile.LabelDescription> implements com.hp.lft.sdk.mobile.Label
	{		
		public LabelNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.lang.String getAccessibilityId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityId();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getContainer() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getContainer();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getHint() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHint();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMobileCenterIndex() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMobileCenterIndex();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.lang.String getResourceId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getResourceId();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isCheckable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isCheckable();
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isClickable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isClickable();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocusable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocusable();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.mobile.LongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.Location arg0, com.hp.lft.sdk.Location arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1, com.hp.lft.sdk.mobile.PanArgs arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1, arg2);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0, com.hp.lft.sdk.mobile.PinchArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0, com.hp.lft.sdk.mobile.SwipeArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0, arg1);
		}

		@Override 
		public void tap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap();
		}

		@Override 
		public void tap(com.hp.lft.sdk.mobile.TapArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
	
	public abstract class UiObjectNodeBase extends AppModelNodeBase<com.hp.lft.sdk.mobile.UiObject, com.hp.lft.sdk.mobile.UiObjectDescription> implements com.hp.lft.sdk.mobile.UiObject
	{		
		public UiObjectNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.lang.String getAccessibilityId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityId();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getContainer() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getContainer();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getHint() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHint();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMobileCenterIndex() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMobileCenterIndex();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.lang.String getResourceId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getResourceId();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isCheckable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isCheckable();
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isClickable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isClickable();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocusable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocusable();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.mobile.LongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.Location arg0, com.hp.lft.sdk.Location arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1, com.hp.lft.sdk.mobile.PanArgs arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1, arg2);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0, com.hp.lft.sdk.mobile.PinchArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setFocus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setFocus();
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0, com.hp.lft.sdk.mobile.SwipeArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0, arg1);
		}

		@Override 
		public void tap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap();
		}

		@Override 
		public void tap(com.hp.lft.sdk.mobile.TapArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
	
	public abstract class EditFieldNodeBase extends AppModelNodeBase<com.hp.lft.sdk.mobile.EditField, com.hp.lft.sdk.mobile.EditFieldDescription> implements com.hp.lft.sdk.mobile.EditField
	{		
		public EditFieldNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.lang.String getAccessibilityId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityId();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getContainer() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getContainer();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getHint() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHint();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMobileCenterIndex() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMobileCenterIndex();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.lang.String getResourceId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getResourceId();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isCheckable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isCheckable();
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isClickable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isClickable();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocusable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocusable();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isPassword() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isPassword();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.mobile.LongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.Location arg0, com.hp.lft.sdk.Location arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1, com.hp.lft.sdk.mobile.PanArgs arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1, arg2);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0, com.hp.lft.sdk.mobile.PinchArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setFocus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setFocus();
		}

		@Override 
		public void setSecure(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setSecure(arg0);
		}

		@Override 
		public void setText(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setText(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0, com.hp.lft.sdk.mobile.SwipeArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0, arg1);
		}

		@Override 
		public void tap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap();
		}

		@Override 
		public void tap(com.hp.lft.sdk.mobile.TapArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
	
	public abstract class ButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.mobile.Button, com.hp.lft.sdk.mobile.ButtonDescription> implements com.hp.lft.sdk.mobile.Button
	{		
		public ButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.lang.String getAccessibilityId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityId();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getContainer() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getContainer();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getHint() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHint();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMobileCenterIndex() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMobileCenterIndex();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.lang.String getResourceId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getResourceId();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isCheckable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isCheckable();
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isClickable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isClickable();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocusable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocusable();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.mobile.LongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.Location arg0, com.hp.lft.sdk.Location arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1, com.hp.lft.sdk.mobile.PanArgs arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1, arg2);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0, com.hp.lft.sdk.mobile.PinchArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0, com.hp.lft.sdk.mobile.SwipeArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0, arg1);
		}

		@Override 
		public void tap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap();
		}

		@Override 
		public void tap(com.hp.lft.sdk.mobile.TapArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
	
	public abstract class ViewNodeBase extends AppModelNodeBase<com.hp.lft.sdk.mobile.View, com.hp.lft.sdk.mobile.ViewDescription> implements com.hp.lft.sdk.mobile.View
	{		
		public ViewNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.lang.String getAccessibilityId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityId();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getContainer() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getContainer();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getHint() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHint();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMobileCenterIndex() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMobileCenterIndex();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.lang.String getResourceId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getResourceId();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isCheckable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isCheckable();
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isClickable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isClickable();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocusable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocusable();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isScrollable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isScrollable();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.mobile.LongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.Location arg0, com.hp.lft.sdk.Location arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1, com.hp.lft.sdk.mobile.PanArgs arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1, arg2);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0, com.hp.lft.sdk.mobile.PinchArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0, arg1);
		}

		@Override 
		public void scrollOnePage(com.hp.lft.sdk.mobile.ScrollPageDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().scrollOnePage(arg0);
		}

		@Override 
		public void scrollToOffset(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().scrollToOffset(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0, com.hp.lft.sdk.mobile.SwipeArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0, arg1);
		}

		@Override 
		public void tap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap();
		}

		@Override 
		public void tap(com.hp.lft.sdk.mobile.TapArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public void zoom(com.hp.lft.sdk.Location arg0, double arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().zoom(arg0, arg1);
		}
	}
	
	public abstract class CheckBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.mobile.CheckBox, com.hp.lft.sdk.mobile.CheckBoxDescription> implements com.hp.lft.sdk.mobile.CheckBox
	{		
		public CheckBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.lang.String getAccessibilityId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityId();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getContainer() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getContainer();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getHint() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHint();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMobileCenterIndex() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMobileCenterIndex();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.lang.String getResourceId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getResourceId();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isCheckable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isCheckable();
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isClickable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isClickable();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocusable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocusable();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.mobile.LongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.Location arg0, com.hp.lft.sdk.Location arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1, com.hp.lft.sdk.mobile.PanArgs arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1, arg2);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0, com.hp.lft.sdk.mobile.PinchArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0, arg1);
		}

		@Override 
		public void set(boolean arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().set(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0, com.hp.lft.sdk.mobile.SwipeArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0, arg1);
		}

		@Override 
		public void tap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap();
		}

		@Override 
		public void tap(com.hp.lft.sdk.mobile.TapArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
	
	public abstract class ToggleNodeBase extends AppModelNodeBase<com.hp.lft.sdk.mobile.Toggle, com.hp.lft.sdk.mobile.ToggleDescription> implements com.hp.lft.sdk.mobile.Toggle
	{		
		public ToggleNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.lang.String getAccessibilityId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityId();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getContainer() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getContainer();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getHint() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHint();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMobileCenterIndex() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMobileCenterIndex();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.lang.String getResourceId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getResourceId();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isCheckable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isCheckable();
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isClickable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isClickable();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocusable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocusable();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.mobile.LongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.Location arg0, com.hp.lft.sdk.Location arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1, com.hp.lft.sdk.mobile.PanArgs arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1, arg2);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0, com.hp.lft.sdk.mobile.PinchArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0, arg1);
		}

		@Override 
		public void set(boolean arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().set(arg0);
		}

		@Override 
		public void set(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().set(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0, com.hp.lft.sdk.mobile.SwipeArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0, arg1);
		}

		@Override 
		public void tap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap();
		}

		@Override 
		public void tap(com.hp.lft.sdk.mobile.TapArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
}
