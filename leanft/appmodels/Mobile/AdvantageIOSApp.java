
/** ----------------------------------------------------------------------------------------------------
* 
*	This code was automatically generated by the UFT Developer Application Model code generator.
*
*	Changes to this file may cause incorrect behavior and will be lost 
*	when the code is regenerated.
*
*   ----------------------------------------------------------------------------------------------------
*/
package Mobile;

import com.hp.lft.sdk.*;

// This class is automatically generated by the UFT Developer Application Model code generator
public class AdvantageIOSApp extends AppModelBase {		private IshoppingApplication IshoppingApplication;
	private advantageShoppingApplication advantageShoppingApplication;
	private homeApplication homeApplication;
	private settingsApplication settingsApplication;
	private websheetApplication websheetApplication;
	
	public AdvantageIOSApp(TestObject contextTestObject) throws GeneralLeanFtException
	{
		setName("AdvantageIOSApp");
				IshoppingApplication = new IshoppingApplication(contextTestObject, this);
		advantageShoppingApplication = new advantageShoppingApplication(contextTestObject, this);
		homeApplication = new homeApplication(contextTestObject, this);
		settingsApplication = new settingsApplication(contextTestObject, this);
		websheetApplication = new websheetApplication(contextTestObject, this);
		rebuildDescriptions();
	}	

			public IshoppingApplication IshoppingApplication() { return IshoppingApplication; }
		public advantageShoppingApplication advantageShoppingApplication() { return advantageShoppingApplication; }
		public homeApplication homeApplication() { return homeApplication; }
		public settingsApplication settingsApplication() { return settingsApplication; }
		public websheetApplication websheetApplication() { return websheetApplication; }

		public class IshoppingApplication extends ApplicationNodeBase
	{

		
			private MenuButton MenuButton;
	private LAPTOPSLabel LAPTOPSLabel;
	private MainMenuHeadphones MainMenuHeadphones;
	private PasswordSignUpEditField PasswordSignUpEditField;
	private ConfirmPasswordSignUpEditField ConfirmPasswordSignUpEditField;
	private PhoneNumberTextFieldLabeEditField PhoneNumberTextFieldLabeEditField;
	private StreetSignUpEditField StreetSignUpEditField;
	private CitySignUpEditField CitySignUpEditField;
	private CountryPickerDone CountryPickerDone;
	private ZipSignUpEditField ZipSignUpEditField;
	private KeyboardNext KeyboardNext;
	private KeyboardDone KeyboardDone;
	private UserNameAlreadyExistsLabel1 UserNameAlreadyExistsLabel1;
	private CreateAccountOkButton CreateAccountOkButton;
	private NoProductsInCartLabel NoProductsInCartLabel;
	private UseMyLocationLabel UseMyLocationLabel;
	private DEL_ConfirnPasswordSignUpEditField DEL_ConfirnPasswordSignUpEditField;
	private UserSettingsButton UserSettingsButton;
	private MainMenuHome MainMenuHome;
	private SPEAKERSLabel SPEAKERSLabel;
	private CARTLabel CARTLabel;
	private SETTINGSLabel SETTINGSLabel;
	private LoginObj LoginObj;
	private UserNameLoginditField UserNameLoginditField;
	private LOGINButton LOGINButton;
	private RegisterButton RegisterButton;
	private UseMylocationUiObject UseMylocationUiObject;
	private SignUpButton SignUpButton;
	private InvalidUserNameOrPasLabel InvalidUserNameOrPasLabel;
	private MenuObjUiObject MenuObjUiObject;
	private LoginLabel LoginLabel;
	private YesSignOutButton YesSignOutButton;
	private SpeakerImgUiObject SpeakerImgUiObject;
	private ColorButton ColorButton;
	private ADDTOCARTButton ADDTOCARTButton;
	private CarticonButton CarticonButton;
	private CHECKOUTButton CHECKOUTButton;
	private PaymentEditUiObject PaymentEditUiObject;
	private ApplyQuantity ApplyQuantity;
	private APPLYButton APPLYButton;
	private SAFEPAYUSERNAMEEditField SAFEPAYUSERNAMEEditField;
	private SAFEPAYPASSWORDEditField SAFEPAYPASSWORDEditField;
	private SaveSafePAyCredentialsLabel SaveSafePAyCredentialsLabel;
	private PAYNOWButton PAYNOWButton;
	private OkButton OkButton;
	private OrderObj OrderObj;
	private CARDNUMBEREditField CARDNUMBEREditField;
	private CountryLabel CountryLabel;
	private CountryDropDown CountryDropDown;
	private CVVNUMBEREditField CVVNUMBEREditField;
	private CARDHOLDERNAMEEditField CARDHOLDERNAMEEditField;
	private SaveMasterCreditCredenLabel SaveMasterCreditCredenLabel;
	private PlusButton PlusButton;
	private LeptopItem LeptopItem;
	private YearDropDown YearDropDown;
	private MonthDropDown MonthDropDown;
	private MmLabel MmLabel;
	private YyyyLabel YyyyLabel;
	private SoldOutUiObject SoldOutUiObject;
	private QuantityButton QuantityButton;
	private UserNameAlreadyExistsLabel UserNameAlreadyExistsLabel;
	private OKExistingUserButton OKExistingUserButton;
	private CHANGEPASSWORDButton CHANGEPASSWORDButton;
	private OLDPASSWORDEditField OLDPASSWORDEditField;
	private NEWPASSWORDEditField NEWPASSWORDEditField;
	private CONFIRMNEWPASSWORDEditField CONFIRMNEWPASSWORDEditField;
	private UPDATEUserSettingButton UPDATEUserSettingButton;
	private PasswordObjUiObject PasswordObjUiObject;
	private Done Done;
	private UserNameLabelEditField UserNameLabelEditField;
	private FirstCartElement FirstCartElement;
	private RemoveButton RemoveButton;
	private ColorObject ColorObject;
	private TabletObjUiObject TabletObjUiObject;
	private UPDATECARTButton UPDATECARTButton;
	private PasswordLoginEditField PasswordLoginEditField;
	private PasswordLogin PasswordLogin;
	private LoggedUserName LoggedUserName;
	private BackButton BackButton;
	private AddProductMessage AddProductMessage;
	private AddProductMessageOkButton AddProductMessageOkButton;
	private ProductsPageFilterButton ProductsPageFilterButton;
	private FilterByPriceTabLabel FilterByPriceTabLabel;
	private MobileObjectFilterPriceSliderUiObject MobileObjectFilterPriceSliderUiObject;
	private mobileEditEditField mobileEditEditField;
	private button button;
	private userNameTextFieldLabelEditField userNameTextFieldLabelEditField;
	private emailTextFieldLabelEditField emailTextFieldLabelEditField;
	private tABLETSLabel tABLETSLabel;
	private hPElitePad1000G2TabletLabel hPElitePad1000G2TabletLabel;
	private mobileObjectUiObject mobileObjectUiObject;
	private mobileObjectUiObject1 mobileObjectUiObject1;
	private mobileObjectUiObject2 mobileObjectUiObject2;
	private orderBox orderBox;
	private cHECKOUT cHECKOUT;
	private cHECKOUT1 cHECKOUT1;
	private cHECKOUT11 cHECKOUT11;
	private preferredPaymentWasNotSpecifiedLabel preferredPaymentWasNotSpecifiedLabel;
	private mobileObjectUiObject3 mobileObjectUiObject3;
	private SafePayOption SafePayOption;
	private incorrectUserNameOrPasswordLabel incorrectUserNameOrPasswordLabel;
	private OKBtnPayment OKBtnPayment;
						public IshoppingApplication(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					MenuButton = new MenuButton(this, applicationModel);
		LAPTOPSLabel = new LAPTOPSLabel(this, applicationModel);
		MainMenuHeadphones = new MainMenuHeadphones(this, applicationModel);
		PasswordSignUpEditField = new PasswordSignUpEditField(this, applicationModel);
		ConfirmPasswordSignUpEditField = new ConfirmPasswordSignUpEditField(this, applicationModel);
		PhoneNumberTextFieldLabeEditField = new PhoneNumberTextFieldLabeEditField(this, applicationModel);
		StreetSignUpEditField = new StreetSignUpEditField(this, applicationModel);
		CitySignUpEditField = new CitySignUpEditField(this, applicationModel);
		CountryPickerDone = new CountryPickerDone(this, applicationModel);
		ZipSignUpEditField = new ZipSignUpEditField(this, applicationModel);
		KeyboardNext = new KeyboardNext(this, applicationModel);
		KeyboardDone = new KeyboardDone(this, applicationModel);
		UserNameAlreadyExistsLabel1 = new UserNameAlreadyExistsLabel1(this, applicationModel);
		CreateAccountOkButton = new CreateAccountOkButton(this, applicationModel);
		NoProductsInCartLabel = new NoProductsInCartLabel(this, applicationModel);
		UseMyLocationLabel = new UseMyLocationLabel(this, applicationModel);
		DEL_ConfirnPasswordSignUpEditField = new DEL_ConfirnPasswordSignUpEditField(this, applicationModel);
		UserSettingsButton = new UserSettingsButton(this, applicationModel);
		MainMenuHome = new MainMenuHome(this, applicationModel);
		SPEAKERSLabel = new SPEAKERSLabel(this, applicationModel);
		CARTLabel = new CARTLabel(this, applicationModel);
		SETTINGSLabel = new SETTINGSLabel(this, applicationModel);
		LoginObj = new LoginObj(this, applicationModel);
		UserNameLoginditField = new UserNameLoginditField(this, applicationModel);
		LOGINButton = new LOGINButton(this, applicationModel);
		RegisterButton = new RegisterButton(this, applicationModel);
		UseMylocationUiObject = new UseMylocationUiObject(this, applicationModel);
		SignUpButton = new SignUpButton(this, applicationModel);
		InvalidUserNameOrPasLabel = new InvalidUserNameOrPasLabel(this, applicationModel);
		MenuObjUiObject = new MenuObjUiObject(this, applicationModel);
		LoginLabel = new LoginLabel(this, applicationModel);
		YesSignOutButton = new YesSignOutButton(this, applicationModel);
		SpeakerImgUiObject = new SpeakerImgUiObject(this, applicationModel);
		ColorButton = new ColorButton(this, applicationModel);
		ADDTOCARTButton = new ADDTOCARTButton(this, applicationModel);
		CarticonButton = new CarticonButton(this, applicationModel);
		CHECKOUTButton = new CHECKOUTButton(this, applicationModel);
		PaymentEditUiObject = new PaymentEditUiObject(this, applicationModel);
		ApplyQuantity = new ApplyQuantity(this, applicationModel);
		APPLYButton = new APPLYButton(this, applicationModel);
		SAFEPAYUSERNAMEEditField = new SAFEPAYUSERNAMEEditField(this, applicationModel);
		SAFEPAYPASSWORDEditField = new SAFEPAYPASSWORDEditField(this, applicationModel);
		SaveSafePAyCredentialsLabel = new SaveSafePAyCredentialsLabel(this, applicationModel);
		PAYNOWButton = new PAYNOWButton(this, applicationModel);
		OkButton = new OkButton(this, applicationModel);
		OrderObj = new OrderObj(this, applicationModel);
		CARDNUMBEREditField = new CARDNUMBEREditField(this, applicationModel);
		CountryLabel = new CountryLabel(this, applicationModel);
		CountryDropDown = new CountryDropDown(this, applicationModel);
		CVVNUMBEREditField = new CVVNUMBEREditField(this, applicationModel);
		CARDHOLDERNAMEEditField = new CARDHOLDERNAMEEditField(this, applicationModel);
		SaveMasterCreditCredenLabel = new SaveMasterCreditCredenLabel(this, applicationModel);
		PlusButton = new PlusButton(this, applicationModel);
		LeptopItem = new LeptopItem(this, applicationModel);
		YearDropDown = new YearDropDown(this, applicationModel);
		MonthDropDown = new MonthDropDown(this, applicationModel);
		MmLabel = new MmLabel(this, applicationModel);
		YyyyLabel = new YyyyLabel(this, applicationModel);
		SoldOutUiObject = new SoldOutUiObject(this, applicationModel);
		QuantityButton = new QuantityButton(this, applicationModel);
		UserNameAlreadyExistsLabel = new UserNameAlreadyExistsLabel(this, applicationModel);
		OKExistingUserButton = new OKExistingUserButton(this, applicationModel);
		CHANGEPASSWORDButton = new CHANGEPASSWORDButton(this, applicationModel);
		OLDPASSWORDEditField = new OLDPASSWORDEditField(this, applicationModel);
		NEWPASSWORDEditField = new NEWPASSWORDEditField(this, applicationModel);
		CONFIRMNEWPASSWORDEditField = new CONFIRMNEWPASSWORDEditField(this, applicationModel);
		UPDATEUserSettingButton = new UPDATEUserSettingButton(this, applicationModel);
		PasswordObjUiObject = new PasswordObjUiObject(this, applicationModel);
		Done = new Done(this, applicationModel);
		UserNameLabelEditField = new UserNameLabelEditField(this, applicationModel);
		FirstCartElement = new FirstCartElement(this, applicationModel);
		RemoveButton = new RemoveButton(this, applicationModel);
		ColorObject = new ColorObject(this, applicationModel);
		TabletObjUiObject = new TabletObjUiObject(this, applicationModel);
		UPDATECARTButton = new UPDATECARTButton(this, applicationModel);
		PasswordLoginEditField = new PasswordLoginEditField(this, applicationModel);
		PasswordLogin = new PasswordLogin(this, applicationModel);
		LoggedUserName = new LoggedUserName(this, applicationModel);
		BackButton = new BackButton(this, applicationModel);
		AddProductMessage = new AddProductMessage(this, applicationModel);
		AddProductMessageOkButton = new AddProductMessageOkButton(this, applicationModel);
		ProductsPageFilterButton = new ProductsPageFilterButton(this, applicationModel);
		FilterByPriceTabLabel = new FilterByPriceTabLabel(this, applicationModel);
		MobileObjectFilterPriceSliderUiObject = new MobileObjectFilterPriceSliderUiObject(this, applicationModel);
		mobileEditEditField = new mobileEditEditField(this, applicationModel);
		button = new button(this, applicationModel);
		userNameTextFieldLabelEditField = new userNameTextFieldLabelEditField(this, applicationModel);
		emailTextFieldLabelEditField = new emailTextFieldLabelEditField(this, applicationModel);
		tABLETSLabel = new tABLETSLabel(this, applicationModel);
		hPElitePad1000G2TabletLabel = new hPElitePad1000G2TabletLabel(this, applicationModel);
		mobileObjectUiObject = new mobileObjectUiObject(this, applicationModel);
		mobileObjectUiObject1 = new mobileObjectUiObject1(this, applicationModel);
		mobileObjectUiObject2 = new mobileObjectUiObject2(this, applicationModel);
		orderBox = new orderBox(this, applicationModel);
		cHECKOUT = new cHECKOUT(this, applicationModel);
		cHECKOUT1 = new cHECKOUT1(this, applicationModel);
		cHECKOUT11 = new cHECKOUT11(this, applicationModel);
		preferredPaymentWasNotSpecifiedLabel = new preferredPaymentWasNotSpecifiedLabel(this, applicationModel);
		mobileObjectUiObject3 = new mobileObjectUiObject3(this, applicationModel);
		SafePayOption = new SafePayOption(this, applicationModel);
		incorrectUserNameOrPasswordLabel = new incorrectUserNameOrPasswordLabel(this, applicationModel);
		OKBtnPayment = new OKBtnPayment(this, applicationModel);

			setDisplayName("Ishopping");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ApplicationDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ApplicationDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ApplicationDescription.Builder().identifier("com.mf.iShopping").packaged(false).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public MenuButton MenuButton() { return MenuButton; }
		public LAPTOPSLabel LAPTOPSLabel() { return LAPTOPSLabel; }
		public MainMenuHeadphones MainMenuHeadphones() { return MainMenuHeadphones; }
		public PasswordSignUpEditField PasswordSignUpEditField() { return PasswordSignUpEditField; }
		public ConfirmPasswordSignUpEditField ConfirmPasswordSignUpEditField() { return ConfirmPasswordSignUpEditField; }
		public PhoneNumberTextFieldLabeEditField PhoneNumberTextFieldLabeEditField() { return PhoneNumberTextFieldLabeEditField; }
		public StreetSignUpEditField StreetSignUpEditField() { return StreetSignUpEditField; }
		public CitySignUpEditField CitySignUpEditField() { return CitySignUpEditField; }
		public CountryPickerDone CountryPickerDone() { return CountryPickerDone; }
		public ZipSignUpEditField ZipSignUpEditField() { return ZipSignUpEditField; }
		public KeyboardNext KeyboardNext() { return KeyboardNext; }
		public KeyboardDone KeyboardDone() { return KeyboardDone; }
		public UserNameAlreadyExistsLabel1 UserNameAlreadyExistsLabel1() { return UserNameAlreadyExistsLabel1; }
		public CreateAccountOkButton CreateAccountOkButton() { return CreateAccountOkButton; }
		public NoProductsInCartLabel NoProductsInCartLabel() { return NoProductsInCartLabel; }
		public UseMyLocationLabel UseMyLocationLabel() { return UseMyLocationLabel; }
		public DEL_ConfirnPasswordSignUpEditField DEL_ConfirnPasswordSignUpEditField() { return DEL_ConfirnPasswordSignUpEditField; }
		public UserSettingsButton UserSettingsButton() { return UserSettingsButton; }
		public MainMenuHome MainMenuHome() { return MainMenuHome; }
		public SPEAKERSLabel SPEAKERSLabel() { return SPEAKERSLabel; }
		public CARTLabel CARTLabel() { return CARTLabel; }
		public SETTINGSLabel SETTINGSLabel() { return SETTINGSLabel; }
		public LoginObj LoginObj() { return LoginObj; }
		public UserNameLoginditField UserNameLoginditField() { return UserNameLoginditField; }
		public LOGINButton LOGINButton() { return LOGINButton; }
		public RegisterButton RegisterButton() { return RegisterButton; }
		public UseMylocationUiObject UseMylocationUiObject() { return UseMylocationUiObject; }
		public SignUpButton SignUpButton() { return SignUpButton; }
		public InvalidUserNameOrPasLabel InvalidUserNameOrPasLabel() { return InvalidUserNameOrPasLabel; }
		public MenuObjUiObject MenuObjUiObject() { return MenuObjUiObject; }
		public LoginLabel LoginLabel() { return LoginLabel; }
		public YesSignOutButton YesSignOutButton() { return YesSignOutButton; }
		public SpeakerImgUiObject SpeakerImgUiObject() { return SpeakerImgUiObject; }
		public ColorButton ColorButton() { return ColorButton; }
		public ADDTOCARTButton ADDTOCARTButton() { return ADDTOCARTButton; }
		public CarticonButton CarticonButton() { return CarticonButton; }
		public CHECKOUTButton CHECKOUTButton() { return CHECKOUTButton; }
		public PaymentEditUiObject PaymentEditUiObject() { return PaymentEditUiObject; }
		public ApplyQuantity ApplyQuantity() { return ApplyQuantity; }
		public APPLYButton APPLYButton() { return APPLYButton; }
		public SAFEPAYUSERNAMEEditField SAFEPAYUSERNAMEEditField() { return SAFEPAYUSERNAMEEditField; }
		public SAFEPAYPASSWORDEditField SAFEPAYPASSWORDEditField() { return SAFEPAYPASSWORDEditField; }
		public SaveSafePAyCredentialsLabel SaveSafePAyCredentialsLabel() { return SaveSafePAyCredentialsLabel; }
		public PAYNOWButton PAYNOWButton() { return PAYNOWButton; }
		public OkButton OkButton() { return OkButton; }
		public OrderObj OrderObj() { return OrderObj; }
		public CARDNUMBEREditField CARDNUMBEREditField() { return CARDNUMBEREditField; }
		public CountryLabel CountryLabel() { return CountryLabel; }
		public CountryDropDown CountryDropDown() { return CountryDropDown; }
		public CVVNUMBEREditField CVVNUMBEREditField() { return CVVNUMBEREditField; }
		public CARDHOLDERNAMEEditField CARDHOLDERNAMEEditField() { return CARDHOLDERNAMEEditField; }
		public SaveMasterCreditCredenLabel SaveMasterCreditCredenLabel() { return SaveMasterCreditCredenLabel; }
		public PlusButton PlusButton() { return PlusButton; }
		public LeptopItem LeptopItem() { return LeptopItem; }
		public YearDropDown YearDropDown() { return YearDropDown; }
		public MonthDropDown MonthDropDown() { return MonthDropDown; }
		public MmLabel MmLabel() { return MmLabel; }
		public YyyyLabel YyyyLabel() { return YyyyLabel; }
		public SoldOutUiObject SoldOutUiObject() { return SoldOutUiObject; }
		public QuantityButton QuantityButton() { return QuantityButton; }
		public UserNameAlreadyExistsLabel UserNameAlreadyExistsLabel() { return UserNameAlreadyExistsLabel; }
		public OKExistingUserButton OKExistingUserButton() { return OKExistingUserButton; }
		public CHANGEPASSWORDButton CHANGEPASSWORDButton() { return CHANGEPASSWORDButton; }
		public OLDPASSWORDEditField OLDPASSWORDEditField() { return OLDPASSWORDEditField; }
		public NEWPASSWORDEditField NEWPASSWORDEditField() { return NEWPASSWORDEditField; }
		public CONFIRMNEWPASSWORDEditField CONFIRMNEWPASSWORDEditField() { return CONFIRMNEWPASSWORDEditField; }
		public UPDATEUserSettingButton UPDATEUserSettingButton() { return UPDATEUserSettingButton; }
		public PasswordObjUiObject PasswordObjUiObject() { return PasswordObjUiObject; }
		public Done Done() { return Done; }
		public UserNameLabelEditField UserNameLabelEditField() { return UserNameLabelEditField; }
		public FirstCartElement FirstCartElement() { return FirstCartElement; }
		public RemoveButton RemoveButton() { return RemoveButton; }
		public ColorObject ColorObject() { return ColorObject; }
		public TabletObjUiObject TabletObjUiObject() { return TabletObjUiObject; }
		public UPDATECARTButton UPDATECARTButton() { return UPDATECARTButton; }
		public PasswordLoginEditField PasswordLoginEditField() { return PasswordLoginEditField; }
		public PasswordLogin PasswordLogin() { return PasswordLogin; }
		public LoggedUserName LoggedUserName() { return LoggedUserName; }
		public BackButton BackButton() { return BackButton; }
		public AddProductMessage AddProductMessage() { return AddProductMessage; }
		public AddProductMessageOkButton AddProductMessageOkButton() { return AddProductMessageOkButton; }
		public ProductsPageFilterButton ProductsPageFilterButton() { return ProductsPageFilterButton; }
		public FilterByPriceTabLabel FilterByPriceTabLabel() { return FilterByPriceTabLabel; }
		public MobileObjectFilterPriceSliderUiObject MobileObjectFilterPriceSliderUiObject() { return MobileObjectFilterPriceSliderUiObject; }
		public mobileEditEditField mobileEditEditField() { return mobileEditEditField; }
		public button button() { return button; }
		public userNameTextFieldLabelEditField userNameTextFieldLabelEditField() { return userNameTextFieldLabelEditField; }
		public emailTextFieldLabelEditField emailTextFieldLabelEditField() { return emailTextFieldLabelEditField; }
		public tABLETSLabel tABLETSLabel() { return tABLETSLabel; }
		public hPElitePad1000G2TabletLabel hPElitePad1000G2TabletLabel() { return hPElitePad1000G2TabletLabel; }
		public mobileObjectUiObject mobileObjectUiObject() { return mobileObjectUiObject; }
		public mobileObjectUiObject1 mobileObjectUiObject1() { return mobileObjectUiObject1; }
		public mobileObjectUiObject2 mobileObjectUiObject2() { return mobileObjectUiObject2; }
		public orderBox orderBox() { return orderBox; }
		public cHECKOUT cHECKOUT() { return cHECKOUT; }
		public cHECKOUT1 cHECKOUT1() { return cHECKOUT1; }
		public cHECKOUT11 cHECKOUT11() { return cHECKOUT11; }
		public preferredPaymentWasNotSpecifiedLabel preferredPaymentWasNotSpecifiedLabel() { return preferredPaymentWasNotSpecifiedLabel; }
		public mobileObjectUiObject3 mobileObjectUiObject3() { return mobileObjectUiObject3; }
		public SafePayOption SafePayOption() { return SafePayOption; }
		public incorrectUserNameOrPasswordLabel incorrectUserNameOrPasswordLabel() { return incorrectUserNameOrPasswordLabel; }
		public OKBtnPayment OKBtnPayment() { return OKBtnPayment; }
		
			public class MenuButton extends ButtonNodeBase
	{

		
								public MenuButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Menu");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().accessibilityId("Menu").className("Button").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LAPTOPSLabel extends LabelNodeBase
	{

		
								public LAPTOPSLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LAPTOPS");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("LAPTOPS").accessibilityId("LAPTOPS").className("Label").container("Table[0][0][0]").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MainMenuHeadphones extends LabelNodeBase
	{

		
								public MainMenuHeadphones(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MainMenuHeadphones");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("HEADPHONES").accessibilityId("HEADPHONES").className("Label").container("Table[0][4][0]").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PasswordSignUpEditField extends EditFieldNodeBase
	{

		
								public PasswordSignUpEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PasswordSignUpEditField");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().accessibilityId("passwordTextFieldID").className("Input").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConfirmPasswordSignUpEditField extends EditFieldNodeBase
	{

		
								public ConfirmPasswordSignUpEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConfirmPasswordSignUpEditField");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().accessibilityId("confirmPasswordTextFieldLabel").className("Input").mobileCenterIndex(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PhoneNumberTextFieldLabeEditField extends EditFieldNodeBase
	{

		
								public PhoneNumberTextFieldLabeEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PhoneNumberTextFieldLabe");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().accessibilityId("phoneNumberTextFieldLabel").className("Input").mobileCenterIndex(9).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class StreetSignUpEditField extends EditFieldNodeBase
	{

		
								public StreetSignUpEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("StreetSignUpEditField");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().accessibilityId("streetTextFieldID").className("Input").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CitySignUpEditField extends EditFieldNodeBase
	{

		
								public CitySignUpEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CitySignUpEditField");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().accessibilityId("cityTextFieldID").className("Input").mobileCenterIndex(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CountryPickerDone extends ButtonNodeBase
	{

		
								public CountryPickerDone(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CountryPickerDone");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("Done").accessibilityId("countryPickerDone").className("Button").mobileCenterIndex(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ZipSignUpEditField extends EditFieldNodeBase
	{

		
								public ZipSignUpEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ZipSignUpEditField");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().accessibilityId("zipTextFieldLabel").className("Input").mobileCenterIndex(17).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class KeyboardNext extends ButtonNodeBase
	{

		
								public KeyboardNext(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("KeyboardNext");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("Next").accessibilityId("Next:").className("Button").container("").mobileCenterIndex(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class KeyboardDone extends ButtonNodeBase
	{

		
								public KeyboardDone(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("KeyboardDone");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("Done").accessibilityId("Done").className("Button").container("").mobileCenterIndex(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UserNameAlreadyExistsLabel1 extends LabelNodeBase
	{

		
								public UserNameAlreadyExistsLabel1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("User name already exists1");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("User name already exists").accessibilityId("User name already exists").className("Label").mobileCenterIndex(9).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountOkButton extends ButtonNodeBase
	{

		
								public CreateAccountOkButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CreateAccountOkButton");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("OK").accessibilityId("OK").className("Button").mobileCenterIndex(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NoProductsInCartLabel extends LabelNodeBase
	{

		
								public NoProductsInCartLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("- No products in cart -");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("- No products in cart -").accessibilityId("- No products in cart -").className("Label").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UseMyLocationLabel extends ButtonNodeBase
	{

		
								public UseMyLocationLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UseMyLocationLabel");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().accessibilityId("locationCheckBox").className("Button").mobileCenterIndex(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DEL_ConfirnPasswordSignUpEditField extends EditFieldNodeBase
	{

		
								public DEL_ConfirnPasswordSignUpEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DEL_ConfirnPasswordSignUpEditField");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().accessibilityId("confirmPasswordTextFieldID").className("Input").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UserSettingsButton extends ButtonNodeBase
	{

		
								public UserSettingsButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("User settings");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().accessibilityId("User settings").className("Button").container("Table[0][0][0]").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MainMenuHome extends LabelNodeBase
	{

		
								public MainMenuHome(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MainMenuHome");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("HOME").accessibilityId("HOME").className("Label").container("Table[0][1][0]").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SPEAKERSLabel extends LabelNodeBase
	{

		
								public SPEAKERSLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SPEAKERS");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("SPEAKERS").accessibilityId("SPEAKERS").className("Label").container("Table[0][6][0]").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CARTLabel extends LabelNodeBase
	{

		
								public CARTLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CART");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("CART").accessibilityId("CART").className("Label").container("Table[0][8][0]").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SETTINGSLabel extends LabelNodeBase
	{

		
								public SETTINGSLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SETTINGS");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("SETTINGS").accessibilityId("SETTINGS").className("Label").container("Table[0][9][0]").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LoginObj extends UiObjectNodeBase
	{

		
								public LoginObj(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Login Obj");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("TableCell").container("").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UserNameLoginditField extends EditFieldNodeBase
	{

		
								public UserNameLoginditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("USER NAME login");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(0).accessibilityId("userNameLabel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LOGINButton extends ButtonNodeBase
	{

		
								public LOGINButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LOGIN");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("LOGIN").accessibilityId("LOGIN").className("Button").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RegisterButton extends ButtonNodeBase
	{

		
								public RegisterButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("RegisterButton");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("REGISTER").accessibilityId("REGISTER").className("Button").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UseMylocationUiObject extends UiObjectNodeBase
	{

		
								public UseMylocationUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UseMylocation");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").mobileCenterIndex(22).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SignUpButton extends ButtonNodeBase
	{

		
								public SignUpButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SignUp");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().accessibilityId("Don't have an account? SIGN UP TODAY").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class InvalidUserNameOrPasLabel extends LabelNodeBase
	{

		
								public InvalidUserNameOrPasLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Invalid user name or pas");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("Invalid user name or password").accessibilityId("Invalid user name or password").className("Label").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MenuObjUiObject extends UiObjectNodeBase
	{

		
								public MenuObjUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MenuObj");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").mobileCenterIndex(14).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LoginLabel extends LabelNodeBase
	{

		
								public LoginLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("login");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().className("Label").container("Table[0][0][0]").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class YesSignOutButton extends ButtonNodeBase
	{

		
								public YesSignOutButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("YesSignOut");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("Yes").accessibilityId("Yes").className("Button").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SpeakerImgUiObject extends UiObjectNodeBase
	{

		
								public SpeakerImgUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SpeakerImg");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("TableCell").container("CollectionView[0][2][0]").mobileCenterIndex(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ColorButton extends ButtonNodeBase
	{

		
								public ColorButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("color");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().className("Button").mobileCenterIndex(5).accessibilityId("ColorButtonId").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ADDTOCARTButton extends ButtonNodeBase
	{

		
								public ADDTOCARTButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ADD TO CART");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("ADD TO CART").accessibilityId("ADD TO CART").className("Button").mobileCenterIndex(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CarticonButton extends ButtonNodeBase
	{

		
								public CarticonButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("carticon");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().accessibilityId("cartItem").className("Button").mobileCenterIndex(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CHECKOUTButton extends ButtonNodeBase
	{

		
								public CHECKOUTButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CHECKOUT");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().className("Button").mobileCenterIndex(2).container("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PaymentEditUiObject extends UiObjectNodeBase
	{

		
								public PaymentEditUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("paymentEdit");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").mobileCenterIndex(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ApplyQuantity extends ButtonNodeBase
	{

		
								public ApplyQuantity(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ApplyQuantity");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("APPLY").accessibilityId("APPLY").className("Button").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class APPLYButton extends ButtonNodeBase
	{

		
								public APPLYButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("APPLY");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("APPLY").accessibilityId("APPLY").className("Button").mobileCenterIndex(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SAFEPAYUSERNAMEEditField extends EditFieldNodeBase
	{

		
								public SAFEPAYUSERNAMEEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("*SAFEPAY USERNAME");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().hint("*SAFEPAY USERNAME").className("Input").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SAFEPAYPASSWORDEditField extends EditFieldNodeBase
	{

		
								public SAFEPAYPASSWORDEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("*SAFEPAY PASSWORD");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().hint("*SAFEPAY PASSWORD").className("Input").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SaveSafePAyCredentialsLabel extends LabelNodeBase
	{

		
								public SaveSafePAyCredentialsLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Save SafePAy credentials");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("Save SafePAy credentials in your profile").accessibilityId("Save SafePAy credentials in your profile").className("Label").mobileCenterIndex(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PAYNOWButton extends ButtonNodeBase
	{

		
								public PAYNOWButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PAY NOW");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("PAY NOW").accessibilityId("PAY NOW").className("Button").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OkButton extends ButtonNodeBase
	{

		
								public OkButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Ok");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("Ok").accessibilityId("Ok").className("Button").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OrderObj extends UiObjectNodeBase
	{

		
								public OrderObj(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OrderObj");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().accessibilityId("").className("View").mobileCenterIndex(14).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CARDNUMBEREditField extends EditFieldNodeBase
	{

		
								public CARDNUMBEREditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("*CARD NUMBER");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().hint("*CARD NUMBER").className("Input").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CountryLabel extends LabelNodeBase
	{

		
								public CountryLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Country");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("Country").accessibilityId("Country").className("Label").mobileCenterIndex(10).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CountryDropDown extends DropDownNodeBase
	{

		
								public CountryDropDown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MobileDropDown");
		}

		@Override
		protected com.hp.lft.sdk.mobile.DropDownDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.DropDownDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.DropDownDescription.Builder().className("ItemSelector").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CVVNUMBEREditField extends EditFieldNodeBase
	{

		
								public CVVNUMBEREditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("*CVV NUMBER");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CARDHOLDERNAMEEditField extends EditFieldNodeBase
	{

		
								public CARDHOLDERNAMEEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("*CARDHOLDER NAME");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SaveMasterCreditCredenLabel extends LabelNodeBase
	{

		
								public SaveMasterCreditCredenLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Save MasterCredit creden");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("Save MasterCredit credentials in your profile").accessibilityId("Save MasterCredit credentials in your profile").className("Label").mobileCenterIndex(9).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PlusButton extends ButtonNodeBase
	{

		
								public PlusButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Plus");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().accessibilityId("Plus").className("Button").mobileCenterIndex(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LeptopItem extends UiObjectNodeBase
	{

		
								public LeptopItem(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("leptop Item");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").container("CollectionView[0][0][0]").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class YearDropDown extends DropDownNodeBase
	{

		
								public YearDropDown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("YearDropDown");
		}

		@Override
		protected com.hp.lft.sdk.mobile.DropDownDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.DropDownDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.DropDownDescription.Builder().className("ItemSelector").container("").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MonthDropDown extends DropDownNodeBase
	{

		
								public MonthDropDown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MonthDropDown");
		}

		@Override
		protected com.hp.lft.sdk.mobile.DropDownDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.DropDownDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.DropDownDescription.Builder().accessibilityId("").className("ItemSelector").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MmLabel extends LabelNodeBase
	{

		
								public MmLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("* mm");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("* mm").accessibilityId("* mm").className("Label").mobileCenterIndex(5).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class YyyyLabel extends LabelNodeBase
	{

		
								public YyyyLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("* yyyy");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("* yyyy").accessibilityId("* yyyy").className("Label").mobileCenterIndex(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SoldOutUiObject extends UiObjectNodeBase
	{

		
								public SoldOutUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SoldOut");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("TableCell").container("CollectionView[0][1][0]").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class QuantityButton extends ButtonNodeBase
	{

		
								public QuantityButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("quantity button");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().className("Button").container("").mobileCenterIndex(3).accessibilityId("quantityButtonId").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UserNameAlreadyExistsLabel extends LabelNodeBase
	{

		
								public UserNameAlreadyExistsLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("User name already exists");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("User name already exists").accessibilityId("User name already exists").className("Label").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKExistingUserButton extends ButtonNodeBase
	{

		
								public OKExistingUserButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("OK").accessibilityId("OK").className("Button").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CHANGEPASSWORDButton extends ButtonNodeBase
	{

		
								public CHANGEPASSWORDButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CHANGE PASSWORD");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("CHANGE PASSWORD").accessibilityId("CHANGE PASSWORD").className("Button").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OLDPASSWORDEditField extends EditFieldNodeBase
	{

		
								public OLDPASSWORDEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("* OLD PASSWORD");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().hint("* OLD PASSWORD").className("Input").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NEWPASSWORDEditField extends EditFieldNodeBase
	{

		
								public NEWPASSWORDEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("* NEW PASSWORD");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CONFIRMNEWPASSWORDEditField extends EditFieldNodeBase
	{

		
								public CONFIRMNEWPASSWORDEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("* CONFIRM NEW PASSWORD");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().hint("* CONFIRM NEW PASSWORD").className("Input").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UPDATEUserSettingButton extends ButtonNodeBase
	{

		
								public UPDATEUserSettingButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UPDATE userSetting");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("UPDATE").accessibilityId("UPDATE").className("Button").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PasswordObjUiObject extends UiObjectNodeBase
	{

		
								public PasswordObjUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PasswordObj");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").mobileCenterIndex(12).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Done extends LabelNodeBase
	{

		
								public Done(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Done");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("Done").accessibilityId("Done").className("Label").mobileCenterIndex(10).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UserNameLabelEditField extends EditFieldNodeBase
	{

		
								public UserNameLabelEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("userNameLabel");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().accessibilityId("userNameLabel").className("Input").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FirstCartElement extends UiObjectNodeBase
	{

		
								public FirstCartElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("firstCartElement");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").container("Table[0][0][0]").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RemoveButton extends ButtonNodeBase
	{

		
								public RemoveButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Remove");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("Remove").accessibilityId("Remove").className("Button").container("Table[0][0][0]").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ColorObject extends UiObjectNodeBase
	{

		
								public ColorObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("colorObject");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("Button").container("CollectionView[0][1][0]").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TabletObjUiObject extends UiObjectNodeBase
	{

		
								public TabletObjUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("tabletObj");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").mobileCenterIndex(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UPDATECARTButton extends ButtonNodeBase
	{

		
								public UPDATECARTButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UPDATE CART");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("UPDATE CART").accessibilityId("UPDATE CART").className("Button").mobileCenterIndex(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PasswordLoginEditField extends EditFieldNodeBase
	{

		
								public PasswordLoginEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PasswordLoginEditField");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().accessibilityId("passwordLabel").className("Input").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PasswordLogin extends EditFieldNodeBase
	{

		
								public PasswordLogin(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("passwordLabel");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().accessibilityId("passwordLabel").className("Input").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LoggedUserName extends LabelNodeBase
	{

		
								public LoggedUserName(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LoggedUserName");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().className("Label").container("Table[0][0][0]").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BackButton extends ButtonNodeBase
	{

		
								public BackButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Back");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("Back").accessibilityId("Back").className("Button").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddProductMessage extends UiObjectNodeBase
	{

		
								public AddProductMessage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddProductMessage");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().accessibilityId("Add product").className("View").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddProductMessageOkButton extends ButtonNodeBase
	{

		
								public AddProductMessageOkButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddProductMessageOkButton");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("Ok").accessibilityId("Ok").className("Button").mobileCenterIndex(10).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProductsPageFilterButton extends ButtonNodeBase
	{

		
								public ProductsPageFilterButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProductsPageFilter");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().text("Filter").accessibilityId("Filter").className("Button").mobileCenterIndex(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FilterByPriceTabLabel extends LabelNodeBase
	{

		
								public FilterByPriceTabLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FilterByPriceTab");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().text("BY PRICE").accessibilityId("BY PRICE").className("Label").container("").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MobileObjectFilterPriceSliderUiObject extends UiObjectNodeBase
	{

		
								public MobileObjectFilterPriceSliderUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MobileObjectFilterPriceSlider");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("TableCell").container("Table[0][0][0]").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class mobileEditEditField extends EditFieldNodeBase
	{

		
								public mobileEditEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MobileEdit");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class button extends ButtonNodeBase
	{

		
								public button(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("22");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().className("Button").mobileCenterIndex(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class userNameTextFieldLabelEditField extends EditFieldNodeBase
	{

		
								public userNameTextFieldLabelEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("userNameTextFieldLabel");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().accessibilityId("userNameTextFieldLabel").className("Input").hint("* USER NAME").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class emailTextFieldLabelEditField extends EditFieldNodeBase
	{

		
								public emailTextFieldLabelEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("emailTextFieldLabel");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().accessibilityId("emailTextFieldLabel").className("Input").hint("* EMAIL").mobileCenterIndex(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class tABLETSLabel extends LabelNodeBase
	{

		
								public tABLETSLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TABLETS");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().accessibilityId("TABLETS").className("Label").container("Table[0][2][0]").mobileCenterIndex(1).text("TABLETS").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class hPElitePad1000G2TabletLabel extends LabelNodeBase
	{

		
								public hPElitePad1000G2TabletLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HP ElitePad 1000 G2 Tablet");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().accessibilityId("HP ElitePad 1000 G2 Tablet").className("Label").container("CollectionView[0][0][0]").mobileCenterIndex(0).text("HP ElitePad 1000 G2 Tablet").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class mobileObjectUiObject extends UiObjectNodeBase
	{

		
								public mobileObjectUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MobileObject");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").mobileCenterIndex(11).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class mobileObjectUiObject1 extends UiObjectNodeBase
	{

		
								public mobileObjectUiObject1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MobileObject1");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").mobileCenterIndex(10).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class mobileObjectUiObject2 extends UiObjectNodeBase
	{

		
								public mobileObjectUiObject2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MobileObject2");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").mobileCenterIndex(10).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class orderBox extends UiObjectNodeBase
	{

		
								public orderBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Change payment Method");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").mobileCenterIndex(10).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cHECKOUT extends ButtonNodeBase
	{

		
								public cHECKOUT(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BtnCheckout");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().className("Button").mobileCenterIndex(3).resourceId("buttonCheckOut").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cHECKOUT1 extends ButtonNodeBase
	{

		
								public cHECKOUT1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BtnCheckout1");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().className("Button").mobileCenterIndex(5).resourceId("buttonCheckOut").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cHECKOUT11 extends ButtonNodeBase
	{

		
								public cHECKOUT11(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BtnCheckout11");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().className("Button").mobileCenterIndex(7).resourceId("buttonCheckOut").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class preferredPaymentWasNotSpecifiedLabel extends LabelNodeBase
	{

		
								public preferredPaymentWasNotSpecifiedLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Preferred payment was not specified");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().accessibilityId("Preferred payment was not specified").className("Label").mobileCenterIndex(0).text("Preferred payment was not specified").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class mobileObjectUiObject3 extends UiObjectNodeBase
	{

		
								public mobileObjectUiObject3(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MobileObject4");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("ImageView").mobileCenterIndex(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SafePayOption extends UiObjectNodeBase
	{

		
								public SafePayOption(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SafePayOption");
		}

		@Override
		protected com.hp.lft.sdk.mobile.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.UiObjectDescription.Builder().className("View").mobileCenterIndex(10).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class incorrectUserNameOrPasswordLabel extends LabelNodeBase
	{

		
								public incorrectUserNameOrPasswordLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Incorrect user name or password.");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().accessibilityId("Incorrect user name or password.").className("Label").mobileCenterIndex(0).text("Incorrect user name or password.").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKBtnPayment extends ButtonNodeBase
	{

		
								public OKBtnPayment(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OKBtnPayment");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().accessibilityId("OK").className("Button").mobileCenterIndex(0).text("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class advantageShoppingApplication extends ApplicationNodeBase
	{

		
			private aPPLYButton aPPLYButton;
	private serverURLEditField serverURLEditField;
	private okButton okButton;
	private youAreNotConnectedToTheInternetLabel youAreNotConnectedToTheInternetLabel;
	private pAYNOWButton pAYNOWButton;
						public advantageShoppingApplication(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					aPPLYButton = new aPPLYButton(this, applicationModel);
		serverURLEditField = new serverURLEditField(this, applicationModel);
		okButton = new okButton(this, applicationModel);
		youAreNotConnectedToTheInternetLabel = new youAreNotConnectedToTheInternetLabel(this, applicationModel);
		pAYNOWButton = new pAYNOWButton(this, applicationModel);

			setDisplayName("Advantage Shopping");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ApplicationDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ApplicationDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ApplicationDescription.Builder().identifier("com.mf.iShopping").packaged(true).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public aPPLYButton aPPLYButton() { return aPPLYButton; }
		public serverURLEditField serverURLEditField() { return serverURLEditField; }
		public okButton okButton() { return okButton; }
		public youAreNotConnectedToTheInternetLabel youAreNotConnectedToTheInternetLabel() { return youAreNotConnectedToTheInternetLabel; }
		public pAYNOWButton pAYNOWButton() { return pAYNOWButton; }
		
			public class aPPLYButton extends ButtonNodeBase
	{

		
								public aPPLYButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("APPLY");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().accessibilityId("APPLY").className("Button").mobileCenterIndex(0).text("APPLY").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class serverURLEditField extends EditFieldNodeBase
	{

		
								public serverURLEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Server URL");
		}

		@Override
		protected com.hp.lft.sdk.mobile.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.EditFieldDescription.Builder().className("Input").hint("Server URL").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class okButton extends ButtonNodeBase
	{

		
								public okButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Ok");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().accessibilityId("Ok").className("Button").mobileCenterIndex(0).text("Ok").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class youAreNotConnectedToTheInternetLabel extends LabelNodeBase
	{

		
								public youAreNotConnectedToTheInternetLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("You are not connected to the internet");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().accessibilityId("You are not connected to the internet").className("Label").mobileCenterIndex(0).text("You are not connected to the internet").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class pAYNOWButton extends ButtonNodeBase
	{

		
								public pAYNOWButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PAY NOW");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().accessibilityId("PAY NOW").className("Button").mobileCenterIndex(0).text("PAY NOW").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class homeApplication extends ApplicationNodeBase
	{

		
			private settingsButton settingsButton;
						public homeApplication(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					settingsButton = new settingsButton(this, applicationModel);

			setDisplayName("Home");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ApplicationDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ApplicationDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ApplicationDescription.Builder().identifier("MC.Home").packaged(false).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public settingsButton settingsButton() { return settingsButton; }
		
			public class settingsButton extends ButtonNodeBase
	{

		
			private settingBtn settingBtn;
						public settingsButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					settingBtn = new settingBtn(this, applicationModel);

			setDisplayName("Settings");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().accessibilityId("Settings").className("Button").mobileCenterIndex(16).text("Settings").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public settingBtn settingBtn() { return settingBtn; }
		
			public class settingBtn extends ButtonNodeBase
	{

		
								public settingBtn(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("settingBtn");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().className("Button").mobileCenterIndex(16).accessibilityId("Setting").text("Setting").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class settingsApplication extends ApplicationNodeBase
	{

		
			private wiFiLabel wiFiLabel;
	private wiFiToggle wiFiToggle;
						public settingsApplication(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					wiFiLabel = new wiFiLabel(this, applicationModel);
		wiFiToggle = new wiFiToggle(this, applicationModel);

			setDisplayName("Settings");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ApplicationDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ApplicationDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ApplicationDescription.Builder().identifier("MC.Settings").packaged(false).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public wiFiLabel wiFiLabel() { return wiFiLabel; }
		public wiFiToggle wiFiToggle() { return wiFiToggle; }
		
			public class wiFiLabel extends LabelNodeBase
	{

		
								public wiFiLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wi-Fi");
		}

		@Override
		protected com.hp.lft.sdk.mobile.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.LabelDescription.Builder().accessibilityId("Wi-Fi").className("Label").container("Table[0][4][0]").mobileCenterIndex(0).text("Wi-Fi").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class wiFiToggle extends ToggleNodeBase
	{

		
								public wiFiToggle(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wi-Fi");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ToggleDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ToggleDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ToggleDescription.Builder().accessibilityId("Wi-Fi").className("Switch").container("Table[0][0][0]").mobileCenterIndex(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class websheetApplication extends ApplicationNodeBase
	{

		
			private doneButton doneButton;
						public websheetApplication(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					doneButton = new doneButton(this, applicationModel);

			setDisplayName("Websheet");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ApplicationDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ApplicationDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ApplicationDescription.Builder().identifier("com.apple.WebSheet").packaged(false).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public doneButton doneButton() { return doneButton; }
		
			public class doneButton extends ButtonNodeBase
	{

		
								public doneButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Done");
		}

		@Override
		protected com.hp.lft.sdk.mobile.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.mobile.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.mobile.ButtonDescription.Builder().accessibilityId("Done").className("Button").mobileCenterIndex(2).text("Done").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}


			
	public abstract class ApplicationNodeBase extends AppModelNodeBase<com.hp.lft.sdk.mobile.Application, com.hp.lft.sdk.mobile.ApplicationDescription> implements com.hp.lft.sdk.mobile.Application
	{		
		public ApplicationNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getIdentifier() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getIdentifier();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public int getUpload() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getUpload();
		}

		@Override 
		public java.lang.String getVersion() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVersion();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void install() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().install();
		}

		@Override 
		public boolean isPackaged() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isPackaged();
		}

		@Override 
		public void kill() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().kill();
		}

		@Override 
		public void launch() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().launch();
		}

		@Override 
		public void restart() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().restart();
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public com.hp.lft.sdk.mobile.SimulateAuthResult simulateAuthentication()  
		{
			return getConcrete().simulateAuthentication();
		}

		@Override 
		public void simulateBarcodeScan(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().simulateBarcodeScan(arg0);
		}

		@Override 
		public void startCameraSimulationMode(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().startCameraSimulationMode(arg0);
		}

		@Override 
		public void stopCameraSimulationMode() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().stopCameraSimulationMode();
		}

		@Override 
		public void uninstall() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().uninstall();
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
	
	public abstract class ButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.mobile.Button, com.hp.lft.sdk.mobile.ButtonDescription> implements com.hp.lft.sdk.mobile.Button
	{		
		public ButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.lang.String getAccessibilityId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityId();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getContainer() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getContainer();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getHint() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHint();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMobileCenterIndex() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMobileCenterIndex();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.lang.String getResourceId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getResourceId();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isCheckable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isCheckable();
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isClickable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isClickable();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocusable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocusable();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.mobile.LongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.Location arg0, com.hp.lft.sdk.Location arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1, com.hp.lft.sdk.mobile.PanArgs arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1, arg2);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0, com.hp.lft.sdk.mobile.PinchArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0, com.hp.lft.sdk.mobile.SwipeArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0, arg1);
		}

		@Override 
		public void tap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap();
		}

		@Override 
		public void tap(com.hp.lft.sdk.mobile.TapArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
	
	public abstract class LabelNodeBase extends AppModelNodeBase<com.hp.lft.sdk.mobile.Label, com.hp.lft.sdk.mobile.LabelDescription> implements com.hp.lft.sdk.mobile.Label
	{		
		public LabelNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.lang.String getAccessibilityId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityId();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getContainer() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getContainer();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getHint() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHint();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMobileCenterIndex() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMobileCenterIndex();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.lang.String getResourceId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getResourceId();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isCheckable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isCheckable();
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isClickable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isClickable();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocusable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocusable();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.mobile.LongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.Location arg0, com.hp.lft.sdk.Location arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1, com.hp.lft.sdk.mobile.PanArgs arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1, arg2);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0, com.hp.lft.sdk.mobile.PinchArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0, com.hp.lft.sdk.mobile.SwipeArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0, arg1);
		}

		@Override 
		public void tap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap();
		}

		@Override 
		public void tap(com.hp.lft.sdk.mobile.TapArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
	
	public abstract class EditFieldNodeBase extends AppModelNodeBase<com.hp.lft.sdk.mobile.EditField, com.hp.lft.sdk.mobile.EditFieldDescription> implements com.hp.lft.sdk.mobile.EditField
	{		
		public EditFieldNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.lang.String getAccessibilityId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityId();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getContainer() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getContainer();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getHint() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHint();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMobileCenterIndex() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMobileCenterIndex();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.lang.String getResourceId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getResourceId();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isCheckable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isCheckable();
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isClickable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isClickable();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocusable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocusable();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isPassword() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isPassword();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.mobile.LongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.Location arg0, com.hp.lft.sdk.Location arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1, com.hp.lft.sdk.mobile.PanArgs arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1, arg2);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0, com.hp.lft.sdk.mobile.PinchArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setFocus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setFocus();
		}

		@Override 
		public void setSecure(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setSecure(arg0);
		}

		@Override 
		public void setText(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setText(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0, com.hp.lft.sdk.mobile.SwipeArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0, arg1);
		}

		@Override 
		public void tap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap();
		}

		@Override 
		public void tap(com.hp.lft.sdk.mobile.TapArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
	
	public abstract class UiObjectNodeBase extends AppModelNodeBase<com.hp.lft.sdk.mobile.UiObject, com.hp.lft.sdk.mobile.UiObjectDescription> implements com.hp.lft.sdk.mobile.UiObject
	{		
		public UiObjectNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.lang.String getAccessibilityId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityId();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getContainer() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getContainer();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getHint() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHint();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMobileCenterIndex() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMobileCenterIndex();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.lang.String getResourceId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getResourceId();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isCheckable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isCheckable();
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isClickable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isClickable();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocusable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocusable();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.mobile.LongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.Location arg0, com.hp.lft.sdk.Location arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1, com.hp.lft.sdk.mobile.PanArgs arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1, arg2);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0, com.hp.lft.sdk.mobile.PinchArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setFocus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setFocus();
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0, com.hp.lft.sdk.mobile.SwipeArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0, arg1);
		}

		@Override 
		public void tap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap();
		}

		@Override 
		public void tap(com.hp.lft.sdk.mobile.TapArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
	
	public abstract class DropDownNodeBase extends AppModelNodeBase<com.hp.lft.sdk.mobile.DropDown, com.hp.lft.sdk.mobile.DropDownDescription> implements com.hp.lft.sdk.mobile.DropDown
	{		
		public DropDownNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.lang.String getAccessibilityId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityId();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getContainer() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getContainer();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getHint() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHint();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMobileCenterIndex() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMobileCenterIndex();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.lang.String getResourceId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getResourceId();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isCheckable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isCheckable();
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isClickable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isClickable();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocusable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocusable();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.mobile.LongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.Location arg0, com.hp.lft.sdk.Location arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1, com.hp.lft.sdk.mobile.PanArgs arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1, arg2);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0, com.hp.lft.sdk.mobile.PinchArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0, arg1);
		}

		@Override 
		public void select(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void selectInWheel(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectInWheel(arg0, arg1);
		}

		@Override 
		public void selectInWheel(int arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectInWheel(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0, com.hp.lft.sdk.mobile.SwipeArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0, arg1);
		}

		@Override 
		public void tap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap();
		}

		@Override 
		public void tap(com.hp.lft.sdk.mobile.TapArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
	
	public abstract class ToggleNodeBase extends AppModelNodeBase<com.hp.lft.sdk.mobile.Toggle, com.hp.lft.sdk.mobile.ToggleDescription> implements com.hp.lft.sdk.mobile.Toggle
	{		
		public ToggleNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.lang.String getAccessibilityId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityId();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getContainer() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getContainer();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getHint() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHint();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMobileCenterIndex() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMobileCenterIndex();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.lang.String getResourceId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getResourceId();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isCheckable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isCheckable();
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isClickable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isClickable();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocusable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocusable();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.mobile.LongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.Location arg0, com.hp.lft.sdk.Location arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pan(java.awt.Point arg0, java.awt.Point arg1, com.hp.lft.sdk.mobile.PanArgs arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1, arg2);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0, com.hp.lft.sdk.mobile.PinchArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0, arg1);
		}

		@Override 
		public void set(boolean arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().set(arg0);
		}

		@Override 
		public void set(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().set(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0, com.hp.lft.sdk.mobile.SwipeArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0, arg1);
		}

		@Override 
		public void tap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap();
		}

		@Override 
		public void tap(com.hp.lft.sdk.mobile.TapArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().tap(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
}
