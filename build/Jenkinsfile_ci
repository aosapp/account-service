def deliveryNumber() {
def matcher = readFile('build/version.xml') =~ '<deliveryNumber>(.+)</deliveryNumber>'
matcher ? matcher[0][1] : null
}

def version() {
def matcher = readFile('build/version.xml') =~ '<version>(.+)</version>'
matcher ? matcher[0][1] : null
}

try{
node('UbuntuDemoApp'){

stage('Checkout'){

checkout([$class: 'GitSCM', branches: [[name: '*/master']], browser: [$class: 'GithubWeb', repoUrl: 'https://github.houston.softwaregrp.net/nimbus/aos-source'], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'WipeWorkspace']], gitTool: 'Git version 2.8.0-rc4 Linux', submoduleCfg: [], userRemoteConfigs: [[url: 'git@github.houston.softwaregrp.net:nimbus/aos-source.git']]])

sh 'git checkout master'

sh '''current_delivery_number=`cat build/version.xml | grep "<deliveryNumber>" | sed -e \'s/<[^>]*>//g\'`
echo "current_delivery_number=$current_delivery_number"
new_delivery_number=$(($current_delivery_number+1))
echo "new_delivery_number=$new_delivery_number"
sed -i "s/<deliveryNumber>.*/<deliveryNumber>$new_delivery_number<\\/deliveryNumber>/g" "build/version.xml"
echo "end edit delivery number with $new_delivery_number"

new_commitId=`git log --format="%H" -n 1`
echo "new_commitId=$new_commitId"
sed -i "s/<commitId>.*/<commitId>$new_commitId<\\/commitId>/g" "build/version.xml"
echo "end edit commit id with $new_commitId"'''

sh 'cat build/version.xml'
}

load "${WORKSPACE}/build/machines_ip.groovy"

def v = version()
  if (v) {
    echo "Building version ${v}"
}

def d = deliveryNumber()
  if (d) {
    echo "Building deliveryMumber ${d}"
}

stage('Build'){

def mvnHome = tool name: 'Maven 3.3.9_Linux', type: 'hudson.tasks.Maven$MavenInstallation'
env.PATH="${env.PATH}:${mvnHome}/bin"
def WORKSPACE=pwd()

sh '''
#create schema only if the checkbox was checked
#if [ \"${Create_schemas}\" = "true" ]; then
# sed -i \'s/=validate/=create/g\' \"shared_resources/resources/prod/internal_config_for_env.properties\"
# echo "end change from validate to create"
#fi
'''

sh "bash edit_root_pom.sh"

sh '''#!/bin/sh

export http_proxy=http://proxy.il.hpecorp.net:8080
export https_proxy=http://proxy.il.hpecorp.net:8080
export npm_config_http_proxy=
export npm_config_https_proxy=
export npm_config_cache=./.cache
export no_proxy="localhost,127.0.0.1,.hpeswlab.net,.hpswlabs.adapps.hp.com,.devlab.ad"

command="sed -i \'s/production.host.ip.*/production.host.ip=$production_ip/g\' accountservice/src/main/resources/DemoApp.properties"
eval $command

mvn -P production,pack_wars_without_accountservices package deploy -am -ff -e -X'''
}

stage('CI'){

withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'c3de99a2-ff92-4a6a-873b-5f866bc60977',
usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD']]) {

sh "docker login -u=${env.DOCKERHUB_USERNAME} -p=${env.DOCKERHUB_PASSWORD}"
sh """
ssh "$ci_ip" \"docker login -u=${env.DOCKERHUB_USERNAME} -p=${env.DOCKERHUB_PASSWORD}\"
"""

sh '''#!/bin/bash
export http_proxy="http://proxy.il.hpecorp.net:8080"
export https_proxy="http://proxy.il.hpecorp.net:8080"
x=`pwd`
echo "path=$x"
all_wars_path=./root/target/wars.zip
accountservice_war_path=./accountservice/target/accountservice.war
cp ${all_wars_path} ./Dockerfiles/aos_all_in_one/tomcat_all
cp ${accountservice_war_path} ./Dockerfiles/aos_all_in_one/tomcat_account
cd ./Dockerfiles/aos_all_in_one/tomcat_all

docker build -t advantageonlineshopping/aos-main-app-dev .
cd ../tomcat_account
docker build -t advantageonlineshopping/aos-accountservice-dev .

docker push advantageonlineshopping/aos-main-app-dev:latest
docker push advantageonlineshopping/aos-accountservice-dev:latest

cd ../../../

#replace the postgres password to admin
sed -i 's/password/admin/g' "./Nimbus_aos/aos_all_in_one/.env_private"
sed -i 's/8080/80/g' "./Nimbus_aos/aos_all_in_one/.env"
sed -i 's/proxy_host/proxy.il.hpecorp.net/g' "./Nimbus_aos/aos_all_in_one/.env"
sed -i 's/proxy_port/8080/g' "./Nimbus_aos/aos_all_in_one/.env"
sed -i 's/.*volume.*//g' "./Nimbus_aos/aos_all_in_one/docker-compose.yml"

#copy files aside for staging machine
mkdir -p ./Nimbus_aos/aos_all_in_one/staging
cp ./Nimbus_aos/aos_all_in_one/docker-compose.yml ./Nimbus_aos/aos_all_in_one/staging/docker-compose.yml
sed -i '/image/ s/$/-dev:ready_for_staging/' ./Nimbus_aos/aos_all_in_one/staging/docker-compose.yml
cp ./Nimbus_aos/aos_all_in_one/startup.sh ./Nimbus_aos/aos_all_in_one/staging/startup.sh
cp ./Nimbus_aos/aos_all_in_one/.env ./Nimbus_aos/aos_all_in_one/staging/.env
cp ./Nimbus_aos/aos_all_in_one/.env_private ./Nimbus_aos/aos_all_in_one/staging/.env_private
#replace the env value to be on AMAZON
sed -i 's/LOCAL/AMAZON/g' "./Nimbus_aos/aos_all_in_one/staging/.env"
sed -i 's/8080/80/g' "./Nimbus_aos/aos_all_in_one/staging/.env"

#copy the docker-compose to ci machine
scp "./Nimbus_aos/aos_all_in_one/docker-compose.yml" root@$ci_ip:/root
scp "./Nimbus_aos/aos_all_in_one/startup.sh" root@$ci_ip:/root
scp "./Nimbus_aos/aos_all_in_one/.env" root@$ci_ip:/root
scp "./Nimbus_aos/aos_all_in_one/.env_private" root@$ci_ip:/root

ssh "$ci_ip" \"chmod +x /root/startup.sh\"

# docker compose pull the latest images, so if there is a newer image the service of that image will be stopped and recreated
ssh "$ci_ip" \"sed -i '/image/ s/$/-dev/' /root/docker-compose.yml && cd /root && docker-compose down -v && docker-compose pull\"
#edit the docker-compose to take images of dev
ssh "$ci_ip" \"/root/startup.sh\"
'''
}
}

stage('CI Tests'){
parallel(
	leanft: {build job: 'demoapp_tests_leanft_maven', parameters: [[$class: 'StringParameterValue', name: 'URL', value: "http://$ci_ip"]], propagate: true},
)
}

stage('Promote to Release & latest'){

sh """
#create a new wars.zip including all the wars to upload to nexus
cd root/target
mkdir temp
mv wars.zip temp
cd temp
unzip "wars.zip" -d "."
cp ../../../accountservice/target/accountservice.war .
zip -r "wars.zip" .
mv wars.zip ..
rm -rf temp
"""

withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'e1e6e164-d262-4718-93db-69a4b24caf0b',
usernameVariable: 'USERNAME', passwordVariable: 'NEXUS_DEPLOY_PASSWORD']]) {
 def NEXUS_DEPLOY_PASSWORD=env.NEXUS_DEPLOY_PASSWORD
sh '''#!/bin/bash
cat > nexus.sh <<EOFEOF
#declare parameters
REPOSITORY_ID="adm-demo-app-release"
REPOSITORY_URL="http://mydtbld0028.hpeswlab.net:8081/nexus/content/repositories/\\${REPOSITORY_ID}/"
GROUP_ID=com.advantage.online.store
VERSION=`cat build/version.xml | grep "<version>" | sed -e \'s/<[^>]*>//g\'`
COMMIT_ID=`cat build/version.xml | grep "<commitId>" | sed -e \'s/<[^>]*>//g\'`
ARTIFACT_ID="Advantage_Online_Shopping_Design_Release_\\$VERSION"
ARTIFACT_ID_LATEST="Advantage_Online_Shopping_Design_Release"
DELIVERY_NUMBER=`cat build/version.xml | grep "<deliveryNumber>" | sed -e \'s/<[^>]*>//g\'`
DELIVERY_NUMBER_LATEST="latestVersion"
PACKAGING=zip
FILE_NAME="root/target/wars.zip"
VERSION_FILE_NAME="build/pom.xml"

cp "build/version.xml" "build/pom.xml"
#***************************************************************************UPLOAD TO RELEASE***************************************************************************
#upload the zip with all the wars
curl -f -v -F r=\\${REPOSITORY_ID} -F hasPom="false" -F e=\\${PACKAGING} -F g=\\${GROUP_ID} -F a=\\${ARTIFACT_ID} -F v=\\${DELIVERY_NUMBER} -F p=zip -F file=@\\${FILE_NAME} --user "deployment:\\${1}" "http://mydtbld0183.hpeswlab.net:8081/nexus/service/local/artifact/maven/content"
#upload the xml file with the version
curl -f -v -F r=\\${REPOSITORY_ID} -F hasPom="false" -F e=\\${PACKAGING} -F g=\\${GROUP_ID} -F a=\\${ARTIFACT_ID} -F c=version -F v=\\${DELIVERY_NUMBER} -F p=pom -F file=@\\${VERSION_FILE_NAME} --user "deployment:\\${1}" "http://mydtbld0183.hpeswlab.net:8081/nexus/service/local/artifact/maven/content"


#***************************************************************************UPLOAD TO LATEST****************************************************************************
#upload the zip with all the wars
curl -f -v -F r=\\${REPOSITORY_ID} -F hasPom="false" -F e=\\${PACKAGING} -F g=\\${GROUP_ID} -F a=\\${ARTIFACT_ID_LATEST} -F v=\\${DELIVERY_NUMBER_LATEST} -F p=zip -F file=@\\${FILE_NAME} --user "deployment:\\${1}" "http://mydtbld0183.hpeswlab.net:8081/nexus/service/local/artifact/maven/content"
#upload the xml file with the version
curl -f -v -F r=\\${REPOSITORY_ID} -F hasPom="false" -F e=\\${PACKAGING} -F g=\\${GROUP_ID} -F a=\\${ARTIFACT_ID_LATEST} -F c=version -F v=\\${DELIVERY_NUMBER_LATEST} -F p=pom -F file=@\\${VERSION_FILE_NAME} --user "deployment:\\${1}" "http://mydtbld0183.hpeswlab.net:8081/nexus/service/local/artifact/maven/content"

EOFEOF
'''

sh "bash nexus.sh ${NEXUS_DEPLOY_PASSWORD}"
}
}

stage('Promote ready_for_staging tag to Dockerhub'){
env.stageName="Promote to Dockerhub"
withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'c3de99a2-ff92-4a6a-873b-5f866bc60977',
usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD']]) {

sh "docker login -u=${env.DOCKERHUB_USERNAME} -p=${env.DOCKERHUB_PASSWORD}"

sh '''
export http_proxy="http://proxy.il.hpecorp.net:8080"
export https_proxy="http://proxy.il.hpecorp.net:8080"
IMAGEID_6_wars=`docker images | grep "advantageonlineshopping/aos-main-app-dev" | grep latest | awk -F" " '{ print $3 }'`
IMAGEID_accountservice_war=`docker images | grep "advantageonlineshopping/aos-accountservice-dev" | grep latest | awk -F" " '{ print $3 }'`

docker tag ${IMAGEID_6_wars} advantageonlineshopping/aos-main-app-dev:ready_for_staging
docker tag ${IMAGEID_accountservice_war} advantageonlineshopping/aos-accountservice-dev:ready_for_staging

docker push advantageonlineshopping/aos-main-app-dev:ready_for_staging
docker push advantageonlineshopping/aos-accountservice-dev:ready_for_staging
'''
}
}

stage('Commit to Stash build/version.xml'){
sh '''mvn clean
cd 	./pack_wars
mvn clean
cd ..
[ -f "./build/pom.xml" ] && rm -rf "./build/pom.xml"
git pull -q
git status
git add "build/version.xml"
git commit -m "updates version.xml" --quiet
git push origin master
'''
}

stage('Staging'){

withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'c3de99a2-ff92-4a6a-873b-5f866bc60977',
usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD']]) {

sh '''
 #copy the docker-compose to staging machine
 scp "./Nimbus_aos/aos_all_in_one/staging/docker-compose.yml" root@$staging_ip:/root
 scp "./Nimbus_aos/aos_all_in_one/staging/startup.sh" root@$staging_ip:/root
 scp "./Nimbus_aos/aos_all_in_one/staging/.env" root@$staging_ip:/root
 scp "./Nimbus_aos/aos_all_in_one/staging/.env_private" root@$staging_ip:/root

 docker pull advantageonlineshopping/aos-main-app-dev:staging
 docker pull advantageonlineshopping/aos-accountservice-dev:staging
 if [ "$(docker images | grep "advantageonlineshopping/aos-accountservice-dev" | grep "ready_for_staging" | awk '{print $3}')" != "$(docker images | grep "advantageonlineshopping/aos-accountservice-dev" | grep -w "staging" | awk '{print $3}')" ] || [ "$(docker images | grep "advantageonlineshopping/aos-main-app-dev" | grep "ready_for_staging" | awk '{print $3}')" != "$(docker images | grep "advantageonlineshopping/aos-main-app-dev" | grep -w "staging" | awk '{print $3}')" ]; then
  echo "yes" >update_staging.txt
 else
  echo "no" >update_staging.txt
 fi
'''

def update_staging = readFile "update_staging.txt";
update_staging = update_staging.trim();
println update_staging

sh """
  if [ "$update_staging" = "yes" ];then
   ssh "$staging_ip" \'docker login -u=${env.DOCKERHUB_USERNAME} -p=${env.DOCKERHUB_PASSWORD} && cd /root && docker-compose down -v && docker-compose pull && chmod +x startup.sh && ./startup.sh\'
  fi
"""

}
}

mail (to: 'adm_demo_alerts@hpe.com, kubany@hpe.com',
	subject: "Success: '${env.JOB_NAME}' (${env.BUILD_NUMBER}) -Version: ${v}, Delivery number ${d}",
	body: "Review the information at: ${env.JOB_URL}",
	mimeType: 'text/html');
	
}	
}catch(err){
    node('UbuntuDemoApp'){
	dir(""){
	def v = version()
    if (v) {
    echo "Building version ${v}"
    }

    def d = deliveryNumber()
    if (d) {
    echo "Building deliveryMumber ${d}"
    }

    currentBuild.result = 'FAILURE'
	mail (to: 'adm_demo_alerts@hpe.com, kubany@hpe.com',
		subject: "Failed: '${env.JOB_NAME}' (${env.BUILD_NUMBER}) -Version: ${v}, Delivery number ${d}",
		body: "Review the information at: ${env.JOB_URL}",
		mimeType: 'text/html');
	}
	}
}