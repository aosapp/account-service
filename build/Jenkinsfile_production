def deliveryNumber() {
def matcher = readFile('build/version.xml') =~ '<deliveryNumber>(.+)</deliveryNumber>'
matcher ? matcher[0][1] : null
}

def version() {
def matcher = readFile('build/version.xml') =~ '<version>(.+)</version>'
matcher ? matcher[0][1] : null
}

try{
node('UbuntuDemoApp'){

stage('Checkout'){

env.stageName="Checkout"
checkout([$class: 'GitSCM', branches: [[name: '*/master']], browser: [$class: 'GithubWeb', repoUrl: 'https://github.houston.softwaregrp.net/nimbus/aos-source'], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'WipeWorkspace']], gitTool: 'Git version 2.8.0-rc4 Linux', submoduleCfg: [], userRemoteConfigs: [[url: 'git@github.houston.softwaregrp.net:nimbus/aos-source.git']]])


sh 'git checkout master'

}

load "${WORKSPACE}/build/machines_ip.groovy"

env.v = version()
  if (env.v) {
    echo "Building version ${env.v}"
}

env.d = deliveryNumber()
  if (env.d) {
    echo "Building deliveryMumber ${env.d}"
}

stage('Production'){

env.stageName="Production"
sh '''#!/bin/bash

#copy the docker-compose to production machine
echo "production_ip=$production_ip"
ssh "$production_ip" \"docker stack rm STACK\"
sed -i 's/LOCAL/AMAZON/g' "./Nimbus_aos/aos_distributed/.env"
scp "./Nimbus_aos/aos_distributed/docker-compose.yml" root@$production_ip:/root
scp "./Nimbus_aos/aos_distributed/startup.sh" root@$production_ip:/root
scp "./Nimbus_aos/aos_distributed/.env" root@$production_ip:/root
scp "./Nimbus_aos/aos_distributed/.env_private" root@$production_ip:/root

ssh "$production_ip" \"chmod +x /root/startup.sh\"

# docker compose pull the latest images, so if there is a newer image the service of that image will be stopped and recreated
ssh "$production_ip" \"sed -i '/image/ s/$/-dev:staging/' /root/docker-compose.yml && sed -i 's/8081/8082/g' /root/.env && /root/startup.sh\"
'''

}

stage('Production Tests'){
env.stageName="Production Tests"
parallel(
	leanft: {build job: 'demoapp_tests_leanft_maven', parameters: [[$class: 'StringParameterValue', name: 'job_type', value: 'Production'], [$class: 'StringParameterValue', name: 'URL', value: "http://$production_ip:8080/#/"]], propagate: true},
)
}

stage('Promote Production tag to Dockerhub'){
env.stageName="Promote to Dockerhub"
sh '''
export http_proxy="http://proxy.il.hpecorp.net:8080"
export https_proxy="http://proxy.il.hpecorp.net:8080"
IMAGEID_6_wars=`docker images | grep "advantageonlineshopping/aos-main-app-dev" | grep -w staging | awk -F" " '{ print $3 }'`
IMAGEID_accountservice_war=`docker images | grep "advantageonlineshopping/aos-accountservice-dev" | grep -w staging | awk -F" " '{ print $3 }'`

docker tag ${IMAGEID_6_wars} advantageonlineshopping/aos-main-app-dev:production
docker tag ${IMAGEID_accountservice_war} advantageonlineshopping/aos-accountservice-dev:production

docker push advantageonlineshopping/aos-main-app-dev:production
docker push advantageonlineshopping/aos-accountservice-dev:production
'''
}

stage('Build Installer'){
  build job: 'demoapp_build_installer', propagate: false
}

stage('Downloads latest snapshot Installer'){

node('Windows2008R2'){

sh '''
 pwd
 rm -rf *
 rm -rf .[^.] .??*
 git init
 git remote add -f origin ssh://git@mydtbld0005.hpeswlab.net:7999/ad/adm-demo-app-installer.git
 git config core.sparseCheckout true
 echo "build" >> .git/info/sparse-checkout
 git pull origin master
 VERSION=`cat build/version.xml | grep "<version>" | sed -e \'s/<[^>]*>//g\'`
 if [ ! -d "/c/LeanFTJavaRunner/installer_release" ];then
  echo "in 1"   
  mkdir -p /c/LeanFTJavaRunner/installer_release
 else
  echo "in 2"
  rm -rf /c/LeanFTJavaRunner/installer_release/*
 fi
 cd /c/LeanFTJavaRunner/installer_release/
 curl -sS -L -o installer.zip "http://mydtbld0183.hpeswlab.net:8081/nexus/service/local/artifact/maven/redirect?g=com.advantage.online.store&a=installer&v=${VERSION}-SNAPSHOT&r=adm-demo-app-snapshot&p=zip"
 unzip installer.zip
 rm -rf installer.zip
 mv InstallAOS_${VERSION}.exe InstallAOS.exe
'''
}
}

stage('SignHP Installer'){
  build job: 'demoapp_folder/demoapp_installer_signHp', propagate: false
}

stage('Upload Installer to latest release'){

node('Windows2008R2'){

withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'e1e6e164-d262-4718-93db-69a4b24caf0b',
usernameVariable: 'USERNAME', passwordVariable: 'NEXUS_DEPLOY_PASSWORD']]) {
 def NEXUS_DEPLOY_PASSWORD=env.NEXUS_DEPLOY_PASSWORD
sh '''#!/bin/bash	
cat > nexus.sh <<EOFEOF
#declare parameters
VERSION=`cat build/version.xml | grep "<version>" | sed -e \'s/<[^>]*>//g\'`
COMMIT_ID=`cat build/version.xml | grep "<commitId>" | sed -e \'s/<[^>]*>//g\'`
NEW_COMMIT_ID=`git log --format="%H" -n 1`
DELIVERY_NUMBER=`cat build/version.xml | grep "<deliveryNumber>" | sed -e \'s/<[^>]*>//g\'`
NEW_DELIVERY_NUMBER=\\$((\\$DELIVERY_NUMBER+1))
  
sed -i "s/<deliveryNumber>.*/<deliveryNumber>\\$NEW_DELIVERY_NUMBER<\\/deliveryNumber>/g" "build/version.xml"
sed -i "s/<commitId>.*/<commitId>\\$NEW_COMMIT_ID<\\/commitId>/g" "build/version.xml"

cp "build/version.xml" "build/pom.xml"

mv /c/LeanFTJavaRunner/installer_release/InstallAOS.exe /c/LeanFTJavaRunner/installer_release/InstallAOS_\\${VERSION}_\\${NEW_DELIVERY_NUMBER}.exe
"/c/Program Files/7-Zip/7z.exe" a -tzip installer.zip /c/LeanFTJavaRunner/installer_release/InstallAOS_\\${VERSION}_\\${NEW_DELIVERY_NUMBER}.exe

#***************************************************************************UPLOAD TO LATEST***************************************************************************

curl -f -v -F r=adm-demo-app-release -F hasPom="false" -F e=zip -F g=com.advantage.online.store -F a=Installer_Release -F v=latestVersion -F p=zip -F file=@installer.zip --user "deployment:\\${1}" "http://mydtbld0183.hpeswlab.net:8081/nexus/service/local/artifact/maven/content"
#upload the xml file with the version
curl -f -v -F r=adm-demo-app-release -F hasPom="false" -F g=com.advantage.online.store -F a=Installer_Release -F c=version -F v=latestVersion -F p=pom -F file=@build/pom.xml --user "deployment:\\${1}" "http://mydtbld0183.hpeswlab.net:8081/nexus/service/local/artifact/maven/content"

#***************************************************************************UPLOAD TO RELEASE****************************************************************************

curl -f -v -F r=adm-demo-app-release -F hasPom="false" -F e=zip -F g=com.advantage.online.store -F a=Installer_Release_\\${VERSION} -F v=\\${NEW_DELIVERY_NUMBER} -F p=zip -F file=@installer.zip --user "deployment:\\${1}" "http://mydtbld0183.hpeswlab.net:8081/nexus/service/local/artifact/maven/content"
#upload the xml file with the version
curl -f -v -F r=adm-demo-app-release -F hasPom="false" -F g=com.advantage.online.store -F a=Installer_Release_\\${VERSION} -F c=version -F v=\\${NEW_DELIVERY_NUMBER} -F p=pom -F file=@build/pom.xml --user "deployment:\\${1}" "http://mydtbld0183.hpeswlab.net:8081/nexus/service/local/artifact/maven/content"

[ -f "./build/pom.xml" ] && rm -rf "./build/pom.xml"
git pull -q
git status
git add "build/version.xml"
git commit -m "updates version.xml" --quiet
git push origin master

EOFEOF
'''

sh "bash nexus.sh ${NEXUS_DEPLOY_PASSWORD}"
}
}
}

mail (to: 'adm_demo_alerts@hpe.com, avi.genshaft@hpe.com',
	subject: "Success: '${env.JOB_NAME}' (${env.BUILD_NUMBER}) -Version: ${v}, Delivery number ${d}",
	body: "Review the information at: ${env.JOB_URL}",
	mimeType: 'text/html');
	
}	
}catch(err){
    node('UbuntuDemoApp'){
	dir(""){

    if (env.stageName == "Production Tests"){
	 stage('Redeploy last successful production images'){
	  sh '''
	   ehco "production_ip=$production_ip"
	   ssh "$production_ip" \"docker stack rm STACK\"
	   sleep 30
	   ssh "$production_ip" \"sed -i 's/staging/production/g' /root/docker-compose.yml && /root/startup.sh\"
       sleep 120
       #install trace on main
       ssh "$production_ip" \"/root/install_trace.sh "main-app" \"
       sleep 5
       #install trace on account
       ssh "$production_account_ip" \"/root/install_trace.sh "accountservice" \"
	   '''
	 }
	}	
    currentBuild.result = 'FAILURE'
	mail (to: 'adm_demo_alerts@hpe.com, avi.genshaft@hpe.com',
		subject: "Failed: '${env.JOB_NAME}' (${env.BUILD_NUMBER}) -Version: ${env.v}, Delivery number ${env.d}",
		body: "Review the information at: ${env.JOB_URL}",
		mimeType: 'text/html');
	}
	}
}