try{
node('UbuntuDemoApp'){

checkout([$class: 'GitSCM', branches: [[name: '*/master']], browser: [$class: 'GithubWeb', repoUrl: 'https://github.houston.softwaregrp.net/nimbus/aos-source'], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'build/machines_ip.groovy']]], [$class: 'WipeWorkspace']], gitTool: 'Git version 2.8.0-rc4 Linux', submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'efc35e72-9a72-4102-9b83-f6b54683ca0b', url: 'https://github.houston.softwaregrp.net/nimbus/aos-source.git']]])

load "${WORKSPACE}/build/machines_ip.groovy"

/*
stage('Android Tests'){
 build job: 'demoapp_folder/demoapp_tests_leanft_maven', parameters: [[$class: 'StringParameterValue', name: 'job_type', value: 'Android'], [$class: 'StringParameterValue', name: 'URL', value: "http://$staging_ip"]]
}*/

try {
stage('SRF Tests'){
 def srf_tests = build job: 'demoapp_folder/demoapp_tests_leanft_maven', parameters: [[$class: 'StringParameterValue', name: 'job_type', value: 'CI'], [$class: 'StringParameterValue', name: 'URL', value: "http://$staging_ip"], [$class: 'StringParameterValue', name: 'EnvironmentType', value: 'SRF']], propagate: false
 result = srf_tests.result
       if (result.equals("SUCCESS")) {
       } else {
          sh "exit 1" // this fails the stage
       }
}
} catch (e) {
   result = "FAIL" // make sure other exceptions are recorded as failure too
}

try {
stage('LeanFT Tests'){
 def leanft_tests = build job: 'demoapp_folder/demoapp_tests_from_leanft_maven', parameters: [[$class: 'StringParameterValue', name: 'URL', value: "http://$staging_ip"]], propagate: false
 result = leanft_tests.result
      if (result.equals("SUCCESS")) {
      } else {
         sh "exit 1" // this fails the stage
      }
}
} catch (e) {
   result = "FAIL" // make sure other exceptions are recorded as failure too
}

stage('SRL Tests'){
 build job: 'demoapp_folder/demoapp_tests_stormrunner'
}

stage('Dotnet Tests'){
try {
 env.dotnet_test_status="Success"
 
 node('Windows2008R2'){
  
  sh '''
   pwd
   rm -rf *
   rm -rf .[^.] .??*
   git init
   git remote add -f origin ssh://git@mydtbld0005.hpeswlab.net:7999/ad/adm_demo_app_dotnet.git
   git config core.sparseCheckout true
   echo "build" >> .git/info/sparse-checkout
   git pull origin master
   VERSION=`cat build/version.xml | grep "<version>" | sed -e \'s/<[^>]*>//g\'`-SNAPSHOT
   if [ ! -d "/c/LeanFTJavaRunner/dotnet_release" ];then
    echo "in 1"   
    mkdir -p /c/LeanFTJavaRunner/dotnet_release
   else
    echo "in 2"
    rm -rf /c/LeanFTJavaRunner/dotnet_release/*
   fi
   cd /c/LeanFTJavaRunner/dotnet_release/
   curl -sS -L -o dotnet.zip "http://mydtbld0183.hpeswlab.net:8081/nexus/service/local/artifact/maven/redirect?g=com.advantage.online.store&a=dotnet&v=${VERSION}&r=adm-demo-app-snapshot&p=zip"
   unzip dotnet.zip
  '''
 build job: 'demoapp_folder/demoapp_tests_leanft', parameters: [[$class: 'StringParameterValue', name: 'job_type', value: 'DotNet'], [$class: 'StringParameterValue', name: 'URL', value: "http://$staging_ip"]]
 }
 }catch (Exception err) {
        env.dotnet_test_status="Failed"
 }
 echo "RESULT: ${env.dotnet_test_status}"
 currentBuild.result = 'SUCCESS'
}

stage('Upload Dotnet to latest release'){

if (env.dotnet_test_status == "Success"){
currentBuild.description = "dotnet"
node('Windows2008R2'){
 
withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'e1e6e164-d262-4718-93db-69a4b24caf0b',
usernameVariable: 'USERNAME', passwordVariable: 'NEXUS_DEPLOY_PASSWORD']]) {
 def NEXUS_DEPLOY_PASSWORD=env.NEXUS_DEPLOY_PASSWORD
sh '''#!/bin/bash
cat > nexus.sh <<EOFEOF
#declare parameters
VERSION=`cat build/version.xml | grep "<version>" | sed -e \'s/<[^>]*>//g\'`
COMMIT_ID=`cat build/version.xml | grep "<commitId>" | sed -e \'s/<[^>]*>//g\'`
NEW_COMMIT_ID=`git log --format="%H" -n 1`
DELIVERY_NUMBER=`cat build/version.xml | grep "<deliveryNumber>" | sed -e \'s/<[^>]*>//g\'`
NEW_DELIVERY_NUMBER=\\$((\\$DELIVERY_NUMBER+1))
  
sed -i "s/<deliveryNumber>.*/<deliveryNumber>\\$NEW_DELIVERY_NUMBER<\\/deliveryNumber>/g" "build/version.xml"
sed -i "s/<commitId>.*/<commitId>\\$NEW_COMMIT_ID<\\/commitId>/g" "build/version.xml"

cp "build/version.xml" "build/pom.xml"

#***************************************************************************UPLOAD TO LATEST***************************************************************************

curl -f -v -F r=adm-demo-app-release -F hasPom="false" -F e=zip -F g=com.advantage.online.store -F a=Dotnet_Release -F v=latestVersion -F p=zip -F file=@/c/LeanFTJavaRunner/dotnet_release/dotnet.zip --user "deployment:\\${1}" "http://mydtbld0183.hpeswlab.net:8081/nexus/service/local/artifact/maven/content"
#upload the xml file with the version
curl -f -v -F r=adm-demo-app-release -F hasPom="false" -F g=com.advantage.online.store -F a=Dotnet_Release -F c=version -F v=latestVersion -F p=pom -F file=@build/pom.xml --user "deployment:\\${1}" "http://mydtbld0183.hpeswlab.net:8081/nexus/service/local/artifact/maven/content"

#***************************************************************************UPLOAD TO RELEASE****************************************************************************

curl -f -v -F r=adm-demo-app-release -F hasPom="false" -F e=zip -F g=com.advantage.online.store -F a=Dotnet_Release_\\${VERSION} -F v=\\${NEW_DELIVERY_NUMBER} -F p=zip -F file=@/c/LeanFTJavaRunner/dotnet_release/dotnet.zip --user "deployment:\\${1}" "http://mydtbld0183.hpeswlab.net:8081/nexus/service/local/artifact/maven/content"
#upload the xml file with the version
curl -f -v -F r=adm-demo-app-release -F hasPom="false" -F g=com.advantage.online.store -F a=Dotnet_Release_\\${VERSION} -F c=version -F v=\\${NEW_DELIVERY_NUMBER} -F p=pom -F file=@build/pom.xml --user "deployment:\\${1}" "http://mydtbld0183.hpeswlab.net:8081/nexus/service/local/artifact/maven/content"

[ -f "./build/pom.xml" ] && rm -rf "./build/pom.xml"
git pull -q
git status
git add "build/version.xml"
git commit -m "updates version.xml" --quiet
git push origin master

EOFEOF
'''

sh "bash nexus.sh ${NEXUS_DEPLOY_PASSWORD}"
}
}
}
}

stage('Promote Staging tag to Dockerhub'){

withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'c3de99a2-ff92-4a6a-873b-5f866bc60977',
usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD']]) {

sh """
docker login -u=${env.DOCKERHUB_USERNAME} -p=${env.DOCKERHUB_PASSWORD}
"""

sh '''
export http_proxy="http://proxy.il.hpecorp.net:8080"
export https_proxy="http://proxy.il.hpecorp.net:8080"
IMAGEID_6_wars=`docker images | grep "advantageonlineshopping/aos-main-app-dev" | grep "ready_for_staging" | awk -F" " '{ print $3 }'`
IMAGEID_accountservice_war=`docker images | grep "advantageonlineshopping/aos-accountservice-dev" | grep "ready_for_staging" | awk -F" " '{ print $3 }'`

docker tag ${IMAGEID_6_wars} advantageonlineshopping/aos-main-app-dev:staging
docker tag ${IMAGEID_accountservice_war} advantageonlineshopping/aos-accountservice-dev:staging

docker push advantageonlineshopping/aos-main-app-dev:staging
docker push advantageonlineshopping/aos-accountservice-dev:staging
'''
  }
}

stage('Trigger Production Pipeline'){

sh '''
 echo "no" > trigger_production.txt
 docker pull advantageonlineshopping/aos-main-app-dev:production
 docker pull advantageonlineshopping/aos-accountservice-dev:production
 if [ "$(docker images | grep "advantageonlineshopping/aos-accountservice-dev" | grep "ready_for_staging" | awk '{print $3}')" != "$(docker images | grep "advantageonlineshopping/aos-accountservice-dev" | grep "production" | awk '{print $3}')" ] || [ "$(docker images | grep "advantageonlineshopping/aos-main-app-dev" | grep "ready_for_staging" | awk '{print $3}')" != "$(docker images | grep "advantageonlineshopping/aos-main-app-dev" | grep "production" | awk '{print $3}')" ]; then
  echo "yes" > trigger_production.txt
 fi
'''
 def trigger_production = readFile "trigger_production.txt"
 trigger_production = trigger_production.trim();
 println trigger_production
 if (trigger_production == 'yes') {
  println "in"
  build job: 'demoapp_folder/demoapp_build_pipeline_production', wait: false
 }
}

mail (to: 'adm_demo_alerts@hpe.com, avi.genshaft@hpe.com',
	subject: "Success: '${env.JOB_NAME}' (${env.BUILD_NUMBER})",
	body: "Review the information at: ${env.JOB_URL}",
	mimeType: 'text/html');
	
}	
}catch(err){
    node('UbuntuDemoApp'){

    currentBuild.result = 'FAILURE'
	
	mail (to: 'adm_demo_alerts@hpe.com, avi.genshaft@hpe.com',
		subject: "Failed: '${env.JOB_NAME}' (${env.BUILD_NUMBER})",
		body: "Review the information at: ${env.JOB_URL}",
		mimeType: 'text/html');
		
	}
}